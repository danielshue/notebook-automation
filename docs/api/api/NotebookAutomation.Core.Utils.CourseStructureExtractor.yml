### YamlMime:ManagedReference
items:
- uid: NotebookAutomation.Core.Utils.CourseStructureExtractor
  commentId: T:NotebookAutomation.Core.Utils.CourseStructureExtractor
  id: CourseStructureExtractor
  parent: NotebookAutomation.Core.Utils
  children:
  - NotebookAutomation.Core.Utils.CourseStructureExtractor.#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.CourseStructureExtractor})
  - NotebookAutomation.Core.Utils.CourseStructureExtractor.CleanModuleOrLessonName(System.String)
  - NotebookAutomation.Core.Utils.CourseStructureExtractor.ExtractModuleAndLesson(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  langs:
  - csharp
  - vb
  name: CourseStructureExtractor
  nameWithType: CourseStructureExtractor
  fullName: NotebookAutomation.Core.Utils.CourseStructureExtractor
  type: Class
  source:
    id: CourseStructureExtractor
    path: System.Text.RegularExpressions.Generator\System.Text.RegularExpressions.Generator.RegexGenerator\RegexGenerator.g.cs
    startLine: 618
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Utils
  summary: Utility class for extracting course structure information (modules, lessons) from file paths.
  remarks: >-
    <p>

    This class provides functionality to identify module and lesson information from file paths

    based on directory naming conventions. It uses multiple extraction strategies to handle

    various course organization patterns commonly found in educational content.

    </p>

    <p>

    The extractor supports detection of module and lesson information by analyzing:

    <ul><li>Directory names containing "module" or "lesson" keywords</li><li>Numbered directory prefixes (e.g., "01_", "02-")</li><li>Filename patterns with embedded module/lesson information</li><li>Hierarchical structures with parent-child relationships</li></ul>

    </p>

    <p>

    The class provides clean formatting by removing numbering prefixes and converting names

    to title case for consistent metadata output.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">var logger = serviceProvider.GetService&lt;ILogger&lt;CourseStructureExtractor&gt;&gt;();

    var extractor = new CourseStructureExtractor(logger);

    var metadata = new Dictionary&lt;string, object&gt;();


    extractor.ExtractModuleAndLesson("/courses/01_module-intro/02_lesson-basics/content.md", metadata);

    // metadata now contains: { "module": "Module Intro", "lesson": "Lesson Basics" }</code></pre>
  syntax:
    content: public class CourseStructureExtractor
    content.vb: Public Class CourseStructureExtractor
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">logger</code> is null.
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NotebookAutomation.Core.Utils.CourseStructureExtractor.#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.CourseStructureExtractor})
  commentId: M:NotebookAutomation.Core.Utils.CourseStructureExtractor.#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.CourseStructureExtractor})
  id: '#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.CourseStructureExtractor})'
  parent: NotebookAutomation.Core.Utils.CourseStructureExtractor
  langs:
  - csharp
  - vb
  name: CourseStructureExtractor(ILogger<CourseStructureExtractor>)
  nameWithType: CourseStructureExtractor.CourseStructureExtractor(ILogger<CourseStructureExtractor>)
  fullName: NotebookAutomation.Core.Utils.CourseStructureExtractor.CourseStructureExtractor(Microsoft.Extensions.Logging.ILogger<NotebookAutomation.Core.Utils.CourseStructureExtractor>)
  type: Constructor
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Utils/CourseStructureExtractor.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: .ctor
    path: src/c-sharp/NotebookAutomation.Core/Utils/CourseStructureExtractor.cs
    startLine: 46
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Utils
  summary: Utility class for extracting course structure information (modules, lessons) from file paths.
  remarks: >-
    <p>

    This class provides functionality to identify module and lesson information from file paths

    based on directory naming conventions. It uses multiple extraction strategies to handle

    various course organization patterns commonly found in educational content.

    </p>

    <p>

    The extractor supports detection of module and lesson information by analyzing:

    <ul><li>Directory names containing "module" or "lesson" keywords</li><li>Numbered directory prefixes (e.g., "01_", "02-")</li><li>Filename patterns with embedded module/lesson information</li><li>Hierarchical structures with parent-child relationships</li></ul>

    </p>

    <p>

    The class provides clean formatting by removing numbering prefixes and converting names

    to title case for consistent metadata output.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">var logger = serviceProvider.GetService&lt;ILogger&lt;CourseStructureExtractor&gt;&gt;();

    var extractor = new CourseStructureExtractor(logger);

    var metadata = new Dictionary&lt;string, object&gt;();


    extractor.ExtractModuleAndLesson("/courses/01_module-intro/02_lesson-basics/content.md", metadata);

    // metadata now contains: { "module": "Module Intro", "lesson": "Lesson Basics" }</code></pre>
  syntax:
    content: public CourseStructureExtractor(ILogger<CourseStructureExtractor> logger)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.CourseStructureExtractor}
      description: Logger for diagnostic and warning messages during extraction operations.
    content.vb: Public Sub New(logger As ILogger(Of CourseStructureExtractor))
  overload: NotebookAutomation.Core.Utils.CourseStructureExtractor.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">logger</code> is null.
  nameWithType.vb: CourseStructureExtractor.New(ILogger(Of CourseStructureExtractor))
  fullName.vb: NotebookAutomation.Core.Utils.CourseStructureExtractor.New(Microsoft.Extensions.Logging.ILogger(Of NotebookAutomation.Core.Utils.CourseStructureExtractor))
  name.vb: New(ILogger(Of CourseStructureExtractor))
- uid: NotebookAutomation.Core.Utils.CourseStructureExtractor.ExtractModuleAndLesson(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:NotebookAutomation.Core.Utils.CourseStructureExtractor.ExtractModuleAndLesson(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: ExtractModuleAndLesson(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: NotebookAutomation.Core.Utils.CourseStructureExtractor
  langs:
  - csharp
  - vb
  name: ExtractModuleAndLesson(string, Dictionary<string, object>)
  nameWithType: CourseStructureExtractor.ExtractModuleAndLesson(string, Dictionary<string, object>)
  fullName: NotebookAutomation.Core.Utils.CourseStructureExtractor.ExtractModuleAndLesson(string, System.Collections.Generic.Dictionary<string, object>)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Utils/CourseStructureExtractor.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: ExtractModuleAndLesson
    path: src/c-sharp/NotebookAutomation.Core/Utils/CourseStructureExtractor.cs
    startLine: 81
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Utils
  summary: Extracts module and lesson information from a file path and adds it to the provided metadata dictionary.
  remarks: >-
    <p>

    This method uses a multi-stage extraction process:

    <ol><li>First attempts to extract from the filename itself</li><li>Then looks for explicit "module" and "lesson" keywords in directory names</li><li>Finally attempts to identify patterns from numbered directory structures</li></ol>

    </p>

    <p>

    The method logs debug information during extraction to help with troubleshooting course structure issues.

    Warning messages are logged if the file path is empty or if extraction fails due to exceptions.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">var metadata = new Dictionary&lt;string, object&gt;();

    extractor.ExtractModuleAndLesson(@"C:\courses\01_intro-module\03_lesson-basics\notes.md", metadata);


    // Result: metadata contains:

    // { "module": "Intro Module", "lesson": "Lesson Basics" }</code></pre>
  syntax:
    content: public void ExtractModuleAndLesson(string filePath, Dictionary<string, object> metadata)
    parameters:
    - id: filePath
      type: System.String
      description: The full path to the file from which to extract course structure information.
    - id: metadata
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: >-
        The metadata dictionary to update with module/lesson information.
             Keys "module" and "lesson" will be added if corresponding information is found.
    content.vb: Public Sub ExtractModuleAndLesson(filePath As String, metadata As Dictionary(Of String, Object))
  overload: NotebookAutomation.Core.Utils.CourseStructureExtractor.ExtractModuleAndLesson*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Logged as warning if extraction fails due to invalid path structure.
  nameWithType.vb: CourseStructureExtractor.ExtractModuleAndLesson(String, Dictionary(Of String, Object))
  fullName.vb: NotebookAutomation.Core.Utils.CourseStructureExtractor.ExtractModuleAndLesson(String, System.Collections.Generic.Dictionary(Of String, Object))
  name.vb: ExtractModuleAndLesson(String, Dictionary(Of String, Object))
- uid: NotebookAutomation.Core.Utils.CourseStructureExtractor.CleanModuleOrLessonName(System.String)
  commentId: M:NotebookAutomation.Core.Utils.CourseStructureExtractor.CleanModuleOrLessonName(System.String)
  id: CleanModuleOrLessonName(System.String)
  parent: NotebookAutomation.Core.Utils.CourseStructureExtractor
  langs:
  - csharp
  - vb
  name: CleanModuleOrLessonName(string)
  nameWithType: CourseStructureExtractor.CleanModuleOrLessonName(string)
  fullName: NotebookAutomation.Core.Utils.CourseStructureExtractor.CleanModuleOrLessonName(string)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Utils/CourseStructureExtractor.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: CleanModuleOrLessonName
    path: src/c-sharp/NotebookAutomation.Core/Utils/CourseStructureExtractor.cs
    startLine: 417
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Utils
  summary: Cleans up module or lesson folder names by removing numbering prefixes and formatting for consistent display.
  remarks: >-
    <p>

    This method performs several transformations to create user-friendly module and lesson names:

    <ol><li>Removes numeric prefixes (e.g., "01_", "02-", "03.")</li><li>Converts camelCase to spaced words</li><li>Replaces hyphens and underscores with spaces</li><li>Normalizes multiple spaces to single spaces</li><li>Converts to title case using current culture</li></ol>

    </p>

    <p>

    The method is culture-aware and uses the current culture's title case rules for proper formatting.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">string result1 = CleanModuleOrLessonName("01_module-introduction");     // Returns "Module Introduction"

    string result2 = CleanModuleOrLessonName("02-lesson_basics");          // Returns "Lesson Basics"

    string result3 = CleanModuleOrLessonName("sessionPlanningDetails");    // Returns "Session Planning Details"

    string result4 = CleanModuleOrLessonName("Week-1-Overview");           // Returns "Week Overview"</code></pre>
  syntax:
    content: public static string CleanModuleOrLessonName(string folderName)
    parameters:
    - id: folderName
      type: System.String
      description: The raw folder name to clean and format.
    return:
      type: System.String
      description: A cleaned and formatted folder name in title case with proper spacing.
    content.vb: Public Shared Function CleanModuleOrLessonName(folderName As String) As String
  overload: NotebookAutomation.Core.Utils.CourseStructureExtractor.CleanModuleOrLessonName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">folderName</code> is null.
  nameWithType.vb: CourseStructureExtractor.CleanModuleOrLessonName(String)
  fullName.vb: NotebookAutomation.Core.Utils.CourseStructureExtractor.CleanModuleOrLessonName(String)
  name.vb: CleanModuleOrLessonName(String)
references:
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: NotebookAutomation.Core.Utils
  commentId: N:NotebookAutomation.Core.Utils
  href: NotebookAutomation.html
  name: NotebookAutomation.Core.Utils
  nameWithType: NotebookAutomation.Core.Utils
  fullName: NotebookAutomation.Core.Utils
  spec.csharp:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Utils
    name: Utils
    href: NotebookAutomation.Core.Utils.html
  spec.vb:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Utils
    name: Utils
    href: NotebookAutomation.Core.Utils.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NotebookAutomation.Core.Utils.CourseStructureExtractor.#ctor*
  commentId: Overload:NotebookAutomation.Core.Utils.CourseStructureExtractor.#ctor
  href: NotebookAutomation.Core.Utils.CourseStructureExtractor.html#NotebookAutomation_Core_Utils_CourseStructureExtractor__ctor_Microsoft_Extensions_Logging_ILogger_NotebookAutomation_Core_Utils_CourseStructureExtractor__
  name: CourseStructureExtractor
  nameWithType: CourseStructureExtractor.CourseStructureExtractor
  fullName: NotebookAutomation.Core.Utils.CourseStructureExtractor.CourseStructureExtractor
  nameWithType.vb: CourseStructureExtractor.New
  fullName.vb: NotebookAutomation.Core.Utils.CourseStructureExtractor.New
  name.vb: New
- uid: Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.CourseStructureExtractor}
  commentId: T:Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.CourseStructureExtractor}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<CourseStructureExtractor>
  nameWithType: ILogger<CourseStructureExtractor>
  fullName: Microsoft.Extensions.Logging.ILogger<NotebookAutomation.Core.Utils.CourseStructureExtractor>
  nameWithType.vb: ILogger(Of CourseStructureExtractor)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of NotebookAutomation.Core.Utils.CourseStructureExtractor)
  name.vb: ILogger(Of CourseStructureExtractor)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - uid: NotebookAutomation.Core.Utils.CourseStructureExtractor
    name: CourseStructureExtractor
    href: NotebookAutomation.Core.Utils.CourseStructureExtractor.html
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - uid: NotebookAutomation.Core.Utils.CourseStructureExtractor
    name: CourseStructureExtractor
    href: NotebookAutomation.Core.Utils.CourseStructureExtractor.html
  - name: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - name: TCategoryName
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - name: TCategoryName
  - name: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NotebookAutomation.Core.Utils.CourseStructureExtractor.ExtractModuleAndLesson*
  commentId: Overload:NotebookAutomation.Core.Utils.CourseStructureExtractor.ExtractModuleAndLesson
  href: NotebookAutomation.Core.Utils.CourseStructureExtractor.html#NotebookAutomation_Core_Utils_CourseStructureExtractor_ExtractModuleAndLesson_System_String_System_Collections_Generic_Dictionary_System_String_System_Object__
  name: ExtractModuleAndLesson
  nameWithType: CourseStructureExtractor.ExtractModuleAndLesson
  fullName: NotebookAutomation.Core.Utils.CourseStructureExtractor.ExtractModuleAndLesson
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, object>
  nameWithType: Dictionary<string, object>
  fullName: System.Collections.Generic.Dictionary<string, object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NotebookAutomation.Core.Utils.CourseStructureExtractor.CleanModuleOrLessonName*
  commentId: Overload:NotebookAutomation.Core.Utils.CourseStructureExtractor.CleanModuleOrLessonName
  href: NotebookAutomation.Core.Utils.CourseStructureExtractor.html#NotebookAutomation_Core_Utils_CourseStructureExtractor_CleanModuleOrLessonName_System_String_
  name: CleanModuleOrLessonName
  nameWithType: CourseStructureExtractor.CleanModuleOrLessonName
  fullName: NotebookAutomation.Core.Utils.CourseStructureExtractor.CleanModuleOrLessonName
