### YamlMime:ManagedReference
items:
- uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector
  commentId: T:NotebookAutomation.Core.Utils.MetadataHierarchyDetector
  id: MetadataHierarchyDetector
  parent: NotebookAutomation.Core.Utils
  children:
  - NotebookAutomation.Core.Utils.MetadataHierarchyDetector.#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.MetadataHierarchyDetector},NotebookAutomation.Core.Configuration.AppConfig,System.String,System.Boolean,System.String)
  - NotebookAutomation.Core.Utils.MetadataHierarchyDetector.FindHierarchyInfo(System.String)
  - NotebookAutomation.Core.Utils.MetadataHierarchyDetector.UpdateMetadataWithHierarchy(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.String)
  - NotebookAutomation.Core.Utils.MetadataHierarchyDetector.VaultRoot
  langs:
  - csharp
  - vb
  name: MetadataHierarchyDetector
  nameWithType: MetadataHierarchyDetector
  fullName: NotebookAutomation.Core.Utils.MetadataHierarchyDetector
  type: Class
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Utils/MetadataHierarchyDetector.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: MetadataHierarchyDetector
    path: src/c-sharp/NotebookAutomation.Core/Utils/MetadataHierarchyDetector.cs
    startLine: 51
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Utils
  summary: Detects and infers hierarchical metadata (program, course, class, module) from file paths in a notebook vault.
  remarks: >-
    <p>

    Implements path-based hierarchy detection based on the directory structure.

    Determines the appropriate program, course, class, and module metadata based on a file's location,

    following the conventions used in the notebook vault.

    </p>

    <p> ///. <b>Expected Directory Structure:</b>


    <pre><code class="lang-csharp">Vault Root (main-index) - NO hierarchy metadata

    └── Program Folders (program-index) - program only
        └── Course Folders (course-index) - program + course
            └── Class Folders (class-index) - program + course + class
                ├── Case Study Folders (case-study-index) - program + course + class + module
                └── Module Folders (module-index) - program + course + class + module
                    ├── Live Session Folder (live-session-index) - program + course + class + module
                    └── Lesson Folders (lesson-index) - program + course + class + module
                        └── Content Files (readings, videos, transcripts, etc.)</code></pre>
    </p>

    <p>

    Features:

    - Configurable vault root path (from config or override)

    - Support for explicit program overrides via parameter

    - Dynamic hierarchy detection based on folder structure

    - Dynamic fallback to folder names when index files aren't available

    - Robust path traversal for hierarchy detection.

    </p>

    <example>


    <pre><code class="lang-csharp">var detector = new MetadataHierarchyDetector(logger, appConfig);

    var info = detector.FindHierarchyInfo(@"C:\\notebook-vault\\MBA\\Course1\\ClassA\\Lesson1\\file.md");

    // info["program"] == "MBA", info["course"] == "Course1", info["class"] == "ClassA"</code></pre>

    </example>
  example: []
  syntax:
    content: public class MetadataHierarchyDetector
    content.vb: Public Class MetadataHierarchyDetector
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.MetadataHierarchyDetector},NotebookAutomation.Core.Configuration.AppConfig,System.String,System.Boolean,System.String)
  commentId: M:NotebookAutomation.Core.Utils.MetadataHierarchyDetector.#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.MetadataHierarchyDetector},NotebookAutomation.Core.Configuration.AppConfig,System.String,System.Boolean,System.String)
  id: '#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.MetadataHierarchyDetector},NotebookAutomation.Core.Configuration.AppConfig,System.String,System.Boolean,System.String)'
  parent: NotebookAutomation.Core.Utils.MetadataHierarchyDetector
  langs:
  - csharp
  - vb
  name: MetadataHierarchyDetector(ILogger<MetadataHierarchyDetector>, AppConfig, string?, bool, string?)
  nameWithType: MetadataHierarchyDetector.MetadataHierarchyDetector(ILogger<MetadataHierarchyDetector>, AppConfig, string?, bool, string?)
  fullName: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.MetadataHierarchyDetector(Microsoft.Extensions.Logging.ILogger<NotebookAutomation.Core.Utils.MetadataHierarchyDetector>, NotebookAutomation.Core.Configuration.AppConfig, string?, bool, string?)
  type: Constructor
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Utils/MetadataHierarchyDetector.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: .ctor
    path: src/c-sharp/NotebookAutomation.Core/Utils/MetadataHierarchyDetector.cs
    startLine: 51
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Utils
  summary: Detects and infers hierarchical metadata (program, course, class, module) from file paths in a notebook vault.
  remarks: >-
    <p>

    Implements path-based hierarchy detection based on the directory structure.

    Determines the appropriate program, course, class, and module metadata based on a file's location,

    following the conventions used in the notebook vault.

    </p>

    <p> ///. <b>Expected Directory Structure:</b>


    <pre><code class="lang-csharp">Vault Root (main-index) - NO hierarchy metadata

    └── Program Folders (program-index) - program only
        └── Course Folders (course-index) - program + course
            └── Class Folders (class-index) - program + course + class
                ├── Case Study Folders (case-study-index) - program + course + class + module
                └── Module Folders (module-index) - program + course + class + module
                    ├── Live Session Folder (live-session-index) - program + course + class + module
                    └── Lesson Folders (lesson-index) - program + course + class + module
                        └── Content Files (readings, videos, transcripts, etc.)</code></pre>
    </p>

    <p>

    Features:

    - Configurable vault root path (from config or override)

    - Support for explicit program overrides via parameter

    - Dynamic hierarchy detection based on folder structure

    - Dynamic fallback to folder names when index files aren't available

    - Robust path traversal for hierarchy detection.

    </p>

    <example>


    <pre><code class="lang-csharp">var detector = new MetadataHierarchyDetector(logger, appConfig);

    var info = detector.FindHierarchyInfo(@"C:\\notebook-vault\\MBA\\Course1\\ClassA\\Lesson1\\file.md");

    // info["program"] == "MBA", info["course"] == "Course1", info["class"] == "ClassA"</code></pre>

    </example>
  example: []
  syntax:
    content: public MetadataHierarchyDetector(ILogger<MetadataHierarchyDetector> logger, AppConfig appConfig, string? programOverride = null, bool verbose = false, string? vaultRootOverride = null)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.MetadataHierarchyDetector}
    - id: appConfig
      type: NotebookAutomation.Core.Configuration.AppConfig
    - id: programOverride
      type: System.String
    - id: verbose
      type: System.Boolean
    - id: vaultRootOverride
      type: System.String
    content.vb: Public Sub New(logger As ILogger(Of MetadataHierarchyDetector), appConfig As AppConfig, programOverride As String = Nothing, verbose As Boolean = False, vaultRootOverride As String = Nothing)
  overload: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.#ctor*
  nameWithType.vb: MetadataHierarchyDetector.New(ILogger(Of MetadataHierarchyDetector), AppConfig, String, Boolean, String)
  fullName.vb: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.New(Microsoft.Extensions.Logging.ILogger(Of NotebookAutomation.Core.Utils.MetadataHierarchyDetector), NotebookAutomation.Core.Configuration.AppConfig, String, Boolean, String)
  name.vb: New(ILogger(Of MetadataHierarchyDetector), AppConfig, String, Boolean, String)
- uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.VaultRoot
  commentId: P:NotebookAutomation.Core.Utils.MetadataHierarchyDetector.VaultRoot
  id: VaultRoot
  parent: NotebookAutomation.Core.Utils.MetadataHierarchyDetector
  langs:
  - csharp
  - vb
  name: VaultRoot
  nameWithType: MetadataHierarchyDetector.VaultRoot
  fullName: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.VaultRoot
  type: Property
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Utils/MetadataHierarchyDetector.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: VaultRoot
    path: src/c-sharp/NotebookAutomation.Core/Utils/MetadataHierarchyDetector.cs
    startLine: 70
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Utils
  summary: Gets the vault root path being used by this detector.
  example: []
  syntax:
    content: public string VaultRoot { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property VaultRoot As String
  overload: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.VaultRoot*
- uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.FindHierarchyInfo(System.String)
  commentId: M:NotebookAutomation.Core.Utils.MetadataHierarchyDetector.FindHierarchyInfo(System.String)
  id: FindHierarchyInfo(System.String)
  parent: NotebookAutomation.Core.Utils.MetadataHierarchyDetector
  langs:
  - csharp
  - vb
  name: FindHierarchyInfo(string)
  nameWithType: MetadataHierarchyDetector.FindHierarchyInfo(string)
  fullName: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.FindHierarchyInfo(string)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Utils/MetadataHierarchyDetector.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: FindHierarchyInfo
    path: src/c-sharp/NotebookAutomation.Core/Utils/MetadataHierarchyDetector.cs
    startLine: 96
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Utils
  summary: Finds program, course, class, and module information by analyzing the file path structure relative to the vault root.
  remarks: >-
    <p>

    This method uses purely path-based analysis to determine hierarchy levels, with no file system access needed.

    It assumes a standard folder structure where:

    - The first folder level below vault root is the program (e.g., MBA)

    - The second folder level is the course (e.g., Finance)

    - The third folder level is the class (e.g., Accounting)

    - The fourth folder level is the module (e.g., Week1).

    </p>

    <p>

    Priority is given to explicit program overrides if provided in the constructor.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">var info = detector.FindHierarchyInfo(@"C:\\notebook-vault\\MBA\\Finance\\Accounting\\Week1\\file.md");

    // info["program"] == "MBA", info["course"] == "Finance", info["class"] == "Accounting", info["module"] == "Week1"</code></pre>
  syntax:
    content: public Dictionary<string, string> FindHierarchyInfo(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: The path to the file or directory to analyze.
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: A dictionary with keys <code>program</code>, <code>course</code>, <code>class</code>, and possibly <code>module</code> containing the detected hierarchy information.
    content.vb: Public Function FindHierarchyInfo(filePath As String) As Dictionary(Of String, String)
  overload: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.FindHierarchyInfo*
  nameWithType.vb: MetadataHierarchyDetector.FindHierarchyInfo(String)
  fullName.vb: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.FindHierarchyInfo(String)
  name.vb: FindHierarchyInfo(String)
- uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.UpdateMetadataWithHierarchy(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.String)
  commentId: M:NotebookAutomation.Core.Utils.MetadataHierarchyDetector.UpdateMetadataWithHierarchy(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.String)
  id: UpdateMetadataWithHierarchy(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.String)
  parent: NotebookAutomation.Core.Utils.MetadataHierarchyDetector
  langs:
  - csharp
  - vb
  name: UpdateMetadataWithHierarchy(Dictionary<string, object>, Dictionary<string, string>, string?)
  nameWithType: MetadataHierarchyDetector.UpdateMetadataWithHierarchy(Dictionary<string, object>, Dictionary<string, string>, string?)
  fullName: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.UpdateMetadataWithHierarchy(System.Collections.Generic.Dictionary<string, object>, System.Collections.Generic.Dictionary<string, string>, string?)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Utils/MetadataHierarchyDetector.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: UpdateMetadataWithHierarchy
    path: src/c-sharp/NotebookAutomation.Core/Utils/MetadataHierarchyDetector.cs
    startLine: 301
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Utils
  summary: Updates a metadata dictionary with program, course, class, and module information appropriate for a specific hierarchy level.
  remarks: >-
    <p>

    Only updates fields that are missing or empty in the original metadata.

    The method will look for the following keys in the hierarchyInfo dictionary:

    - program: The program name (top level of the hierarchy) - included for all index types

    - course: The course name (second level of the hierarchy) - included for course, class and module index types

    - class: The class name (third level of the hierarchy) - included for class and module index types

    - module: The module name (fourth level of the hierarchy) - included only for module index types.

    </p>

    <p>

    Each level only includes metadata appropriate for its level in the hierarchy.

    For example, a program-level index will only include program metadata, while

    a class-level index will include program, course, and class metadata.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// For a program-level index

    var updated = MetadataHierarchyDetector.UpdateMetadataWithHierarchy(metadata, info, "program-index");

    // Only includes program metadata


    // For a class-level index

    var updated = MetadataHierarchyDetector.UpdateMetadataWithHierarchy(metadata, info, "class-index");

    // Includes program, course, and class metadata</code></pre>
  syntax:
    content: public static Dictionary<string, object> UpdateMetadataWithHierarchy(Dictionary<string, object> metadata, Dictionary<string, string> hierarchyInfo, string? templateType = null)
    parameters:
    - id: metadata
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: The existing metadata dictionary to update (will be mutated).
    - id: hierarchyInfo
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: The hierarchy information to apply (should contain keys for hierarchical levels).
    - id: templateType
      type: System.String
      description: Optional template type to determine which hierarchy levels to include. Defaults to including all detected levels.
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: The updated metadata dictionary with hierarchy fields set if missing or empty.
    content.vb: Public Shared Function UpdateMetadataWithHierarchy(metadata As Dictionary(Of String, Object), hierarchyInfo As Dictionary(Of String, String), templateType As String = Nothing) As Dictionary(Of String, Object)
  overload: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.UpdateMetadataWithHierarchy*
  nameWithType.vb: MetadataHierarchyDetector.UpdateMetadataWithHierarchy(Dictionary(Of String, Object), Dictionary(Of String, String), String)
  fullName.vb: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.UpdateMetadataWithHierarchy(System.Collections.Generic.Dictionary(Of String, Object), System.Collections.Generic.Dictionary(Of String, String), String)
  name.vb: UpdateMetadataWithHierarchy(Dictionary(Of String, Object), Dictionary(Of String, String), String)
references:
- uid: NotebookAutomation.Core.Utils
  commentId: N:NotebookAutomation.Core.Utils
  href: NotebookAutomation.html
  name: NotebookAutomation.Core.Utils
  nameWithType: NotebookAutomation.Core.Utils
  fullName: NotebookAutomation.Core.Utils
  spec.csharp:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Utils
    name: Utils
    href: NotebookAutomation.Core.Utils.html
  spec.vb:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Utils
    name: Utils
    href: NotebookAutomation.Core.Utils.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.#ctor*
  commentId: Overload:NotebookAutomation.Core.Utils.MetadataHierarchyDetector.#ctor
  href: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.html#NotebookAutomation_Core_Utils_MetadataHierarchyDetector__ctor_Microsoft_Extensions_Logging_ILogger_NotebookAutomation_Core_Utils_MetadataHierarchyDetector__NotebookAutomation_Core_Configuration_AppConfig_System_String_System_Boolean_System_String_
  name: MetadataHierarchyDetector
  nameWithType: MetadataHierarchyDetector.MetadataHierarchyDetector
  fullName: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.MetadataHierarchyDetector
  nameWithType.vb: MetadataHierarchyDetector.New
  fullName.vb: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.New
  name.vb: New
- uid: Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.MetadataHierarchyDetector}
  commentId: T:Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Utils.MetadataHierarchyDetector}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<MetadataHierarchyDetector>
  nameWithType: ILogger<MetadataHierarchyDetector>
  fullName: Microsoft.Extensions.Logging.ILogger<NotebookAutomation.Core.Utils.MetadataHierarchyDetector>
  nameWithType.vb: ILogger(Of MetadataHierarchyDetector)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of NotebookAutomation.Core.Utils.MetadataHierarchyDetector)
  name.vb: ILogger(Of MetadataHierarchyDetector)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector
    name: MetadataHierarchyDetector
    href: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.html
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector
    name: MetadataHierarchyDetector
    href: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.html
  - name: )
- uid: NotebookAutomation.Core.Configuration.AppConfig
  commentId: T:NotebookAutomation.Core.Configuration.AppConfig
  parent: NotebookAutomation.Core.Configuration
  href: NotebookAutomation.Core.Configuration.AppConfig.html
  name: AppConfig
  nameWithType: AppConfig
  fullName: NotebookAutomation.Core.Configuration.AppConfig
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - name: TCategoryName
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - name: TCategoryName
  - name: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
- uid: NotebookAutomation.Core.Configuration
  commentId: N:NotebookAutomation.Core.Configuration
  href: NotebookAutomation.html
  name: NotebookAutomation.Core.Configuration
  nameWithType: NotebookAutomation.Core.Configuration
  fullName: NotebookAutomation.Core.Configuration
  spec.csharp:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Configuration
    name: Configuration
    href: NotebookAutomation.Core.Configuration.html
  spec.vb:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Configuration
    name: Configuration
    href: NotebookAutomation.Core.Configuration.html
- uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.VaultRoot*
  commentId: Overload:NotebookAutomation.Core.Utils.MetadataHierarchyDetector.VaultRoot
  href: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.html#NotebookAutomation_Core_Utils_MetadataHierarchyDetector_VaultRoot
  name: VaultRoot
  nameWithType: MetadataHierarchyDetector.VaultRoot
  fullName: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.VaultRoot
- uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.FindHierarchyInfo*
  commentId: Overload:NotebookAutomation.Core.Utils.MetadataHierarchyDetector.FindHierarchyInfo
  href: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.html#NotebookAutomation_Core_Utils_MetadataHierarchyDetector_FindHierarchyInfo_System_String_
  name: FindHierarchyInfo
  nameWithType: MetadataHierarchyDetector.FindHierarchyInfo
  fullName: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.FindHierarchyInfo
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, string>
  nameWithType: Dictionary<string, string>
  fullName: System.Collections.Generic.Dictionary<string, string>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.UpdateMetadataWithHierarchy*
  commentId: Overload:NotebookAutomation.Core.Utils.MetadataHierarchyDetector.UpdateMetadataWithHierarchy
  href: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.html#NotebookAutomation_Core_Utils_MetadataHierarchyDetector_UpdateMetadataWithHierarchy_System_Collections_Generic_Dictionary_System_String_System_Object__System_Collections_Generic_Dictionary_System_String_System_String__System_String_
  name: UpdateMetadataWithHierarchy
  nameWithType: MetadataHierarchyDetector.UpdateMetadataWithHierarchy
  fullName: NotebookAutomation.Core.Utils.MetadataHierarchyDetector.UpdateMetadataWithHierarchy
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, object>
  nameWithType: Dictionary<string, object>
  fullName: System.Collections.Generic.Dictionary<string, object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
