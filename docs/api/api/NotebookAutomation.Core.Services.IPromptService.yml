### YamlMime:ManagedReference
items:
- uid: NotebookAutomation.Core.Services.IPromptService
  commentId: T:NotebookAutomation.Core.Services.IPromptService
  id: IPromptService
  parent: NotebookAutomation.Core.Services
  children:
  - NotebookAutomation.Core.Services.IPromptService.GetPromptAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  - NotebookAutomation.Core.Services.IPromptService.LoadTemplateAsync(System.String)
  - NotebookAutomation.Core.Services.IPromptService.ProcessTemplateAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  - NotebookAutomation.Core.Services.IPromptService.SubstituteVariables(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  langs:
  - csharp
  - vb
  name: IPromptService
  nameWithType: IPromptService
  fullName: NotebookAutomation.Core.Services.IPromptService
  type: Interface
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/IPromptService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: IPromptService
    path: src/c-sharp/NotebookAutomation.Core/Services/IPromptService.cs
    startLine: 36
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Interface for services that manage and process prompt templates.
  remarks: >-
    <p>

    This interface provides methods for loading, processing, and substituting variables in prompt templates.

    Implementations should support:

    <ul><li>Loading templates from a configured directory</li><li>Substituting variables in templates</li><li>Generating prompts with substituted variables</li><li>Asynchronous processing of templates</li></ul>

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">var promptService = serviceProvider.GetService&lt;IPromptService&gt;();

    var template = await promptService.LoadTemplateAsync("welcome_message");

    var prompt = promptService.SubstituteVariables(template, new Dictionary&lt;string, string&gt; { { "name", "John" } });

    Console.WriteLine(prompt);</code></pre>
  syntax:
    content: public interface IPromptService
    content.vb: Public Interface IPromptService
- uid: NotebookAutomation.Core.Services.IPromptService.LoadTemplateAsync(System.String)
  commentId: M:NotebookAutomation.Core.Services.IPromptService.LoadTemplateAsync(System.String)
  id: LoadTemplateAsync(System.String)
  parent: NotebookAutomation.Core.Services.IPromptService
  langs:
  - csharp
  - vb
  name: LoadTemplateAsync(string)
  nameWithType: IPromptService.LoadTemplateAsync(string)
  fullName: NotebookAutomation.Core.Services.IPromptService.LoadTemplateAsync(string)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/IPromptService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: LoadTemplateAsync
    path: src/c-sharp/NotebookAutomation.Core/Services/IPromptService.cs
    startLine: 55
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Loads a template from the configured prompts directory.
  remarks: >-
    <p>

    This method retrieves the content of a template file from the configured prompts directory.

    If the template does not exist, an exception is thrown.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">var template = await promptService.LoadTemplateAsync("welcome_message");

    Console.WriteLine(template);</code></pre>
  syntax:
    content: Task<string> LoadTemplateAsync(string templateName)
    parameters:
    - id: templateName
      type: System.String
      description: Name of the template to load, without file extension.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The template content as a string.
    content.vb: Function LoadTemplateAsync(templateName As String) As Task(Of String)
  overload: NotebookAutomation.Core.Services.IPromptService.LoadTemplateAsync*
  nameWithType.vb: IPromptService.LoadTemplateAsync(String)
  fullName.vb: NotebookAutomation.Core.Services.IPromptService.LoadTemplateAsync(String)
  name.vb: LoadTemplateAsync(String)
- uid: NotebookAutomation.Core.Services.IPromptService.SubstituteVariables(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:NotebookAutomation.Core.Services.IPromptService.SubstituteVariables(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  id: SubstituteVariables(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: NotebookAutomation.Core.Services.IPromptService
  langs:
  - csharp
  - vb
  name: SubstituteVariables(string, Dictionary<string, string>?)
  nameWithType: IPromptService.SubstituteVariables(string, Dictionary<string, string>?)
  fullName: NotebookAutomation.Core.Services.IPromptService.SubstituteVariables(string, System.Collections.Generic.Dictionary<string, string>?)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/IPromptService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: SubstituteVariables
    path: src/c-sharp/NotebookAutomation.Core/Services/IPromptService.cs
    startLine: 76
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Substitutes variables in a template string.
  remarks: >-
    <p>

    This method replaces placeholders in the template string with values from the provided dictionary.

    If a placeholder does not have a corresponding value, it remains unchanged.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">var template = "Hello, {{name}}!";

    var result = promptService.SubstituteVariables(template, new Dictionary&lt;string, string&gt; { { "name", "John" } });

    Console.WriteLine(result); // Outputs: "Hello, John!"</code></pre>
  syntax:
    content: string SubstituteVariables(string template, Dictionary<string, string>? variables)
    parameters:
    - id: template
      type: System.String
      description: Template with placeholders in the format {{variable_name}}.
    - id: variables
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Dictionary of variables to substitute.
    return:
      type: System.String
      description: The template with variables substituted.
    content.vb: Function SubstituteVariables(template As String, variables As Dictionary(Of String, String)) As String
  overload: NotebookAutomation.Core.Services.IPromptService.SubstituteVariables*
  nameWithType.vb: IPromptService.SubstituteVariables(String, Dictionary(Of String, String))
  fullName.vb: NotebookAutomation.Core.Services.IPromptService.SubstituteVariables(String, System.Collections.Generic.Dictionary(Of String, String))
  name.vb: SubstituteVariables(String, Dictionary(Of String, String))
- uid: NotebookAutomation.Core.Services.IPromptService.GetPromptAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:NotebookAutomation.Core.Services.IPromptService.GetPromptAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  id: GetPromptAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: NotebookAutomation.Core.Services.IPromptService
  langs:
  - csharp
  - vb
  name: GetPromptAsync(string, Dictionary<string, string>?)
  nameWithType: IPromptService.GetPromptAsync(string, Dictionary<string, string>?)
  fullName: NotebookAutomation.Core.Services.IPromptService.GetPromptAsync(string, System.Collections.Generic.Dictionary<string, string>?)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/IPromptService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: GetPromptAsync
    path: src/c-sharp/NotebookAutomation.Core/Services/IPromptService.cs
    startLine: 95
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Gets a prompt with variables substituted.
  remarks: >-
    <p>

    This method combines template loading and variable substitution to generate a complete prompt.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">var prompt = await promptService.GetPromptAsync("welcome_message", new Dictionary&lt;string, string&gt; { { "name", "John" } });

    Console.WriteLine(prompt);</code></pre>
  syntax:
    content: Task<string> GetPromptAsync(string templateName, Dictionary<string, string>? variables)
    parameters:
    - id: templateName
      type: System.String
      description: Name of the template to load, without file extension.
    - id: variables
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Dictionary of variables to substitute.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The prompt with variables substituted.
    content.vb: Function GetPromptAsync(templateName As String, variables As Dictionary(Of String, String)) As Task(Of String)
  overload: NotebookAutomation.Core.Services.IPromptService.GetPromptAsync*
  nameWithType.vb: IPromptService.GetPromptAsync(String, Dictionary(Of String, String))
  fullName.vb: NotebookAutomation.Core.Services.IPromptService.GetPromptAsync(String, System.Collections.Generic.Dictionary(Of String, String))
  name.vb: GetPromptAsync(String, Dictionary(Of String, String))
- uid: NotebookAutomation.Core.Services.IPromptService.ProcessTemplateAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:NotebookAutomation.Core.Services.IPromptService.ProcessTemplateAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  id: ProcessTemplateAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: NotebookAutomation.Core.Services.IPromptService
  langs:
  - csharp
  - vb
  name: ProcessTemplateAsync(string, Dictionary<string, string>?)
  nameWithType: IPromptService.ProcessTemplateAsync(string, Dictionary<string, string>?)
  fullName: NotebookAutomation.Core.Services.IPromptService.ProcessTemplateAsync(string, System.Collections.Generic.Dictionary<string, string>?)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/IPromptService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: ProcessTemplateAsync
    path: src/c-sharp/NotebookAutomation.Core/Services/IPromptService.cs
    startLine: 114
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Processes template with variables asynchronously.
  remarks: >-
    <p>

    This method performs variable substitution in the provided template string asynchronously.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">var result = await promptService.ProcessTemplateAsync("Hello, {{name}}!", new Dictionary&lt;string, string&gt; { { "name", "John" } });

    Console.WriteLine(result); // Outputs: "Hello, John!"</code></pre>
  syntax:
    content: Task<string> ProcessTemplateAsync(string template, Dictionary<string, string>? variables)
    parameters:
    - id: template
      type: System.String
      description: The template string with placeholders.
    - id: variables
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Dictionary of variable names and values.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The template with variables substituted.
    content.vb: Function ProcessTemplateAsync(template As String, variables As Dictionary(Of String, String)) As Task(Of String)
  overload: NotebookAutomation.Core.Services.IPromptService.ProcessTemplateAsync*
  nameWithType.vb: IPromptService.ProcessTemplateAsync(String, Dictionary(Of String, String))
  fullName.vb: NotebookAutomation.Core.Services.IPromptService.ProcessTemplateAsync(String, System.Collections.Generic.Dictionary(Of String, String))
  name.vb: ProcessTemplateAsync(String, Dictionary(Of String, String))
references:
- uid: NotebookAutomation.Core.Services
  commentId: N:NotebookAutomation.Core.Services
  href: NotebookAutomation.html
  name: NotebookAutomation.Core.Services
  nameWithType: NotebookAutomation.Core.Services
  fullName: NotebookAutomation.Core.Services
  spec.csharp:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Services
    name: Services
    href: NotebookAutomation.Core.Services.html
  spec.vb:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Services
    name: Services
    href: NotebookAutomation.Core.Services.html
- uid: NotebookAutomation.Core.Services.IPromptService.LoadTemplateAsync*
  commentId: Overload:NotebookAutomation.Core.Services.IPromptService.LoadTemplateAsync
  href: NotebookAutomation.Core.Services.IPromptService.html#NotebookAutomation_Core_Services_IPromptService_LoadTemplateAsync_System_String_
  name: LoadTemplateAsync
  nameWithType: IPromptService.LoadTemplateAsync
  fullName: NotebookAutomation.Core.Services.IPromptService.LoadTemplateAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: NotebookAutomation.Core.Services.IPromptService.SubstituteVariables*
  commentId: Overload:NotebookAutomation.Core.Services.IPromptService.SubstituteVariables
  href: NotebookAutomation.Core.Services.IPromptService.html#NotebookAutomation_Core_Services_IPromptService_SubstituteVariables_System_String_System_Collections_Generic_Dictionary_System_String_System_String__
  name: SubstituteVariables
  nameWithType: IPromptService.SubstituteVariables
  fullName: NotebookAutomation.Core.Services.IPromptService.SubstituteVariables
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, string>
  nameWithType: Dictionary<string, string>
  fullName: System.Collections.Generic.Dictionary<string, string>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NotebookAutomation.Core.Services.IPromptService.GetPromptAsync*
  commentId: Overload:NotebookAutomation.Core.Services.IPromptService.GetPromptAsync
  href: NotebookAutomation.Core.Services.IPromptService.html#NotebookAutomation_Core_Services_IPromptService_GetPromptAsync_System_String_System_Collections_Generic_Dictionary_System_String_System_String__
  name: GetPromptAsync
  nameWithType: IPromptService.GetPromptAsync
  fullName: NotebookAutomation.Core.Services.IPromptService.GetPromptAsync
- uid: NotebookAutomation.Core.Services.IPromptService.ProcessTemplateAsync*
  commentId: Overload:NotebookAutomation.Core.Services.IPromptService.ProcessTemplateAsync
  href: NotebookAutomation.Core.Services.IPromptService.html#NotebookAutomation_Core_Services_IPromptService_ProcessTemplateAsync_System_String_System_Collections_Generic_Dictionary_System_String_System_String__
  name: ProcessTemplateAsync
  nameWithType: IPromptService.ProcessTemplateAsync
  fullName: NotebookAutomation.Core.Services.IPromptService.ProcessTemplateAsync
