### YamlMime:ManagedReference
items:
- uid: NotebookAutomation.Core.Services.ITextChunkingService
  commentId: T:NotebookAutomation.Core.Services.ITextChunkingService
  id: ITextChunkingService
  parent: NotebookAutomation.Core.Services
  children:
  - NotebookAutomation.Core.Services.ITextChunkingService.EstimateTokenCount(System.String)
  - NotebookAutomation.Core.Services.ITextChunkingService.SplitTextIntoChunks(System.String,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: ITextChunkingService
  nameWithType: ITextChunkingService
  fullName: NotebookAutomation.Core.Services.ITextChunkingService
  type: Interface
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/TextChunkingService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: ITextChunkingService
    path: ../src/c-sharp/NotebookAutomation.Core/Services/TextChunkingService.cs
    startLine: 17
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: >-
    Defines the contract for text chunking operations used in AI summarization.

    Provides methods for splitting large texts into manageable chunks with intelligent overlap.
  example: []
  syntax:
    content: public interface ITextChunkingService
    content.vb: Public Interface ITextChunkingService
- uid: NotebookAutomation.Core.Services.ITextChunkingService.SplitTextIntoChunks(System.String,System.Int32,System.Int32)
  commentId: M:NotebookAutomation.Core.Services.ITextChunkingService.SplitTextIntoChunks(System.String,System.Int32,System.Int32)
  id: SplitTextIntoChunks(System.String,System.Int32,System.Int32)
  parent: NotebookAutomation.Core.Services.ITextChunkingService
  langs:
  - csharp
  - vb
  name: SplitTextIntoChunks(string, int, int)
  nameWithType: ITextChunkingService.SplitTextIntoChunks(string, int, int)
  fullName: NotebookAutomation.Core.Services.ITextChunkingService.SplitTextIntoChunks(string, int, int)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/TextChunkingService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: SplitTextIntoChunks
    path: ../src/c-sharp/NotebookAutomation.Core/Services/TextChunkingService.cs
    startLine: 27
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: >-
    Splits text into chunks with overlap for optimal processing.

    Uses character-based chunking with intelligent boundary detection.
  example: []
  syntax:
    content: List<string> SplitTextIntoChunks(string text, int chunkSize, int overlap)
    parameters:
    - id: text
      type: System.String
      description: The text to split.
    - id: chunkSize
      type: System.Int32
      description: Maximum size of each chunk in characters.
    - id: overlap
      type: System.Int32
      description: Number of characters to overlap between chunks.
    return:
      type: System.Collections.Generic.List{System.String}
      description: List of text chunks.
    content.vb: Function SplitTextIntoChunks(text As String, chunkSize As Integer, overlap As Integer) As List(Of String)
  overload: NotebookAutomation.Core.Services.ITextChunkingService.SplitTextIntoChunks*
  nameWithType.vb: ITextChunkingService.SplitTextIntoChunks(String, Integer, Integer)
  fullName.vb: NotebookAutomation.Core.Services.ITextChunkingService.SplitTextIntoChunks(String, Integer, Integer)
  name.vb: SplitTextIntoChunks(String, Integer, Integer)
- uid: NotebookAutomation.Core.Services.ITextChunkingService.EstimateTokenCount(System.String)
  commentId: M:NotebookAutomation.Core.Services.ITextChunkingService.EstimateTokenCount(System.String)
  id: EstimateTokenCount(System.String)
  parent: NotebookAutomation.Core.Services.ITextChunkingService
  langs:
  - csharp
  - vb
  name: EstimateTokenCount(string)
  nameWithType: ITextChunkingService.EstimateTokenCount(string)
  fullName: NotebookAutomation.Core.Services.ITextChunkingService.EstimateTokenCount(string)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/TextChunkingService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: EstimateTokenCount
    path: ../src/c-sharp/NotebookAutomation.Core/Services/TextChunkingService.cs
    startLine: 35
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: >-
    Estimates the token count for the given text using a character-based heuristic.

    Uses approximately 4 characters per token as a rough estimate for English text.
  example: []
  syntax:
    content: int EstimateTokenCount(string text)
    parameters:
    - id: text
      type: System.String
      description: The text to estimate tokens for.
    return:
      type: System.Int32
      description: The estimated token count based on character length.
    content.vb: Function EstimateTokenCount(text As String) As Integer
  overload: NotebookAutomation.Core.Services.ITextChunkingService.EstimateTokenCount*
  nameWithType.vb: ITextChunkingService.EstimateTokenCount(String)
  fullName.vb: NotebookAutomation.Core.Services.ITextChunkingService.EstimateTokenCount(String)
  name.vb: EstimateTokenCount(String)
references:
- uid: NotebookAutomation.Core.Services
  commentId: N:NotebookAutomation.Core.Services
  href: NotebookAutomation.html
  name: NotebookAutomation.Core.Services
  nameWithType: NotebookAutomation.Core.Services
  fullName: NotebookAutomation.Core.Services
  spec.csharp:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Services
    name: Services
    href: NotebookAutomation.Core.Services.html
  spec.vb:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Services
    name: Services
    href: NotebookAutomation.Core.Services.html
- uid: NotebookAutomation.Core.Services.ITextChunkingService.SplitTextIntoChunks*
  commentId: Overload:NotebookAutomation.Core.Services.ITextChunkingService.SplitTextIntoChunks
  href: NotebookAutomation.Core.Services.ITextChunkingService.html#NotebookAutomation_Core_Services_ITextChunkingService_SplitTextIntoChunks_System_String_System_Int32_System_Int32_
  name: SplitTextIntoChunks
  nameWithType: ITextChunkingService.SplitTextIntoChunks
  fullName: NotebookAutomation.Core.Services.ITextChunkingService.SplitTextIntoChunks
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NotebookAutomation.Core.Services.ITextChunkingService.EstimateTokenCount*
  commentId: Overload:NotebookAutomation.Core.Services.ITextChunkingService.EstimateTokenCount
  href: NotebookAutomation.Core.Services.ITextChunkingService.html#NotebookAutomation_Core_Services_ITextChunkingService_EstimateTokenCount_System_String_
  name: EstimateTokenCount
  nameWithType: ITextChunkingService.EstimateTokenCount
  fullName: NotebookAutomation.Core.Services.ITextChunkingService.EstimateTokenCount
