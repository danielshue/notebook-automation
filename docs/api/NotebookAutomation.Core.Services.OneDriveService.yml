### YamlMime:ManagedReference
items:
- uid: NotebookAutomation.Core.Services.OneDriveService
  commentId: T:NotebookAutomation.Core.Services.OneDriveService
  id: OneDriveService
  parent: NotebookAutomation.Core.Services
  children:
  - NotebookAutomation.Core.Services.OneDriveService.#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Services.OneDriveService},System.String,System.String,System.String[],Microsoft.Identity.Client.IPublicClientApplication)
  - NotebookAutomation.Core.Services.OneDriveService.AuthenticateAsync
  - NotebookAutomation.Core.Services.OneDriveService.ConfigureVaultRoots(System.String,System.String)
  - NotebookAutomation.Core.Services.OneDriveService.CreateShareLinkAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.DownloadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.GetFileByIdAsync(System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.GetFileByPathAsync(System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.GetItemByIdAsync(System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.GetShareLinkAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.ListDrivesAsync(System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.ListFilesAsync(System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.ListFilesRecursiveAsync(System.String,System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.ListFilesWithMetadataAsync(System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.ListRootItemsAsync(System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.MapLocalToOneDrivePath(System.String)
  - NotebookAutomation.Core.Services.OneDriveService.MapOneDriveToLocalPath(System.String)
  - NotebookAutomation.Core.Services.OneDriveService.RefreshAuthenticationAsync
  - NotebookAutomation.Core.Services.OneDriveService.SearchAsync(System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.SearchFilesAsync(System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.SetCliOptions(NotebookAutomation.Core.Services.OneDriveCliOptions)
  - NotebookAutomation.Core.Services.OneDriveService.SetForceRefresh(System.Boolean)
  - NotebookAutomation.Core.Services.OneDriveService.TryAlternativePathFormatsAsync(System.String,System.Threading.CancellationToken)
  - NotebookAutomation.Core.Services.OneDriveService.UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: OneDriveService
  nameWithType: OneDriveService
  fullName: NotebookAutomation.Core.Services.OneDriveService
  type: Class
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: OneDriveService
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 24
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Provides methods for authenticating and accessing OneDrive files/folders.
  example: []
  syntax:
    content: 'public class OneDriveService : IOneDriveService'
    content.vb: Public Class OneDriveService Implements IOneDriveService
  inheritance:
  - System.Object
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NotebookAutomation.Core.Services.OneDriveService.#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Services.OneDriveService},System.String,System.String,System.String[],Microsoft.Identity.Client.IPublicClientApplication)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Services.OneDriveService},System.String,System.String,System.String[],Microsoft.Identity.Client.IPublicClientApplication)
  id: '#ctor(Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Services.OneDriveService},System.String,System.String,System.String[],Microsoft.Identity.Client.IPublicClientApplication)'
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: OneDriveService(ILogger<OneDriveService>, string, string, string[], IPublicClientApplication?)
  nameWithType: OneDriveService.OneDriveService(ILogger<OneDriveService>, string, string, string[], IPublicClientApplication?)
  fullName: NotebookAutomation.Core.Services.OneDriveService.OneDriveService(Microsoft.Extensions.Logging.ILogger<NotebookAutomation.Core.Services.OneDriveService>, string, string, string[], Microsoft.Identity.Client.IPublicClientApplication?)
  type: Constructor
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: .ctor
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 40
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  syntax:
    content: public OneDriveService(ILogger<OneDriveService> logger, string clientId, string tenantId, string[] scopes, IPublicClientApplication? msalApp = null)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Services.OneDriveService}
    - id: clientId
      type: System.String
    - id: tenantId
      type: System.String
    - id: scopes
      type: System.String[]
    - id: msalApp
      type: Microsoft.Identity.Client.IPublicClientApplication
    content.vb: Public Sub New(logger As ILogger(Of OneDriveService), clientId As String, tenantId As String, scopes As String(), msalApp As IPublicClientApplication = Nothing)
  overload: NotebookAutomation.Core.Services.OneDriveService.#ctor*
  nameWithType.vb: OneDriveService.New(ILogger(Of OneDriveService), String, String, String(), IPublicClientApplication)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.New(Microsoft.Extensions.Logging.ILogger(Of NotebookAutomation.Core.Services.OneDriveService), String, String, String(), Microsoft.Identity.Client.IPublicClientApplication)
  name.vb: New(ILogger(Of OneDriveService), String, String, String(), IPublicClientApplication)
- uid: NotebookAutomation.Core.Services.OneDriveService.AuthenticateAsync
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.AuthenticateAsync
  id: AuthenticateAsync
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: AuthenticateAsync()
  nameWithType: OneDriveService.AuthenticateAsync()
  fullName: NotebookAutomation.Core.Services.OneDriveService.AuthenticateAsync()
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: AuthenticateAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 73
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: >-
    Authenticates with Microsoft Graph API using token caching for persistent authentication.

    Uses the same approach as the Python implementation for consistent behavior.
  example: []
  syntax:
    content: public Task AuthenticateAsync()
    return:
      type: System.Threading.Tasks.Task
      description: Task representing the authentication process.
    content.vb: Public Function AuthenticateAsync() As Task
  overload: NotebookAutomation.Core.Services.OneDriveService.AuthenticateAsync*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.AuthenticateAsync
- uid: NotebookAutomation.Core.Services.OneDriveService.SetForceRefresh(System.Boolean)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.SetForceRefresh(System.Boolean)
  id: SetForceRefresh(System.Boolean)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: SetForceRefresh(bool)
  nameWithType: OneDriveService.SetForceRefresh(bool)
  fullName: NotebookAutomation.Core.Services.OneDriveService.SetForceRefresh(bool)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: SetForceRefresh
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 230
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Sets whether to force refresh authentication tokens ignoring cache.
  example: []
  syntax:
    content: public void SetForceRefresh(bool forceRefresh)
    parameters:
    - id: forceRefresh
      type: System.Boolean
      description: If true, will force refresh authentication tokens ignoring cache.
    content.vb: Public Sub SetForceRefresh(forceRefresh As Boolean)
  overload: NotebookAutomation.Core.Services.OneDriveService.SetForceRefresh*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.SetForceRefresh(System.Boolean)
  nameWithType.vb: OneDriveService.SetForceRefresh(Boolean)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.SetForceRefresh(Boolean)
  name.vb: SetForceRefresh(Boolean)
- uid: NotebookAutomation.Core.Services.OneDriveService.RefreshAuthenticationAsync
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.RefreshAuthenticationAsync
  id: RefreshAuthenticationAsync
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: RefreshAuthenticationAsync()
  nameWithType: OneDriveService.RefreshAuthenticationAsync()
  fullName: NotebookAutomation.Core.Services.OneDriveService.RefreshAuthenticationAsync()
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: RefreshAuthenticationAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 240
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Forces a refresh of the authentication tokens by clearing cache and re-authenticating.
  example: []
  syntax:
    content: public Task RefreshAuthenticationAsync()
    return:
      type: System.Threading.Tasks.Task
      description: Task representing the async refresh operation.
    content.vb: Public Function RefreshAuthenticationAsync() As Task
  overload: NotebookAutomation.Core.Services.OneDriveService.RefreshAuthenticationAsync*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.RefreshAuthenticationAsync
- uid: NotebookAutomation.Core.Services.OneDriveService.DownloadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.DownloadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  id: DownloadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: DownloadFileAsync(string, string, CancellationToken)
  nameWithType: OneDriveService.DownloadFileAsync(string, string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.DownloadFileAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: DownloadFileAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 293
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Downloads a file from OneDrive to a local path.
  example: []
  syntax:
    content: public Task DownloadFileAsync(string oneDrivePath, string localPath, CancellationToken cancellationToken = default)
    parameters:
    - id: oneDrivePath
      type: System.String
      description: The OneDrive file path.
    - id: localPath
      type: System.String
      description: The local destination path.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function DownloadFileAsync(oneDrivePath As String, localPath As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: NotebookAutomation.Core.Services.OneDriveService.DownloadFileAsync*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.DownloadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: OneDriveService.DownloadFileAsync(String, String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.DownloadFileAsync(String, String, System.Threading.CancellationToken)
  name.vb: DownloadFileAsync(String, String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.ListFilesAsync(System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.ListFilesAsync(System.String,System.Threading.CancellationToken)
  id: ListFilesAsync(System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: ListFilesAsync(string, CancellationToken)
  nameWithType: OneDriveService.ListFilesAsync(string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.ListFilesAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: ListFilesAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 339
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Lists files in a OneDrive folder.
  example: []
  syntax:
    content: public Task<List<string>> ListFilesAsync(string oneDriveFolder, CancellationToken cancellationToken = default)
    parameters:
    - id: oneDriveFolder
      type: System.String
      description: The OneDrive folder path.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
      description: List of file names.
    content.vb: Public Function ListFilesAsync(oneDriveFolder As String, cancellationToken As CancellationToken = Nothing) As Task(Of List(Of String))
  overload: NotebookAutomation.Core.Services.OneDriveService.ListFilesAsync*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.ListFilesAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: OneDriveService.ListFilesAsync(String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.ListFilesAsync(String, System.Threading.CancellationToken)
  name.vb: ListFilesAsync(String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  id: UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: UploadFileAsync(string, string, CancellationToken)
  nameWithType: OneDriveService.UploadFileAsync(string, string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.UploadFileAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: UploadFileAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 391
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Uploads a local file to OneDrive at the specified path.
  example: []
  syntax:
    content: public Task UploadFileAsync(string localPath, string oneDrivePath, CancellationToken cancellationToken = default)
    parameters:
    - id: localPath
      type: System.String
      description: The local file path.
    - id: oneDrivePath
      type: System.String
      description: The OneDrive destination path (including filename).
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function UploadFileAsync(localPath As String, oneDrivePath As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: NotebookAutomation.Core.Services.OneDriveService.UploadFileAsync*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: OneDriveService.UploadFileAsync(String, String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.UploadFileAsync(String, String, System.Threading.CancellationToken)
  name.vb: UploadFileAsync(String, String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.CreateShareLinkAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.CreateShareLinkAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: CreateShareLinkAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: CreateShareLinkAsync(string, string, string, CancellationToken)
  nameWithType: OneDriveService.CreateShareLinkAsync(string, string, string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.CreateShareLinkAsync(string, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: CreateShareLinkAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 431
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Creates a shareable link for a file in OneDrive.
  example: []
  syntax:
    content: public Task<string?> CreateShareLinkAsync(string filePath, string linkType = "view", string scope = "anonymous", CancellationToken cancellationToken = default)
    parameters:
    - id: filePath
      type: System.String
      description: The local file path or OneDrive file path. If it's a local path, it will be converted to a OneDrive-relative path.
    - id: linkType
      type: System.String
      description: The type of sharing link to create. Default is "view".
    - id: scope
      type: System.String
      description: The scope of the sharing link. Default is "anonymous".
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The shareable link URL if successful, null otherwise.
    content.vb: Public Function CreateShareLinkAsync(filePath As String, linkType As String = "view", scope As String = "anonymous", cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: NotebookAutomation.Core.Services.OneDriveService.CreateShareLinkAsync*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.CreateShareLinkAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: OneDriveService.CreateShareLinkAsync(String, String, String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.CreateShareLinkAsync(String, String, String, System.Threading.CancellationToken)
  name.vb: CreateShareLinkAsync(String, String, String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.SearchFilesAsync(System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.SearchFilesAsync(System.String,System.Threading.CancellationToken)
  id: SearchFilesAsync(System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: SearchFilesAsync(string, CancellationToken)
  nameWithType: OneDriveService.SearchFilesAsync(string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.SearchFilesAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: SearchFilesAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 529
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Searches for files or folders in OneDrive by name or pattern.
  example: []
  syntax:
    content: public Task<List<Dictionary<string, object>>> SearchFilesAsync(string query, CancellationToken cancellationToken = default)
    parameters:
    - id: query
      type: System.String
      description: The search query string.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}}}
      description: List of file/folder metadata matching the query.
    content.vb: Public Function SearchFilesAsync(query As String, cancellationToken As CancellationToken = Nothing) As Task(Of List(Of Dictionary(Of String, Object)))
  overload: NotebookAutomation.Core.Services.OneDriveService.SearchFilesAsync*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.SearchFilesAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: OneDriveService.SearchFilesAsync(String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.SearchFilesAsync(String, System.Threading.CancellationToken)
  name.vb: SearchFilesAsync(String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.GetFileByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.GetFileByIdAsync(System.String,System.Threading.CancellationToken)
  id: GetFileByIdAsync(System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: GetFileByIdAsync(string, CancellationToken)
  nameWithType: OneDriveService.GetFileByIdAsync(string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.GetFileByIdAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: GetFileByIdAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 585
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Gets file or folder metadata by OneDrive item ID.
  example: []
  syntax:
    content: public Task<Dictionary<string, object>?> GetFileByIdAsync(string itemId, CancellationToken cancellationToken = default)
    parameters:
    - id: itemId
      type: System.String
      description: The OneDrive item ID.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.Object}}
      description: Dictionary of file/folder metadata, or null if not found.
    content.vb: Public Function GetFileByIdAsync(itemId As String, cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of String, Object))
  overload: NotebookAutomation.Core.Services.OneDriveService.GetFileByIdAsync*
  nameWithType.vb: OneDriveService.GetFileByIdAsync(String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.GetFileByIdAsync(String, System.Threading.CancellationToken)
  name.vb: GetFileByIdAsync(String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.SearchAsync(System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.SearchAsync(System.String,System.Threading.CancellationToken)
  id: SearchAsync(System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: SearchAsync(string, CancellationToken)
  nameWithType: OneDriveService.SearchAsync(string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.SearchAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: SearchAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 632
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Searches for files and folders in OneDrive by name or pattern.
  example: []
  syntax:
    content: public Task<List<string>> SearchAsync(string searchPattern, CancellationToken cancellationToken = default)
    parameters:
    - id: searchPattern
      type: System.String
      description: The search pattern (e.g., file name or wildcard pattern).
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
      description: List of matching file/folder names.
    content.vb: Public Function SearchAsync(searchPattern As String, cancellationToken As CancellationToken = Nothing) As Task(Of List(Of String))
  overload: NotebookAutomation.Core.Services.OneDriveService.SearchAsync*
  nameWithType.vb: OneDriveService.SearchAsync(String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.SearchAsync(String, System.Threading.CancellationToken)
  name.vb: SearchAsync(String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.GetItemByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.GetItemByIdAsync(System.String,System.Threading.CancellationToken)
  id: GetItemByIdAsync(System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: GetItemByIdAsync(string, CancellationToken)
  nameWithType: OneDriveService.GetItemByIdAsync(string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.GetItemByIdAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: GetItemByIdAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 684
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Gets a file or folder by its OneDrive item ID.
  example: []
  syntax:
    content: public Task<string?> GetItemByIdAsync(string itemId, CancellationToken cancellationToken = default)
    parameters:
    - id: itemId
      type: System.String
      description: The OneDrive item ID.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The file or folder name, or null if not found.
    content.vb: Public Function GetItemByIdAsync(itemId As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: NotebookAutomation.Core.Services.OneDriveService.GetItemByIdAsync*
  nameWithType.vb: OneDriveService.GetItemByIdAsync(String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.GetItemByIdAsync(String, System.Threading.CancellationToken)
  name.vb: GetItemByIdAsync(String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.ListDrivesAsync(System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.ListDrivesAsync(System.Threading.CancellationToken)
  id: ListDrivesAsync(System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: ListDrivesAsync(CancellationToken)
  nameWithType: OneDriveService.ListDrivesAsync(CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.ListDrivesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: ListDrivesAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 732
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Lists all available OneDrive drives for the authenticated user.
  example: []
  syntax:
    content: public Task<List<Dictionary<string, object>>> ListDrivesAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}}}
      description: List of drive metadata dictionaries.
    content.vb: Public Function ListDrivesAsync(cancellationToken As CancellationToken = Nothing) As Task(Of List(Of Dictionary(Of String, Object)))
  overload: NotebookAutomation.Core.Services.OneDriveService.ListDrivesAsync*
- uid: NotebookAutomation.Core.Services.OneDriveService.ListRootItemsAsync(System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.ListRootItemsAsync(System.Threading.CancellationToken)
  id: ListRootItemsAsync(System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: ListRootItemsAsync(CancellationToken)
  nameWithType: OneDriveService.ListRootItemsAsync(CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.ListRootItemsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: ListRootItemsAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 786
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Lists items in the root folder of the default OneDrive.
  example: []
  syntax:
    content: public Task<List<Dictionary<string, object>>> ListRootItemsAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}}}
      description: List of file/folder metadata dictionaries in the root folder.
    content.vb: Public Function ListRootItemsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of List(Of Dictionary(Of String, Object)))
  overload: NotebookAutomation.Core.Services.OneDriveService.ListRootItemsAsync*
- uid: NotebookAutomation.Core.Services.OneDriveService.ListFilesRecursiveAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.ListFilesRecursiveAsync(System.String,System.String,System.Threading.CancellationToken)
  id: ListFilesRecursiveAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: ListFilesRecursiveAsync(string, string?, CancellationToken)
  nameWithType: OneDriveService.ListFilesRecursiveAsync(string, string?, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.ListFilesRecursiveAsync(string, string?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: ListFilesRecursiveAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 842
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Recursively lists all files and folders under a given OneDrive folder path, with optional filtering.
  example: []
  syntax:
    content: public Task<List<Dictionary<string, object>>> ListFilesRecursiveAsync(string oneDriveFolder, string? fileExtensionFilter = null, CancellationToken cancellationToken = default)
    parameters:
    - id: oneDriveFolder
      type: System.String
      description: The OneDrive folder path to start from.
    - id: fileExtensionFilter
      type: System.String
      description: Optional file extension filter (e.g., ".pdf").
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}}}
      description: List of file/folder metadata dictionaries.
    content.vb: Public Function ListFilesRecursiveAsync(oneDriveFolder As String, fileExtensionFilter As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of List(Of Dictionary(Of String, Object)))
  overload: NotebookAutomation.Core.Services.OneDriveService.ListFilesRecursiveAsync*
  nameWithType.vb: OneDriveService.ListFilesRecursiveAsync(String, String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.ListFilesRecursiveAsync(String, String, System.Threading.CancellationToken)
  name.vb: ListFilesRecursiveAsync(String, String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.ListFilesWithMetadataAsync(System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.ListFilesWithMetadataAsync(System.String,System.Threading.CancellationToken)
  id: ListFilesWithMetadataAsync(System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: ListFilesWithMetadataAsync(string, CancellationToken)
  nameWithType: OneDriveService.ListFilesWithMetadataAsync(string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.ListFilesWithMetadataAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: ListFilesWithMetadataAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 875
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Lists files in a OneDrive folder, returning full metadata for each item.
  example: []
  syntax:
    content: public Task<List<Dictionary<string, object>>> ListFilesWithMetadataAsync(string oneDriveFolder, CancellationToken cancellationToken = default)
    parameters:
    - id: oneDriveFolder
      type: System.String
      description: The OneDrive folder path.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}}}
      description: List of file/folder metadata dictionaries.
    content.vb: Public Function ListFilesWithMetadataAsync(oneDriveFolder As String, cancellationToken As CancellationToken = Nothing) As Task(Of List(Of Dictionary(Of String, Object)))
  overload: NotebookAutomation.Core.Services.OneDriveService.ListFilesWithMetadataAsync*
  nameWithType.vb: OneDriveService.ListFilesWithMetadataAsync(String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.ListFilesWithMetadataAsync(String, System.Threading.CancellationToken)
  name.vb: ListFilesWithMetadataAsync(String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.TryAlternativePathFormatsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.TryAlternativePathFormatsAsync(System.String,System.Threading.CancellationToken)
  id: TryAlternativePathFormatsAsync(System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: TryAlternativePathFormatsAsync(string, CancellationToken)
  nameWithType: OneDriveService.TryAlternativePathFormatsAsync(string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.TryAlternativePathFormatsAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: TryAlternativePathFormatsAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 932
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: >-
    Attempts to resolve a OneDrive path using alternative formats if the initial request fails.

    If not found, suggests similar files/folders in the parent directory.
  example: []
  syntax:
    content: public Task<string?> TryAlternativePathFormatsAsync(string oneDrivePath, CancellationToken cancellationToken = default)
    parameters:
    - id: oneDrivePath
      type: System.String
      description: The original OneDrive path.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Resolved path or null if not found. Logs suggestions if not found.
    content.vb: Public Function TryAlternativePathFormatsAsync(oneDrivePath As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: NotebookAutomation.Core.Services.OneDriveService.TryAlternativePathFormatsAsync*
  nameWithType.vb: OneDriveService.TryAlternativePathFormatsAsync(String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.TryAlternativePathFormatsAsync(String, System.Threading.CancellationToken)
  name.vb: TryAlternativePathFormatsAsync(String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.GetFileByPathAsync(System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.GetFileByPathAsync(System.String,System.Threading.CancellationToken)
  id: GetFileByPathAsync(System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: GetFileByPathAsync(string, CancellationToken)
  nameWithType: OneDriveService.GetFileByPathAsync(string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.GetFileByPathAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: GetFileByPathAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 1042
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Gets file or folder metadata by OneDrive path.
  example: []
  syntax:
    content: public Task<Dictionary<string, object>?> GetFileByPathAsync(string oneDrivePath, CancellationToken cancellationToken = default)
    parameters:
    - id: oneDrivePath
      type: System.String
      description: The OneDrive file or folder path.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.Object}}
      description: Dictionary of metadata, or null if not found.
    content.vb: Public Function GetFileByPathAsync(oneDrivePath As String, cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of String, Object))
  overload: NotebookAutomation.Core.Services.OneDriveService.GetFileByPathAsync*
  nameWithType.vb: OneDriveService.GetFileByPathAsync(String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.GetFileByPathAsync(String, System.Threading.CancellationToken)
  name.vb: GetFileByPathAsync(String, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.ConfigureVaultRoots(System.String,System.String)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.ConfigureVaultRoots(System.String,System.String)
  id: ConfigureVaultRoots(System.String,System.String)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: ConfigureVaultRoots(string, string)
  nameWithType: OneDriveService.ConfigureVaultRoots(string, string)
  fullName: NotebookAutomation.Core.Services.OneDriveService.ConfigureVaultRoots(string, string)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: ConfigureVaultRoots
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 1091
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Configures the root directories for local and OneDrive vaults for path mapping.
  example: []
  syntax:
    content: public void ConfigureVaultRoots(string localVaultRoot, string oneDriveVaultRoot)
    parameters:
    - id: localVaultRoot
      type: System.String
      description: The root directory of the local vault.
    - id: oneDriveVaultRoot
      type: System.String
      description: The root directory of the OneDrive vault (relative to OneDrive root).
    content.vb: Public Sub ConfigureVaultRoots(localVaultRoot As String, oneDriveVaultRoot As String)
  overload: NotebookAutomation.Core.Services.OneDriveService.ConfigureVaultRoots*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.ConfigureVaultRoots(System.String,System.String)
  nameWithType.vb: OneDriveService.ConfigureVaultRoots(String, String)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.ConfigureVaultRoots(String, String)
  name.vb: ConfigureVaultRoots(String, String)
- uid: NotebookAutomation.Core.Services.OneDriveService.MapLocalToOneDrivePath(System.String)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.MapLocalToOneDrivePath(System.String)
  id: MapLocalToOneDrivePath(System.String)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: MapLocalToOneDrivePath(string)
  nameWithType: OneDriveService.MapLocalToOneDrivePath(string)
  fullName: NotebookAutomation.Core.Services.OneDriveService.MapLocalToOneDrivePath(string)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: MapLocalToOneDrivePath
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 1102
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Maps a local path to a OneDrive path, preserving structure.
  example: []
  syntax:
    content: public string MapLocalToOneDrivePath(string localPath)
    parameters:
    - id: localPath
      type: System.String
      description: The local file or folder path.
    return:
      type: System.String
      description: Corresponding OneDrive path.
    content.vb: Public Function MapLocalToOneDrivePath(localPath As String) As String
  overload: NotebookAutomation.Core.Services.OneDriveService.MapLocalToOneDrivePath*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.MapLocalToOneDrivePath(System.String)
  nameWithType.vb: OneDriveService.MapLocalToOneDrivePath(String)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.MapLocalToOneDrivePath(String)
  name.vb: MapLocalToOneDrivePath(String)
- uid: NotebookAutomation.Core.Services.OneDriveService.MapOneDriveToLocalPath(System.String)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.MapOneDriveToLocalPath(System.String)
  id: MapOneDriveToLocalPath(System.String)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: MapOneDriveToLocalPath(string)
  nameWithType: OneDriveService.MapOneDriveToLocalPath(string)
  fullName: NotebookAutomation.Core.Services.OneDriveService.MapOneDriveToLocalPath(string)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: MapOneDriveToLocalPath
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 1126
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Maps a OneDrive path to a local path, preserving structure.
  example: []
  syntax:
    content: public string MapOneDriveToLocalPath(string oneDrivePath)
    parameters:
    - id: oneDrivePath
      type: System.String
      description: The OneDrive file or folder path.
    return:
      type: System.String
      description: Corresponding local path.
    content.vb: Public Function MapOneDriveToLocalPath(oneDrivePath As String) As String
  overload: NotebookAutomation.Core.Services.OneDriveService.MapOneDriveToLocalPath*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.MapOneDriveToLocalPath(System.String)
  nameWithType.vb: OneDriveService.MapOneDriveToLocalPath(String)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.MapOneDriveToLocalPath(String)
  name.vb: MapOneDriveToLocalPath(String)
- uid: NotebookAutomation.Core.Services.OneDriveService.GetShareLinkAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.GetShareLinkAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  id: GetShareLinkAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: GetShareLinkAsync(string, bool, CancellationToken)
  nameWithType: OneDriveService.GetShareLinkAsync(string, bool, CancellationToken)
  fullName: NotebookAutomation.Core.Services.OneDriveService.GetShareLinkAsync(string, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: GetShareLinkAsync
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 1151
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Gets a share link for a file in OneDrive.
  example: []
  syntax:
    content: public Task<string> GetShareLinkAsync(string filePath, bool forceRefresh, CancellationToken cancellationToken)
    parameters:
    - id: filePath
      type: System.String
      description: The path of the file to get a share link for.
    - id: forceRefresh
      type: System.Boolean
      description: Whether to force refresh the share link.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Optional cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The share link information as a JSON string.
    content.vb: Public Function GetShareLinkAsync(filePath As String, forceRefresh As Boolean, cancellationToken As CancellationToken) As Task(Of String)
  overload: NotebookAutomation.Core.Services.OneDriveService.GetShareLinkAsync*
  implements:
  - NotebookAutomation.Core.Services.IOneDriveService.GetShareLinkAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: OneDriveService.GetShareLinkAsync(String, Boolean, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.GetShareLinkAsync(String, Boolean, System.Threading.CancellationToken)
  name.vb: GetShareLinkAsync(String, Boolean, CancellationToken)
- uid: NotebookAutomation.Core.Services.OneDriveService.SetCliOptions(NotebookAutomation.Core.Services.OneDriveCliOptions)
  commentId: M:NotebookAutomation.Core.Services.OneDriveService.SetCliOptions(NotebookAutomation.Core.Services.OneDriveCliOptions)
  id: SetCliOptions(NotebookAutomation.Core.Services.OneDriveCliOptions)
  parent: NotebookAutomation.Core.Services.OneDriveService
  langs:
  - csharp
  - vb
  name: SetCliOptions(OneDriveCliOptions)
  nameWithType: OneDriveService.SetCliOptions(OneDriveCliOptions)
  fullName: NotebookAutomation.Core.Services.OneDriveService.SetCliOptions(NotebookAutomation.Core.Services.OneDriveCliOptions)
  type: Method
  source:
    remote:
      path: src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
      branch: master
      repo: https://github.com/danielshue/notebook-automation.git
    id: SetCliOptions
    path: ../src/c-sharp/NotebookAutomation.Core/Services/OneDriveService.cs
    startLine: 1176
  assemblies:
  - NotebookAutomation.Core
  namespace: NotebookAutomation.Core.Services
  summary: Sets CLI options for dry-run, retry, force, and verbose/debug output.
  example: []
  syntax:
    content: public void SetCliOptions(OneDriveCliOptions options)
    parameters:
    - id: options
      type: NotebookAutomation.Core.Services.OneDriveCliOptions
    content.vb: Public Sub SetCliOptions(options As OneDriveCliOptions)
  overload: NotebookAutomation.Core.Services.OneDriveService.SetCliOptions*
references:
- uid: NotebookAutomation.Core.Services
  commentId: N:NotebookAutomation.Core.Services
  href: NotebookAutomation.html
  name: NotebookAutomation.Core.Services
  nameWithType: NotebookAutomation.Core.Services
  fullName: NotebookAutomation.Core.Services
  spec.csharp:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Services
    name: Services
    href: NotebookAutomation.Core.Services.html
  spec.vb:
  - uid: NotebookAutomation
    name: NotebookAutomation
    href: NotebookAutomation.html
  - name: .
  - uid: NotebookAutomation.Core
    name: Core
    href: NotebookAutomation.Core.html
  - name: .
  - uid: NotebookAutomation.Core.Services
    name: Services
    href: NotebookAutomation.Core.Services.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NotebookAutomation.Core.Services.IOneDriveService
  commentId: T:NotebookAutomation.Core.Services.IOneDriveService
  parent: NotebookAutomation.Core.Services
  href: NotebookAutomation.Core.Services.IOneDriveService.html
  name: IOneDriveService
  nameWithType: IOneDriveService
  fullName: NotebookAutomation.Core.Services.IOneDriveService
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NotebookAutomation.Core.Services.OneDriveService.#ctor*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.#ctor
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService__ctor_Microsoft_Extensions_Logging_ILogger_NotebookAutomation_Core_Services_OneDriveService__System_String_System_String_System_String___Microsoft_Identity_Client_IPublicClientApplication_
  name: OneDriveService
  nameWithType: OneDriveService.OneDriveService
  fullName: NotebookAutomation.Core.Services.OneDriveService.OneDriveService
  nameWithType.vb: OneDriveService.New
  fullName.vb: NotebookAutomation.Core.Services.OneDriveService.New
  name.vb: New
- uid: Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Services.OneDriveService}
  commentId: T:Microsoft.Extensions.Logging.ILogger{NotebookAutomation.Core.Services.OneDriveService}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<OneDriveService>
  nameWithType: ILogger<OneDriveService>
  fullName: Microsoft.Extensions.Logging.ILogger<NotebookAutomation.Core.Services.OneDriveService>
  nameWithType.vb: ILogger(Of OneDriveService)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of NotebookAutomation.Core.Services.OneDriveService)
  name.vb: ILogger(Of OneDriveService)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - uid: NotebookAutomation.Core.Services.OneDriveService
    name: OneDriveService
    href: NotebookAutomation.Core.Services.OneDriveService.html
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - uid: NotebookAutomation.Core.Services.OneDriveService
    name: OneDriveService
    href: NotebookAutomation.Core.Services.OneDriveService.html
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Microsoft.Identity.Client.IPublicClientApplication
  commentId: T:Microsoft.Identity.Client.IPublicClientApplication
  parent: Microsoft.Identity.Client
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.identity.client.ipublicclientapplication
  name: IPublicClientApplication
  nameWithType: IPublicClientApplication
  fullName: Microsoft.Identity.Client.IPublicClientApplication
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - name: TCategoryName
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - name: TCategoryName
  - name: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
- uid: Microsoft.Identity.Client
  commentId: N:Microsoft.Identity.Client
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Identity.Client
  nameWithType: Microsoft.Identity.Client
  fullName: Microsoft.Identity.Client
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Identity
    name: Identity
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.identity
  - name: .
  - uid: Microsoft.Identity.Client
    name: Client
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.identity.client
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Identity
    name: Identity
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.identity
  - name: .
  - uid: Microsoft.Identity.Client
    name: Client
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.identity.client
- uid: NotebookAutomation.Core.Services.OneDriveService.AuthenticateAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.AuthenticateAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_AuthenticateAsync
  name: AuthenticateAsync
  nameWithType: OneDriveService.AuthenticateAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.AuthenticateAsync
- uid: NotebookAutomation.Core.Services.IOneDriveService.AuthenticateAsync
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.AuthenticateAsync
  parent: NotebookAutomation.Core.Services.IOneDriveService
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_AuthenticateAsync
  name: AuthenticateAsync()
  nameWithType: IOneDriveService.AuthenticateAsync()
  fullName: NotebookAutomation.Core.Services.IOneDriveService.AuthenticateAsync()
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.AuthenticateAsync
    name: AuthenticateAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_AuthenticateAsync
  - name: (
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.AuthenticateAsync
    name: AuthenticateAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_AuthenticateAsync
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: NotebookAutomation.Core.Services.OneDriveService.SetForceRefresh*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.SetForceRefresh
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_SetForceRefresh_System_Boolean_
  name: SetForceRefresh
  nameWithType: OneDriveService.SetForceRefresh
  fullName: NotebookAutomation.Core.Services.OneDriveService.SetForceRefresh
- uid: NotebookAutomation.Core.Services.IOneDriveService.SetForceRefresh(System.Boolean)
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.SetForceRefresh(System.Boolean)
  parent: NotebookAutomation.Core.Services.IOneDriveService
  isExternal: true
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_SetForceRefresh_System_Boolean_
  name: SetForceRefresh(bool)
  nameWithType: IOneDriveService.SetForceRefresh(bool)
  fullName: NotebookAutomation.Core.Services.IOneDriveService.SetForceRefresh(bool)
  nameWithType.vb: IOneDriveService.SetForceRefresh(Boolean)
  fullName.vb: NotebookAutomation.Core.Services.IOneDriveService.SetForceRefresh(Boolean)
  name.vb: SetForceRefresh(Boolean)
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.SetForceRefresh(System.Boolean)
    name: SetForceRefresh
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_SetForceRefresh_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.SetForceRefresh(System.Boolean)
    name: SetForceRefresh
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_SetForceRefresh_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NotebookAutomation.Core.Services.OneDriveService.RefreshAuthenticationAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.RefreshAuthenticationAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_RefreshAuthenticationAsync
  name: RefreshAuthenticationAsync
  nameWithType: OneDriveService.RefreshAuthenticationAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.RefreshAuthenticationAsync
- uid: NotebookAutomation.Core.Services.IOneDriveService.RefreshAuthenticationAsync
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.RefreshAuthenticationAsync
  parent: NotebookAutomation.Core.Services.IOneDriveService
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_RefreshAuthenticationAsync
  name: RefreshAuthenticationAsync()
  nameWithType: IOneDriveService.RefreshAuthenticationAsync()
  fullName: NotebookAutomation.Core.Services.IOneDriveService.RefreshAuthenticationAsync()
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.RefreshAuthenticationAsync
    name: RefreshAuthenticationAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_RefreshAuthenticationAsync
  - name: (
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.RefreshAuthenticationAsync
    name: RefreshAuthenticationAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_RefreshAuthenticationAsync
  - name: (
  - name: )
- uid: NotebookAutomation.Core.Services.OneDriveService.DownloadFileAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.DownloadFileAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_DownloadFileAsync_System_String_System_String_System_Threading_CancellationToken_
  name: DownloadFileAsync
  nameWithType: OneDriveService.DownloadFileAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.DownloadFileAsync
- uid: NotebookAutomation.Core.Services.IOneDriveService.DownloadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.DownloadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.IOneDriveService
  isExternal: true
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_DownloadFileAsync_System_String_System_String_System_Threading_CancellationToken_
  name: DownloadFileAsync(string, string, CancellationToken)
  nameWithType: IOneDriveService.DownloadFileAsync(string, string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.IOneDriveService.DownloadFileAsync(string, string, System.Threading.CancellationToken)
  nameWithType.vb: IOneDriveService.DownloadFileAsync(String, String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.IOneDriveService.DownloadFileAsync(String, String, System.Threading.CancellationToken)
  name.vb: DownloadFileAsync(String, String, CancellationToken)
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.DownloadFileAsync(System.String,System.String,System.Threading.CancellationToken)
    name: DownloadFileAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_DownloadFileAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.DownloadFileAsync(System.String,System.String,System.Threading.CancellationToken)
    name: DownloadFileAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_DownloadFileAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: NotebookAutomation.Core.Services.OneDriveService.ListFilesAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.ListFilesAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_ListFilesAsync_System_String_System_Threading_CancellationToken_
  name: ListFilesAsync
  nameWithType: OneDriveService.ListFilesAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.ListFilesAsync
- uid: NotebookAutomation.Core.Services.IOneDriveService.ListFilesAsync(System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.ListFilesAsync(System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.IOneDriveService
  isExternal: true
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_ListFilesAsync_System_String_System_Threading_CancellationToken_
  name: ListFilesAsync(string, CancellationToken)
  nameWithType: IOneDriveService.ListFilesAsync(string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.IOneDriveService.ListFilesAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: IOneDriveService.ListFilesAsync(String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.IOneDriveService.ListFilesAsync(String, System.Threading.CancellationToken)
  name.vb: ListFilesAsync(String, CancellationToken)
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.ListFilesAsync(System.String,System.Threading.CancellationToken)
    name: ListFilesAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_ListFilesAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.ListFilesAsync(System.String,System.Threading.CancellationToken)
    name: ListFilesAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_ListFilesAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<string>>
  nameWithType: Task<List<string>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<string>>
  nameWithType.vb: Task(Of List(Of String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of String))
  name.vb: Task(Of List(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NotebookAutomation.Core.Services.OneDriveService.UploadFileAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.UploadFileAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_UploadFileAsync_System_String_System_String_System_Threading_CancellationToken_
  name: UploadFileAsync
  nameWithType: OneDriveService.UploadFileAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.UploadFileAsync
- uid: NotebookAutomation.Core.Services.IOneDriveService.UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.IOneDriveService
  isExternal: true
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_UploadFileAsync_System_String_System_String_System_Threading_CancellationToken_
  name: UploadFileAsync(string, string, CancellationToken)
  nameWithType: IOneDriveService.UploadFileAsync(string, string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.IOneDriveService.UploadFileAsync(string, string, System.Threading.CancellationToken)
  nameWithType.vb: IOneDriveService.UploadFileAsync(String, String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.IOneDriveService.UploadFileAsync(String, String, System.Threading.CancellationToken)
  name.vb: UploadFileAsync(String, String, CancellationToken)
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)
    name: UploadFileAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_UploadFileAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)
    name: UploadFileAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_UploadFileAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: NotebookAutomation.Core.Services.OneDriveService.CreateShareLinkAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.CreateShareLinkAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_CreateShareLinkAsync_System_String_System_String_System_String_System_Threading_CancellationToken_
  name: CreateShareLinkAsync
  nameWithType: OneDriveService.CreateShareLinkAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.CreateShareLinkAsync
- uid: NotebookAutomation.Core.Services.IOneDriveService.CreateShareLinkAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.CreateShareLinkAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.IOneDriveService
  isExternal: true
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_CreateShareLinkAsync_System_String_System_String_System_String_System_Threading_CancellationToken_
  name: CreateShareLinkAsync(string, string, string, CancellationToken)
  nameWithType: IOneDriveService.CreateShareLinkAsync(string, string, string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.IOneDriveService.CreateShareLinkAsync(string, string, string, System.Threading.CancellationToken)
  nameWithType.vb: IOneDriveService.CreateShareLinkAsync(String, String, String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.IOneDriveService.CreateShareLinkAsync(String, String, String, System.Threading.CancellationToken)
  name.vb: CreateShareLinkAsync(String, String, String, CancellationToken)
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.CreateShareLinkAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
    name: CreateShareLinkAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_CreateShareLinkAsync_System_String_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.CreateShareLinkAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
    name: CreateShareLinkAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_CreateShareLinkAsync_System_String_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: NotebookAutomation.Core.Services.OneDriveService.SearchFilesAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.SearchFilesAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_SearchFilesAsync_System_String_System_Threading_CancellationToken_
  name: SearchFilesAsync
  nameWithType: OneDriveService.SearchFilesAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.SearchFilesAsync
- uid: NotebookAutomation.Core.Services.IOneDriveService.SearchFilesAsync(System.String,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.SearchFilesAsync(System.String,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.IOneDriveService
  isExternal: true
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_SearchFilesAsync_System_String_System_Threading_CancellationToken_
  name: SearchFilesAsync(string, CancellationToken)
  nameWithType: IOneDriveService.SearchFilesAsync(string, CancellationToken)
  fullName: NotebookAutomation.Core.Services.IOneDriveService.SearchFilesAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: IOneDriveService.SearchFilesAsync(String, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.IOneDriveService.SearchFilesAsync(String, System.Threading.CancellationToken)
  name.vb: SearchFilesAsync(String, CancellationToken)
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.SearchFilesAsync(System.String,System.Threading.CancellationToken)
    name: SearchFilesAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_SearchFilesAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.SearchFilesAsync(System.String,System.Threading.CancellationToken)
    name: SearchFilesAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_SearchFilesAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<Dictionary<string, object>>>
  nameWithType: Task<List<Dictionary<string, object>>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, object>>>
  nameWithType.vb: Task(Of List(Of Dictionary(Of String, Object)))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of System.Collections.Generic.Dictionary(Of String, Object)))
  name.vb: Task(Of List(Of Dictionary(Of String, Object)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  - name: )
  - name: )
- uid: NotebookAutomation.Core.Services.OneDriveService.GetFileByIdAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.GetFileByIdAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_GetFileByIdAsync_System_String_System_Threading_CancellationToken_
  name: GetFileByIdAsync
  nameWithType: OneDriveService.GetFileByIdAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.GetFileByIdAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.Object}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.Object}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Dictionary<string, object>>
  nameWithType: Task<Dictionary<string, object>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>>
  nameWithType.vb: Task(Of Dictionary(Of String, Object))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of String, Object))
  name.vb: Task(Of Dictionary(Of String, Object))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  - name: )
- uid: NotebookAutomation.Core.Services.OneDriveService.SearchAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.SearchAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_SearchAsync_System_String_System_Threading_CancellationToken_
  name: SearchAsync
  nameWithType: OneDriveService.SearchAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.SearchAsync
- uid: NotebookAutomation.Core.Services.OneDriveService.GetItemByIdAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.GetItemByIdAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_GetItemByIdAsync_System_String_System_Threading_CancellationToken_
  name: GetItemByIdAsync
  nameWithType: OneDriveService.GetItemByIdAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.GetItemByIdAsync
- uid: NotebookAutomation.Core.Services.OneDriveService.ListDrivesAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.ListDrivesAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_ListDrivesAsync_System_Threading_CancellationToken_
  name: ListDrivesAsync
  nameWithType: OneDriveService.ListDrivesAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.ListDrivesAsync
- uid: NotebookAutomation.Core.Services.OneDriveService.ListRootItemsAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.ListRootItemsAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_ListRootItemsAsync_System_Threading_CancellationToken_
  name: ListRootItemsAsync
  nameWithType: OneDriveService.ListRootItemsAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.ListRootItemsAsync
- uid: NotebookAutomation.Core.Services.OneDriveService.ListFilesRecursiveAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.ListFilesRecursiveAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_ListFilesRecursiveAsync_System_String_System_String_System_Threading_CancellationToken_
  name: ListFilesRecursiveAsync
  nameWithType: OneDriveService.ListFilesRecursiveAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.ListFilesRecursiveAsync
- uid: NotebookAutomation.Core.Services.OneDriveService.ListFilesWithMetadataAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.ListFilesWithMetadataAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_ListFilesWithMetadataAsync_System_String_System_Threading_CancellationToken_
  name: ListFilesWithMetadataAsync
  nameWithType: OneDriveService.ListFilesWithMetadataAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.ListFilesWithMetadataAsync
- uid: NotebookAutomation.Core.Services.OneDriveService.TryAlternativePathFormatsAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.TryAlternativePathFormatsAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_TryAlternativePathFormatsAsync_System_String_System_Threading_CancellationToken_
  name: TryAlternativePathFormatsAsync
  nameWithType: OneDriveService.TryAlternativePathFormatsAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.TryAlternativePathFormatsAsync
- uid: NotebookAutomation.Core.Services.OneDriveService.GetFileByPathAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.GetFileByPathAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_GetFileByPathAsync_System_String_System_Threading_CancellationToken_
  name: GetFileByPathAsync
  nameWithType: OneDriveService.GetFileByPathAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.GetFileByPathAsync
- uid: NotebookAutomation.Core.Services.OneDriveService.ConfigureVaultRoots*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.ConfigureVaultRoots
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_ConfigureVaultRoots_System_String_System_String_
  name: ConfigureVaultRoots
  nameWithType: OneDriveService.ConfigureVaultRoots
  fullName: NotebookAutomation.Core.Services.OneDriveService.ConfigureVaultRoots
- uid: NotebookAutomation.Core.Services.IOneDriveService.ConfigureVaultRoots(System.String,System.String)
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.ConfigureVaultRoots(System.String,System.String)
  parent: NotebookAutomation.Core.Services.IOneDriveService
  isExternal: true
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_ConfigureVaultRoots_System_String_System_String_
  name: ConfigureVaultRoots(string, string)
  nameWithType: IOneDriveService.ConfigureVaultRoots(string, string)
  fullName: NotebookAutomation.Core.Services.IOneDriveService.ConfigureVaultRoots(string, string)
  nameWithType.vb: IOneDriveService.ConfigureVaultRoots(String, String)
  fullName.vb: NotebookAutomation.Core.Services.IOneDriveService.ConfigureVaultRoots(String, String)
  name.vb: ConfigureVaultRoots(String, String)
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.ConfigureVaultRoots(System.String,System.String)
    name: ConfigureVaultRoots
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_ConfigureVaultRoots_System_String_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.ConfigureVaultRoots(System.String,System.String)
    name: ConfigureVaultRoots
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_ConfigureVaultRoots_System_String_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: NotebookAutomation.Core.Services.OneDriveService.MapLocalToOneDrivePath*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.MapLocalToOneDrivePath
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_MapLocalToOneDrivePath_System_String_
  name: MapLocalToOneDrivePath
  nameWithType: OneDriveService.MapLocalToOneDrivePath
  fullName: NotebookAutomation.Core.Services.OneDriveService.MapLocalToOneDrivePath
- uid: NotebookAutomation.Core.Services.IOneDriveService.MapLocalToOneDrivePath(System.String)
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.MapLocalToOneDrivePath(System.String)
  parent: NotebookAutomation.Core.Services.IOneDriveService
  isExternal: true
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_MapLocalToOneDrivePath_System_String_
  name: MapLocalToOneDrivePath(string)
  nameWithType: IOneDriveService.MapLocalToOneDrivePath(string)
  fullName: NotebookAutomation.Core.Services.IOneDriveService.MapLocalToOneDrivePath(string)
  nameWithType.vb: IOneDriveService.MapLocalToOneDrivePath(String)
  fullName.vb: NotebookAutomation.Core.Services.IOneDriveService.MapLocalToOneDrivePath(String)
  name.vb: MapLocalToOneDrivePath(String)
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.MapLocalToOneDrivePath(System.String)
    name: MapLocalToOneDrivePath
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_MapLocalToOneDrivePath_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.MapLocalToOneDrivePath(System.String)
    name: MapLocalToOneDrivePath
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_MapLocalToOneDrivePath_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: NotebookAutomation.Core.Services.OneDriveService.MapOneDriveToLocalPath*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.MapOneDriveToLocalPath
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_MapOneDriveToLocalPath_System_String_
  name: MapOneDriveToLocalPath
  nameWithType: OneDriveService.MapOneDriveToLocalPath
  fullName: NotebookAutomation.Core.Services.OneDriveService.MapOneDriveToLocalPath
- uid: NotebookAutomation.Core.Services.IOneDriveService.MapOneDriveToLocalPath(System.String)
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.MapOneDriveToLocalPath(System.String)
  parent: NotebookAutomation.Core.Services.IOneDriveService
  isExternal: true
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_MapOneDriveToLocalPath_System_String_
  name: MapOneDriveToLocalPath(string)
  nameWithType: IOneDriveService.MapOneDriveToLocalPath(string)
  fullName: NotebookAutomation.Core.Services.IOneDriveService.MapOneDriveToLocalPath(string)
  nameWithType.vb: IOneDriveService.MapOneDriveToLocalPath(String)
  fullName.vb: NotebookAutomation.Core.Services.IOneDriveService.MapOneDriveToLocalPath(String)
  name.vb: MapOneDriveToLocalPath(String)
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.MapOneDriveToLocalPath(System.String)
    name: MapOneDriveToLocalPath
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_MapOneDriveToLocalPath_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.MapOneDriveToLocalPath(System.String)
    name: MapOneDriveToLocalPath
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_MapOneDriveToLocalPath_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: NotebookAutomation.Core.Services.OneDriveService.GetShareLinkAsync*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.GetShareLinkAsync
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_GetShareLinkAsync_System_String_System_Boolean_System_Threading_CancellationToken_
  name: GetShareLinkAsync
  nameWithType: OneDriveService.GetShareLinkAsync
  fullName: NotebookAutomation.Core.Services.OneDriveService.GetShareLinkAsync
- uid: NotebookAutomation.Core.Services.IOneDriveService.GetShareLinkAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:NotebookAutomation.Core.Services.IOneDriveService.GetShareLinkAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  parent: NotebookAutomation.Core.Services.IOneDriveService
  isExternal: true
  href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_GetShareLinkAsync_System_String_System_Boolean_System_Threading_CancellationToken_
  name: GetShareLinkAsync(string, bool, CancellationToken)
  nameWithType: IOneDriveService.GetShareLinkAsync(string, bool, CancellationToken)
  fullName: NotebookAutomation.Core.Services.IOneDriveService.GetShareLinkAsync(string, bool, System.Threading.CancellationToken)
  nameWithType.vb: IOneDriveService.GetShareLinkAsync(String, Boolean, CancellationToken)
  fullName.vb: NotebookAutomation.Core.Services.IOneDriveService.GetShareLinkAsync(String, Boolean, System.Threading.CancellationToken)
  name.vb: GetShareLinkAsync(String, Boolean, CancellationToken)
  spec.csharp:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.GetShareLinkAsync(System.String,System.Boolean,System.Threading.CancellationToken)
    name: GetShareLinkAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_GetShareLinkAsync_System_String_System_Boolean_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: NotebookAutomation.Core.Services.IOneDriveService.GetShareLinkAsync(System.String,System.Boolean,System.Threading.CancellationToken)
    name: GetShareLinkAsync
    href: NotebookAutomation.Core.Services.IOneDriveService.html#NotebookAutomation_Core_Services_IOneDriveService_GetShareLinkAsync_System_String_System_Boolean_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: NotebookAutomation.Core.Services.OneDriveService.SetCliOptions*
  commentId: Overload:NotebookAutomation.Core.Services.OneDriveService.SetCliOptions
  href: NotebookAutomation.Core.Services.OneDriveService.html#NotebookAutomation_Core_Services_OneDriveService_SetCliOptions_NotebookAutomation_Core_Services_OneDriveCliOptions_
  name: SetCliOptions
  nameWithType: OneDriveService.SetCliOptions
  fullName: NotebookAutomation.Core.Services.OneDriveService.SetCliOptions
- uid: NotebookAutomation.Core.Services.OneDriveCliOptions
  commentId: T:NotebookAutomation.Core.Services.OneDriveCliOptions
  parent: NotebookAutomation.Core.Services
  href: NotebookAutomation.Core.Services.OneDriveCliOptions.html
  name: OneDriveCliOptions
  nameWithType: OneDriveCliOptions
  fullName: NotebookAutomation.Core.Services.OneDriveCliOptions
