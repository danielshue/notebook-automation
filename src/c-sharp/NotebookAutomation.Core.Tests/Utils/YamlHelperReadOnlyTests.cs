using System.IO;
using System.Text;

using NotebookAutomation.Core.Utils;

namespace NotebookAutomation.Core.Tests.Utils;

/// <summary>
/// Tests for the YamlHelper readonly functionality.
/// </summary>
[TestClass]
public class YamlHelperReadOnlyTests
{
    private ILogger<YamlHelper> _logger;
    private YamlHelper _yamlHelper;
    private string _tempDir;

    /// <summary>
    /// Initialize test resources before each test.
    /// </summary>
    [TestInitialize]
    public void Setup()
    {
        _logger = new LoggerFactory().CreateLogger<YamlHelper>(); _yamlHelper = new YamlHelper(_logger);
        _tempDir = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
        Directory.CreateDirectory(_tempDir);
    }

    /// <summary>
    /// Clean up test resources after each test.
    /// </summary>
    [TestCleanup]
    public void Cleanup()
    {
        if (_tempDir != null && Directory.Exists(_tempDir))
        {
            Directory.Delete(_tempDir, true);
        }
    }

    /// <summary>
    /// Test that IsAutoGeneratedStateReadOnly correctly identifies read-only state.
    /// </summary>
    [TestMethod]
    public void IsAutoGeneratedStateReadOnly_WithReadOnlyState_ReturnsTrue()
    {
        // Arrange
        Dictionary<string, object> frontmatter = new()
        {
            { "auto-generated-state", "read-only" }
        };

        // Act
        bool result = _yamlHelper!.IsAutoGeneratedStateReadOnly(frontmatter);

        // Assert
        Assert.IsTrue(result);
    }

    /// <summary>
    /// Test that IsAutoGeneratedStateReadOnly correctly identifies readonly state.
    /// </summary>
    [TestMethod]
    public void IsAutoGeneratedStateReadOnly_WithReadonlyState_ReturnsTrue()
    {
        // Arrange
        Dictionary<string, object> frontmatter = new()
        {
            { "auto-generated-state", "readonly" }
        };

        // Act
        bool result = _yamlHelper!.IsAutoGeneratedStateReadOnly(frontmatter);

        // Assert
        Assert.IsTrue(result);
    }

    /// <summary>
    /// Test that IsAutoGeneratedStateReadOnly handles case-insensitive matching.
    /// </summary>
    [TestMethod]
    public void IsAutoGeneratedStateReadOnly_WithMixedCase_ReturnsTrue()
    {
        // Arrange
        Dictionary<string, object> frontmatterReadOnly = new()
        {
            { "auto-generated-state", "Read-Only" }
        };
        Dictionary<string, object> frontmatterReadonly = new()
        {
            { "auto-generated-state", "ReadOnly" }
        };

        // Act
        bool resultReadOnly = _yamlHelper!.IsAutoGeneratedStateReadOnly(frontmatterReadOnly);
        bool resultReadonly = _yamlHelper!.IsAutoGeneratedStateReadOnly(frontmatterReadonly);

        // Assert
        Assert.IsTrue(resultReadOnly);
        Assert.IsTrue(resultReadonly);
    }

    /// <summary>
    /// Test that IsAutoGeneratedStateReadOnly returns false for non-readonly states.
    /// </summary>
    [TestMethod]
    public void IsAutoGeneratedStateReadOnly_WithNonReadOnlyState_ReturnsFalse()
    {
        // Arrange
        Dictionary<string, object> frontmatter = new()
        {
            { "auto-generated-state", "draft" }
        };

        // Act
        bool result = _yamlHelper!.IsAutoGeneratedStateReadOnly(frontmatter);

        // Assert
        Assert.IsFalse(result);
    }

    /// <summary>
    /// Test that IsAutoGeneratedStateReadOnly returns false when no auto-generated-state is present.
    /// </summary>
    [TestMethod]
    public void IsAutoGeneratedStateReadOnly_WithNoAutoGeneratedState_ReturnsFalse()
    {
        // Arrange
        Dictionary<string, object> frontmatter = new()
        {
            { "title", "Test Document" }
        };

        // Act
        bool result = _yamlHelper!.IsAutoGeneratedStateReadOnly(frontmatter);

        // Assert
        Assert.IsFalse(result);
    }

    /// <summary>
    /// Test that IsFileReadOnly correctly identifies a readonly file.
    /// </summary>
    [TestMethod]
    public void IsFileReadOnly_WithReadOnlyFile_ReturnsTrue()
    {
        // Arrange
        string testMarkdown = @"---
title: Test Document
auto-generated-state: read-only
---

# Test Document

This is a test document.";

        string testFilePath = Path.Combine(_tempDir!, "readonly-test.md");
        File.WriteAllText(testFilePath, testMarkdown, Encoding.UTF8);

        // Act
        bool result = _yamlHelper!.IsFileReadOnly(testFilePath);

        // Assert
        Assert.IsTrue(result);
    }

    /// <summary>
    /// Test that IsFileReadOnly returns false for a non-readonly file.
    /// </summary>
    [TestMethod]
    public void IsFileReadOnly_WithNonReadOnlyFile_ReturnsFalse()
    {
        // Arrange
        string testMarkdown = @"---
title: Test Document
auto-generated-state: draft
---

# Test Document

This is a test document.";

        string testFilePath = Path.Combine(_tempDir!, "draft-test.md");
        File.WriteAllText(testFilePath, testMarkdown, Encoding.UTF8);

        // Act
        bool result = _yamlHelper!.IsFileReadOnly(testFilePath);

        // Assert
        Assert.IsFalse(result);
    }

    /// <summary>
    /// Test that IsFileReadOnly returns false for a non-existent file.
    /// </summary>
    [TestMethod]
    public void IsFileReadOnly_WithNonExistentFile_ReturnsFalse()
    {
        // Arrange
        string nonExistentPath = Path.Combine(_tempDir!, "nonexistent.md");

        // Act
        bool result = _yamlHelper!.IsFileReadOnly(nonExistentPath);

        // Assert
        Assert.IsFalse(result);
    }

    /// <summary>
    /// Test that IsFileReadOnly returns false for a file without frontmatter.
    /// </summary>
    [TestMethod]
    public void IsFileReadOnly_WithNoFrontmatter_ReturnsFalse()
    {
        // Arrange
        string testMarkdown = @"# Test Document

This is a test document without frontmatter.";

        string testFilePath = Path.Combine(_tempDir!, "no-frontmatter-test.md");
        File.WriteAllText(testFilePath, testMarkdown, Encoding.UTF8);

        // Act
        bool result = _yamlHelper!.IsFileReadOnly(testFilePath);

        // Assert
        Assert.IsFalse(result);
    }
}
