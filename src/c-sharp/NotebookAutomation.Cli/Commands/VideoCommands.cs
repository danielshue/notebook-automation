// Licensed under the MIT License. See LICENSE file in the project root for full license information.
[assembly: InternalsVisibleTo("DynamicProxyGenAssembly2")]

namespace NotebookAutomation.Cli.Commands;

/// <summary>
/// Provides CLI commands for processing video files and generating markdown notes.
/// </summary>
/// <remarks>
/// <para>
/// This class registers the 'video-notes' command for processing video files to extract
/// metadata, generate markdown notes with appropriate frontmatter, and optionally
/// include references to the original video file. It supports:
/// <list type="bullet">
/// <item><description>Video file discovery and filtering</description></item>
/// <item><description>Metadata extraction (e.g., duration, resolution, codec)</description></item>
/// <item><description>Markdown note generation with YAML frontmatter</description></item>
/// <item><description>Integration with the Core library for video processing</description></item>
/// </list>
/// </para>
/// <para>
/// The video processing functionality utilizes the <see cref="VideoNoteProcessingEntrypoint"/>
/// from the Core library to handle the actual processing of video files. The supported
/// video formats are defined in the application configuration and typically include
/// MP4, MOV, AVI, MKV, WEBM, and others.
/// </para>
/// </remarks>
/// <example>
/// <code>
/// var rootCommand = new RootCommand();
/// VideoCommands.Register(rootCommand, configOption, debugOption, verboseOption, dryRunOption);
/// rootCommand.Invoke("video-notes --input videos --output notes");
/// </code>
/// </example>
internal class VideoCommands
{
    private readonly ILogger<VideoCommands> logger;

    public VideoCommands(ILogger<VideoCommands> logger)
    {
        this.logger = logger;
        this.logger.LogDebug("Video command initialized");
    }

    /// <summary>
    /// Registers the 'video-notes' command with the root command.
    /// </summary>
    /// <param name="rootCommand">The root command to add video processing commands to.</param>
    /// <param name="configOption">The global config file option.</param>
    /// <param name="debugOption">The global debug option.</param>
    /// <param name="verboseOption">The global verbose output option.</param>
    /// <param name="dryRunOption">The global dry run option to simulate actions without making changes.</param>
    /// <remarks>
    /// <para>
    /// This method adds the 'video-notes' command to the root command, enabling users to process
    /// video files and generate markdown notes. It defines options for input, output, and other
    /// global settings.
    /// </para>
    /// </remarks>
    /// <example>
    /// <code>
    /// var rootCommand = new RootCommand();
    /// VideoCommands.Register(rootCommand, configOption, debugOption, verboseOption, dryRunOption);
    /// rootCommand.Invoke("video-notes --input videos --output notes");
    /// </code>
    /// </example>
    public void Register(RootCommand rootCommand, Option<string> configOption, Option<bool> debugOption, Option<bool> verboseOption, Option<bool> dryRunOption)
    {
        var inputOption = new Option<string?>(
            aliases: ["--input", "-i"],
            description: "Path to the input video file or directory (will auto-detect if it's a file or folder)")
        {
            IsRequired = true,
        };
        var outputOption = new Option<string>(
            aliases: ["--overwrite-output-dir", "-o"],
            description: "Override the default output directory (normally uses notebook_vault_fullpath_root from config)");

        var vaultRootOverrideOption = new Option<string?>(
            aliases: ["--override-vault-root"],
            description: "Specify the explicit vault root path (overrides the config)");

        var resourcesRootOption = new Option<string?>(
            aliases: ["--onedrive-fullpath-root"],
            description: "Override OneDrive fullpath root directory");
        var noSummaryOption = new Option<bool>(
            aliases: ["--no-summary"],
            description: "Skip summary generation (summary is generated by default)");
        var retryFailedOption = new Option<bool>(
            aliases: ["--retry-failed"],
            description: "Retry only failed files from previous run");
        var forceOption = new Option<bool>(
            aliases: ["--force"],
            description: "Overwrite existing notes");
        var timeoutOption = new Option<int?>(
            aliases: ["--timeout"],
            description: "Set API request timeout (seconds)");
        var refreshAuthOption = new Option<bool>(
            aliases: ["--refresh-auth"],
            description: "Force refresh Microsoft Graph API authentication");
        var noShareLinksOption = new Option<bool>(
            aliases: ["--no-share-links"],
            description: "Skip OneDrive share link creation (links are created by default)");
        var videoCommand = new Command("video-notes", "Video notes and metadata commands");

        videoCommand.AddOption(inputOption);
        videoCommand.AddOption(outputOption);
        videoCommand.AddOption(vaultRootOverrideOption);
        videoCommand.AddOption(resourcesRootOption);
        videoCommand.AddOption(noSummaryOption);
        videoCommand.AddOption(retryFailedOption);
        videoCommand.AddOption(forceOption);
        videoCommand.AddOption(timeoutOption);
        videoCommand.AddOption(refreshAuthOption);
        videoCommand.AddOption(noShareLinksOption);
        videoCommand.SetHandler(async context =>
        {
            string? input = context.ParseResult.GetValueForOption(inputOption);
            string? overrideOutputDir = context.ParseResult.GetValueForOption(outputOption);
            string? vaultRootOverride = context.ParseResult.GetValueForOption(vaultRootOverrideOption);
            string? config = context.ParseResult.GetValueForOption(configOption);
            bool debug = context.ParseResult.GetValueForOption(debugOption);
            bool verbose = context.ParseResult.GetValueForOption(verboseOption);
            bool dryRun = context.ParseResult.GetValueForOption(dryRunOption);
            string? resourcesRoot = context.ParseResult.GetValueForOption(resourcesRootOption);
            bool noSummary = context.ParseResult.GetValueForOption(noSummaryOption);
            bool retryFailed = context.ParseResult.GetValueForOption(retryFailedOption);
            bool force = context.ParseResult.GetValueForOption(forceOption);
            int? timeout = context.ParseResult.GetValueForOption(timeoutOption);
            bool refreshAuth = context.ParseResult.GetValueForOption(refreshAuthOption);
            bool noShareLinks = context.ParseResult.GetValueForOption(noShareLinksOption);

            // Print usage/help if required argument is missing
            if (string.IsNullOrEmpty(input))
            {
                AnsiConsoleHelper.WriteUsage(
                    "Usage: notebookautomation video-notes --input <file|dir> [options]",
                    videoCommand.Description ?? string.Empty,
                    string.Join("\n", videoCommand.Options.Select(option => $"  {string.Join(", ", option.Aliases)}\t{option.Description}")));
                return;
            }            // Initialize dependency injection if needed
            if (Program.ServiceProvider == null)
            {
                if (config != null && !File.Exists(config))
                {
                    AnsiConsoleHelper.WriteError($"Configuration file not found: {config}");
                    return;
                }

                Program.SetupDependencyInjection(config, debug);
            }            // Use DI container to get services and create scoped context for vault root override
            var serviceProvider = Program.ServiceProvider;
            if (serviceProvider == null)
            {
                AnsiConsoleHelper.WriteError("Failed to initialize dependency injection. Service provider is null.");
                return;
            }

            using var scope = serviceProvider.CreateScope();
            var scopedServices = scope.ServiceProvider;

            var loggerFactory = scopedServices.GetRequiredService<ILoggerFactory>();
            var logger = loggerFactory.CreateLogger("VideoCommands");
            var loggingService = scopedServices.GetRequiredService<LoggingService>();
            var appConfig = scopedServices.GetRequiredService<AppConfig>();            // Determine effective output directory for vault root context
            string effectiveOutputDir = overrideOutputDir ??
                (!string.IsNullOrEmpty(appConfig.Paths?.NotebookVaultFullpathRoot) ? appConfig.Paths.NotebookVaultFullpathRoot : null) ??
                "Generated";
            effectiveOutputDir = Path.GetFullPath(effectiveOutputDir);

            // Set up vault root override in scoped context
            var vaultRootContext = scopedServices.GetRequiredService<VaultRootContextService>();
            vaultRootContext.VaultRootOverride = effectiveOutputDir;
            logger.LogInformation($"Using vault root override for metadata hierarchy: {effectiveOutputDir}");

            var batchProcessor = scopedServices.GetRequiredService<VideoNoteBatchProcessor>();

            // Handle refresh auth flag - set force refresh on OneDriveService if requested
            if (refreshAuth)
            {
                try
                {
                    var oneDriveService = scopedServices.GetService<IOneDriveService>();
                    if (oneDriveService != null)
                    {
                        oneDriveService.SetForceRefresh(true);
                        AnsiConsoleHelper.WriteInfo("Force refresh authentication enabled for OneDrive");
                    }
                    else
                    {
                        logger.LogWarning("OneDrive service not available - --refresh-auth flag ignored");
                    }
                }
                catch (Exception ex)
                {
                    ExceptionHandler.HandleException(ex, "setting force refresh on OneDrive service");
                }
            }
            // Determine effective resources root (prioritize command line over config)
            string? effectiveResourcesRoot = resourcesRoot;
            if (string.IsNullOrWhiteSpace(effectiveResourcesRoot) && appConfig?.Paths != null)
            {
                effectiveResourcesRoot = appConfig.Paths.OnedriveFullpathRoot;
            }

            // Resolve input path - if it's relative, prepend with OneDrive root
            string resolvedInput = PathUtils.ResolveInputPath(input, effectiveResourcesRoot);
            logger.LogDebug($"Input path resolution: '{input}' -> '{resolvedInput}' (OneDrive root: {effectiveResourcesRoot ?? "(none)"})");

            // Build the full local resources path for path calculations
            string? localResourcesPathForBatchProcessor = null;

            // Configure OneDriveService with vault roots if available
            if (!string.IsNullOrWhiteSpace(effectiveResourcesRoot) && appConfig?.Paths != null)
            {
                try
                {
                    var oneDriveService = scopedServices.GetService<IOneDriveService>();
                    if (oneDriveService != null && !string.IsNullOrWhiteSpace(appConfig.Paths.OnedriveResourcesBasepath))
                    {
                        // Build the local resources path by combining OneDrive sync root with resources subpath
                        var localResourcesPath = Path.Combine(
                            effectiveResourcesRoot,
                            appConfig.Paths.OnedriveResourcesBasepath.TrimStart('/', '\\'));
                        localResourcesPath = Path.GetFullPath(localResourcesPath);

                        // Store this for batch processor to use for path calculations
                        localResourcesPathForBatchProcessor = localResourcesPath;

                        // Configure vault roots: local resources folder -> OneDrive resources path
                        oneDriveService.ConfigureVaultRoots(localResourcesPath, appConfig.Paths.OnedriveResourcesBasepath);
                        logger.LogInformation($"Configured OneDrive vault roots - Local: {localResourcesPath}, OneDrive: {appConfig.Paths.OnedriveResourcesBasepath}");
                    }
                }
                catch (Exception ex)
                {
                    logger.LogWarning(ex, "Failed to configure OneDrive vault roots");
                }
            }

            // Output the configured settings before processing (only in debug or verbose mode)
            if (debug || verbose)
            {
                AnsiConsoleHelper.WriteInfo($"Configured settings:");
                AnsiConsoleHelper.WriteInfo($"  Debug: {debug}");
                AnsiConsoleHelper.WriteInfo($"  Config file: {config}");
                AnsiConsoleHelper.WriteInfo($"  Input: {input}");
                AnsiConsoleHelper.WriteInfo($"  Output directory: {overrideOutputDir ?? "(default)"}");
                AnsiConsoleHelper.WriteInfo($"  Dry run: {dryRun}");
                AnsiConsoleHelper.WriteInfo($"  Skip summary: {noSummary}");
                AnsiConsoleHelper.WriteInfo($"  Force overwrite: {force}");
                AnsiConsoleHelper.WriteInfo($"  Retry failed: {retryFailed}");
                AnsiConsoleHelper.WriteInfo($"  Timeout: {(timeout.HasValue ? timeout.Value.ToString() : "(default)")}");
                AnsiConsoleHelper.WriteInfo($"  OneDrive fullpath root: {effectiveResourcesRoot ?? "(not configured)"}");
                AnsiConsoleHelper.WriteInfo($"  Config OneDrive root: {appConfig?.Paths?.OnedriveFullpathRoot ?? "(not set)"}");
                AnsiConsoleHelper.WriteInfo($"  Skip share links: {noShareLinks}");
                AnsiConsoleHelper.WriteInfo($"  Video extensions: {string.Join(", ", appConfig?.VideoExtensions ?? [])}");

                // Display more detailed AI service configuration
                AnsiConsoleHelper.WriteInfo($"  AI Provider: {appConfig?.AiService?.Provider ?? "openai"}");

                string selectedModel = "(not set)";
                string selectedEndpoint = "(not set)";

                switch (appConfig?.AiService?.Provider?.ToLowerInvariant())
                {
                    case "azure":
                        selectedModel = appConfig?.AiService?.Azure?.Model ?? "(not set)";
                        selectedEndpoint = appConfig?.AiService?.Azure?.Endpoint ?? "(not set)";
                        AnsiConsoleHelper.WriteInfo($"  AI Model: {selectedModel}");
                        AnsiConsoleHelper.WriteInfo($"  AI Deployment: {appConfig?.AiService?.Azure?.Deployment ?? "(not set)"}");
                        AnsiConsoleHelper.WriteInfo($"  AI Endpoint: {selectedEndpoint}");
                        break;

                    case "foundry":
                        selectedModel = appConfig?.AiService?.Foundry?.Model ?? "(not set)";
                        selectedEndpoint = appConfig?.AiService?.Foundry?.Endpoint ?? "(not set)";
                        AnsiConsoleHelper.WriteInfo($"  AI Model: {selectedModel}");
                        AnsiConsoleHelper.WriteInfo($"  AI Endpoint: {selectedEndpoint}");
                        break;

                    case "openai":
                    default:
                        selectedModel = appConfig?.AiService?.OpenAI?.Model ?? "(not set)";
                        selectedEndpoint = appConfig?.AiService?.OpenAI?.Endpoint ?? "https://api.openai.com/v1/chat/completions";
                        AnsiConsoleHelper.WriteInfo($"  AI Model: {selectedModel}");
                        AnsiConsoleHelper.WriteInfo($"  AI Endpoint: {selectedEndpoint}");
                        break;
                }

                // Display API key status (without revealing the key)
                string? apiKey = appConfig?.AiService?.GetApiKey();
                AnsiConsoleHelper.WriteInfo($"  API Key: {(string.IsNullOrEmpty(apiKey) ? "Not configured" : "Configured")}"); AnsiConsoleHelper.WriteInfo($"  Logging Dir: {appConfig?.Paths?.LoggingDir}");
            }

            // Validate OpenAI config before proceeding
            if (appConfig == null || !ConfigValidation.RequireOpenAi(appConfig))
            {
                logger.LogError("OpenAI configuration is missing or incomplete. Exiting.");
                return;
            }

            // Get video extensions from config
            var videoExtensions = appConfig.VideoExtensions ?? [".mp4", ".mov", ".avi", ".mkv", ".webm"];

            // Get OpenAI API key from environment or config
            string? openAiApiKey = appConfig.AiService?.GetApiKey();

            // Process videos            // Verify that we have an input source
            if (string.IsNullOrWhiteSpace(input))
            {
                logger.LogError("Input source is required. Use --input/-i to specify a video file or folder.");
                return;
            }

            // Auto-detect if input is a file or folder using resolved path
            bool isFile = File.Exists(resolvedInput);
            bool isDirectory = Directory.Exists(resolvedInput);

            if (!isFile && !isDirectory)
            {
                logger.LogError("Input path does not exist or is not accessible: {ResolvedPath} (original: {OriginalPath})", resolvedInput, input);
                return;
            }

            logger.LogInformation(
                "Processing {Type}: {Path}",
                isFile ? "file" : "directory",
                resolvedInput);
            logger.LogInformation($"Output will be written to: {overrideOutputDir ?? appConfig.Paths?.NotebookVaultFullpathRoot ?? "Generated"}");

            try
            {
                // Use the newer Spectre.Console status display with live updates
                var result = await AnsiConsoleHelper.WithStatusAsync(
                    async (updateStatus) =>
                    { // Hook up progress events to update the status
                        batchProcessor.ProcessingProgressChanged += (sender, e) =>
                        {
                            // Escape any markup to avoid Spectre.Console parsing issues
                            string safeStatus = e.Status.Replace("[", "[[").Replace("]", "]]");

                            // The status already contains file count information, so we don't need to add it
                            updateStatus(safeStatus);
                        }; return await batchProcessor.ProcessVideosAsync(
                            resolvedInput,
                            effectiveOutputDir,
                            videoExtensions,
                            openAiApiKey,
                            dryRun,
                            noSummary,
                            force,
                            retryFailed,
                            timeout,
                            localResourcesPathForBatchProcessor,
                            appConfig,
                            noShareLinks).ConfigureAwait(false);
                    },
                    $"Processing video files from {(isFile ? "file" : "directory")}: {resolvedInput}").ConfigureAwait(false);

                logger.LogInformation($"Video processing completed. Success: {result.Processed}, Failed: {result.Failed}");
                if (!string.IsNullOrWhiteSpace(result.Summary))
                {
                    AnsiConsoleHelper.WriteInfo(result.Summary);
                }
            }
            catch (Exception ex)
            {
                // No need to stop spinner manually, WithStatusAsync handles this
                AnsiConsoleHelper.WriteError($"Error processing video files: {ex.Message}");
                logger.LogError(ex, "Error processing video files");
            }
        });

        rootCommand.AddCommand(videoCommand);
    }
}
