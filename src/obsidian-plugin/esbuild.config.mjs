import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { mkdirSync, unlinkSync, existsSync } from "fs";
import { resolve } from "path";

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Point to plugin dist directory
const pluginDistDir = resolve("./dist");
const outputFile = resolve(pluginDistDir, "main.js");

// Ensure plugin dist directory exists
try {
	mkdirSync(pluginDistDir, { recursive: true });
} catch (err) {
	// Directory already exists, ignore
}

// Delete old main.js file if it exists to force rebuild
if (existsSync(outputFile)) {
	console.log("üóëÔ∏è  Deleting old main.js to force rebuild...");
	console.log(`     Target: ${outputFile}`);
	try {
		unlinkSync(outputFile);
		console.log("‚úÖ Old main.js deleted");
	} catch (err) {
		console.log("‚ö†Ô∏è  Could not delete old main.js:", err.message);
	}
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: outputFile,
	minify: prod,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
