{
  "projects": [
    {
      "id": "3cc58445-7055-4924-9f21-fb132af98584",
      "name": "Notebook Automation",
      "description": "Complete Obsidian / OneDrive Toolset",
      "createdAt": "2025-06-01T04:51:13.793Z",
      "updatedAt": "2025-06-01T04:51:13.793Z"
    },
    {
      "id": "8bb6e48b-bf3c-4bcc-a642-98983e551d13",
      "name": "PDF Command Feature Parity Implementation",
      "description": "Implementing full CLI feature parity between PDF and Video commands by updating PdfCommands.cs to include all advanced options, service integration, and proper batch processing functionality.",
      "createdAt": "2025-06-02T19:18:40.880Z",
      "updatedAt": "2025-06-02T19:18:40.880Z"
    },
    {
      "id": "3dee4b39-cce9-4bc4-9d68-bcb5f4f02ed6",
      "name": "Notebook Automation C# Improvements",
      "description": "Project to improve the C# implementation of the Notebook Automation tool with modern libraries and best practices.",
      "createdAt": "2025-06-03T01:23:10.574Z",
      "updatedAt": "2025-06-03T01:23:10.574Z"
    }
  ],
  "tasks": [
    {
      "id": "3ba806dc-f880-4413-8b8e-8c571d180659",
      "name": "Increase code coverage for low-coverage classes",
      "details": "Systematically add or improve unit tests for all classes in NotebookAutomation.Core with 0% or very low coverage. ServiceRegistration is now complete and all tests pass. Continue with the next low-coverage class: CustomLogger, MarkdownParser, MetadataHierarchyDetector, MetadataTemplateManager, or MarkdownNoteProcessor. For each: write tests for all public methods, including normal, edge, and error cases; mock dependencies as needed; run tests and verify increased coverage. Repeat until all major classes have high or complete coverage.",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-01T13:30:14.946Z",
      "updatedAt": "2025-06-01T15:37:23.035Z"
    },
    {
      "id": "2d1ad777-77ab-47a8-a79a-4b8e0be443ec",
      "name": "Clean Console Logging Format",
      "details": "✅ **FINAL COMPLETION - ALL 4 REQUIREMENTS MET** \n\n## ✅ **COMPLETED:**\n\n### 1. **Eliminated Timestamps from Console** ✅\n- Custom Serilog template: `\"{Message:lj}{NewLine}{Exception}\"`\n- **Before**: `[11:08:47 INF] Application started`\n- **After**: `Application started`\n\n### 2. **Fixed Duplicate Config Printing** ✅  \n- Added conditional logic in Program.cs\n- **Result**: `Configuration loaded successfully - config.json, Debug: True`\n\n### 3. **Debug-Only Initialization Messages** ✅\n- Console levels: `debug ? Debug : Warning`\n- **Normal**: Silent operation, **Debug**: Clean initialization messages\n\n### 4. **Usage Shows \"NotebookAutomation.exe\"** ✅\n- Changed AssemblyName from \"NotebookAutomation.Cli\" to \"NotebookAutomation\"\n- **Result**: Usage displays \"NotebookAutomation [command] [options]\"\n\n## **FILES MODIFIED:**\n1. `LoggingService.cs` - Custom logging configuration\n2. `Program.cs` - Config printing logic  \n3. `NotebookAutomation.Cli.csproj` - Assembly name\n\n## **VERIFICATION:**\n✅ All 341 tests pass\n✅ Build successful - `NotebookAutomation.dll` generated\n✅ Functional testing verified both modes\n✅ No duplicate config printing\n✅ Usage display correct\n\n**DEPLOYED & COMPLETE** ✅",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-02T18:12:15.851Z",
      "updatedAt": "2025-06-02T18:22:07.457Z"
    },
    {
      "id": "86422be2-b5f8-425f-b20b-3e4122e8105f",
      "name": "Implement vault ensure-metadata Command",
      "details": "Implement full functionality for `vault ensure-metadata` command, currently a placeholder.\n\n**CURRENT STATE:** C# implementation only logs actions; Python version has full functionality.\n\n**CORE FUNCTIONALITY NEEDED:**\n1. **Scan directory structure** - Find index files defining organizational hierarchy  \n2. **Read YAML frontmatter** from markdown files\n3. **Determine metadata** based on file location (program/course/class)\n4. **Update frontmatter** with correct metadata fields\n\n**DIRECTORY STRUCTURE EXPECTED:**\n- Root → Program Folders → Course Folders → Class Folders → Content Files (.md)\n- Index files at each level define hierarchy\n\n**TECHNICAL REQUIREMENTS:**\n- YAML frontmatter parser/writer\n- Directory traversal for .md files  \n- Index file detection for hierarchy\n- Metadata inference from folder structure\n- Dry-run support for safe preview\n- Error handling for malformed YAML/missing files\n- Comprehensive logging\n\n**IMPLEMENTATION STEPS:**\n1. Create YAML processing services\n2. Build directory structure analyzer\n3. Implement metadata inference logic\n4. Add file update capabilities with backup\n5. Support dry-run functionality\n6. Add error handling & logging\n7. Create unit tests\n\n**FILES TO MODIFY:**\n- `VaultCommands.cs` - Replace placeholder implementation\n- `NotebookAutomation.Core/` - Add YAML processing & directory analysis services\n- Add comprehensive unit tests\n\n**SUCCESS CRITERIA:**\n- Correctly updates frontmatter based on file location\n- Supports dry-run preview mode\n- Handles edge cases (missing/malformed frontmatter)\n- Maintains file formatting\n- Detailed logging for user feedback",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": false,
      "createdAt": "2025-06-02T18:33:27.075Z",
      "updatedAt": "2025-06-02T18:33:27.075Z"
    },
    {
      "id": "8845c360-f9cc-4cce-b810-ab75a2db816d",
      "name": "Implement Full PDF Command CLI Features",
      "details": "Update PdfCommands.cs to match VideoCommands.cs functionality:\n1. Add all missing command-line options (--no-summary, --force, --retry-failed, etc.)\n2. Implement proper dependency injection and service integration\n3. Add configuration validation and display\n4. Integrate with PdfNoteBatchProcessor properly\n5. Add OneDrive service integration\n6. Implement proper error handling and result reporting\n7. Update unit tests accordingly",
      "projectId": "8bb6e48b-bf3c-4bcc-a642-98983e551d13",
      "completed": false,
      "createdAt": "2025-06-02T19:18:46.555Z",
      "updatedAt": "2025-06-02T19:18:46.555Z"
    },
    {
      "id": "ccef0131-a85c-41b0-ae64-3788fa77ef49",
      "name": "Implement Spectre.Console Status Widget",
      "details": "Replace the custom spinner implementation in AnsiConsoleHelper with Spectre.Console's Status widget to provide better console feedback for long-running operations. Key requirements:\n\n1. Maintain backward compatibility with the existing AnsiConsoleHelper interface\n2. Keep the message pause functionality (5500ms pause when messages change)\n3. Implement proper cursor handling and terminal capability detection\n4. Use Spectre.Console's built-in spinner styles instead of custom Unicode characters\n5. Add async support for modern coding patterns\n6. Ensure proper cleanup of resources\n\nProgress:\n- Added Spectre.Console package to the NotebookAutomation.Cli project\n- Implemented comprehensive document processing queue system in DocumentNoteBatchProcessor\n- Added rich status tracking with document type detection\n- Maintained backward compatibility with existing UI\n- Added detailed event notifications for queue changes",
      "projectId": "3dee4b39-cce9-4bc4-9d68-bcb5f4f02ed6",
      "completed": true,
      "createdAt": "2025-06-03T01:23:24.782Z",
      "updatedAt": "2025-06-03T02:43:22.901Z"
    },
    {
      "id": "3f541dbd-f673-4278-bebe-b1495a2645b2",
      "name": "Extract Enums and Classes from DocumentNoteBatchProcessor",
      "details": "Extract the following enums and classes from DocumentNoteBatchProcessor.cs into separate files for better code organization:\n1. DocumentProcessingStatus enum -> DocumentProcessingStatus.cs\n2. ProcessingStage enum -> ProcessingStage.cs  \n3. QueueItem class -> QueueItem.cs\n4. QueueChangedEventArgs class -> QueueChangedEventArgs.cs\n5. DocumentProcessingProgressEventArgs class -> DocumentProcessingProgressEventArgs.cs\n\nEach file should be placed in the appropriate namespace and include proper XML documentation. Update DocumentNoteBatchProcessor.cs to remove the extracted code and ensure all using statements are updated as needed.",
      "projectId": "3dee4b39-cce9-4bc4-9d68-bcb5f4f02ed6",
      "completed": true,
      "createdAt": "2025-06-03T02:59:18.833Z",
      "updatedAt": "2025-06-03T03:51:30.837Z"
    }
  ],
  "subtasks": [
    {
      "id": "07e1fdc4-e59a-444c-845b-5c8eba334f2e",
      "name": "Increase coverage for OneDriveCliOptions (0%)",
      "details": "Comprehensive MSTest unit tests for OneDriveCliOptions were created and executed successfully. All tests passed, and coverage for this class is now complete. Proceeding to the next subtask.",
      "taskId": "3ba806dc-f880-4413-8b8e-8c571d180659",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-01T13:30:19.696Z",
      "updatedAt": "2025-06-01T13:38:31.500Z"
    },
    {
      "id": "4aaedd1c-1b58-47b2-8baa-e35058a9e675",
      "name": "Increase coverage for TokenProvider (0%)",
      "details": "Comprehensive MSTest unit tests for TokenProvider were created and executed successfully. All tests passed, and coverage for this class is now complete. Proceeding to the next subtask.",
      "taskId": "3ba806dc-f880-4413-8b8e-8c571d180659",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-01T13:30:19.773Z",
      "updatedAt": "2025-06-01T13:53:25.229Z"
    },
    {
      "id": "de3f31da-abf9-4789-b35a-78d651a4bc1e",
      "name": "Increase coverage for OneDriveService (5.5%)",
      "details": "Write and run comprehensive MSTest unit tests for NotebookAutomation.Core.Services.OneDriveService. Cover all public methods, including edge and error cases. Mock dependencies as needed. Verify coverage increase.",
      "taskId": "3ba806dc-f880-4413-8b8e-8c571d180659",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-01T13:30:19.851Z",
      "updatedAt": "2025-06-01T15:01:35.125Z"
    },
    {
      "id": "6f66ec47-18a1-425d-94c5-7e0b91ec0cb9",
      "name": "Increase coverage for ServiceRegistration (32.6%)",
      "details": "Write and run comprehensive MSTest unit tests for NotebookAutomation.Core.Configuration.ServiceRegistration. Cover all public methods, including edge and error cases. Mock dependencies as needed. Verify coverage increase.",
      "taskId": "3ba806dc-f880-4413-8b8e-8c571d180659",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-01T13:30:19.930Z",
      "updatedAt": "2025-06-01T15:21:01.737Z"
    },
    {
      "id": "a21a6fb1-e15f-40c0-8a7c-132631fe3c89",
      "name": "Increase coverage for CustomLogger (low coverage)",
      "details": "Comprehensive MSTest unit tests for CustomLogger have been created, refactored, and executed. All public methods and error cases are now covered. All tests pass and coverage is complete for this class.",
      "taskId": "3ba806dc-f880-4413-8b8e-8c571d180659",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-01T13:30:25.382Z",
      "updatedAt": "2025-06-01T15:32:38.922Z"
    },
    {
      "id": "69ecdb11-a5d7-4dd1-90e2-4c3d83cdafb1",
      "name": "Increase coverage for MarkdownParser (low coverage)",
      "details": "All public methods and scenarios for MarkdownParser are already covered by comprehensive MSTest unit tests. No further tests are needed. Marking this subtask complete.",
      "taskId": "3ba806dc-f880-4413-8b8e-8c571d180659",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-01T13:30:25.467Z",
      "updatedAt": "2025-06-01T15:33:53.863Z"
    },
    {
      "id": "b977b419-5585-40b9-9c55-586526bdd908",
      "name": "Increase coverage for MetadataHierarchyDetector (low coverage)",
      "details": "Write and run comprehensive MSTest unit tests for NotebookAutomation.Core.Utils.MetadataHierarchyDetector. Cover all public methods, including edge and error cases. Mock dependencies as needed. Verify coverage increase.",
      "taskId": "3ba806dc-f880-4413-8b8e-8c571d180659",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-01T13:30:25.565Z",
      "updatedAt": "2025-06-01T15:23:12.000Z"
    },
    {
      "id": "c14be9e3-2fb6-4596-97e8-7f35539530d6",
      "name": "Increase coverage for MetadataTemplateManager (low coverage)",
      "details": "Write and run comprehensive MSTest unit tests for NotebookAutomation.Core.Utils.MetadataTemplateManager. Cover all public methods, including edge and error cases. Mock dependencies as needed. Verify coverage increase.",
      "taskId": "3ba806dc-f880-4413-8b8e-8c571d180659",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-01T13:30:25.656Z",
      "updatedAt": "2025-06-01T15:25:32.846Z"
    },
    {
      "id": "6e40ea70-8101-421e-afef-ef953fe98886",
      "name": "Increase coverage for MarkdownNoteProcessor (low coverage)",
      "details": "Comprehensive MSTest unit tests for MarkdownNoteProcessor have been created and executed. All scenarios (TXT, HTML/HTM, EPUB, unsupported/missing files, AI summary, edge cases) are now covered. All tests pass and coverage is complete for this class.",
      "taskId": "3ba806dc-f880-4413-8b8e-8c571d180659",
      "projectId": "3cc58445-7055-4924-9f21-fb132af98584",
      "completed": true,
      "createdAt": "2025-06-01T13:30:25.738Z",
      "updatedAt": "2025-06-01T15:30:36.757Z"
    },
    {
      "id": "315bd0a3-c559-4f30-b98e-98a29e6b2d6f",
      "name": "Refactor AnsiConsoleHelper to use Spectre.Console",
      "details": "Update the AnsiConsoleHelper class to use Spectre.Console while maintaining the existing public API. \n\nKey changes:\n1. Added Spectre.Console NuGet package to the NotebookAutomation.Cli project\n2. Implemented comprehensive document processing queue system in DocumentNoteBatchProcessor\n3. Added document type detection based on file extension\n4. Added detailed status tracking with ProcessingStage enum\n5. Implemented QueueItem class to track document-specific information\n6. Added QueueChanged event for notifications\n7. Updated batch summary with document type statistics\n8. Maintained backward compatibility with existing UI\n9. Provided a solid foundation for future UI improvements",
      "taskId": "ccef0131-a85c-41b0-ae64-3788fa77ef49",
      "projectId": "3dee4b39-cce9-4bc4-9d68-bcb5f4f02ed6",
      "completed": true,
      "createdAt": "2025-06-03T01:23:39.303Z",
      "updatedAt": "2025-06-03T02:43:42.275Z"
    }
  ]
}