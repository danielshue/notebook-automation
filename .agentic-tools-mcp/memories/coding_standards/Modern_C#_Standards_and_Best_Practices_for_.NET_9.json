{
  "id": "57b3a53e-d7bd-494d-9e74-6dbe57f213b1",
  "title": "Modern C# Standards and Best Practices for .NET 9",
  "details": "Modern C# Standards and Best Practices for .NET 9.0 Projects\n\nALREADY IMPLEMENTED:\n- File-scoped namespaces (csharp_style_namespace_declarations = file_scoped:suggestion)\n- Nullable reference types (Nullable=enable)\n- ImplicitUsings (ImplicitUsings=enable)\n- Private/internal fields with underscore prefix\n- Using statement organization and cleanup\n\nRECOMMENDED ADDITIONAL STANDARDS:\n\n1. PATTERN MATCHING & EXPRESSIONS:\n- Use pattern matching with switch expressions\n- Prefer is patterns over typeof/GetType()\n- Use target-typed new expressions\n- Use collection expressions where appropriate\n\n2. RECORD TYPES & INIT PROPERTIES:\n- Use record types for data transfer objects\n- Use init-only properties for immutable data\n- Use required properties for essential fields\n\n3. GLOBAL USINGS:\n- Create GlobalUsings.cs files for commonly used namespaces\n- Reduce repetitive using statements across files\n\n4. MODERN ASYNC PATTERNS:\n- Use ConfigureAwait(false) in library code\n- Prefer ValueTask over Task where appropriate\n- Use IAsyncEnumerable for streaming data\n\n5. RAW STRING LITERALS (C# 11+):\n- Use raw string literals for JSON, XML, SQL\n- Reduces escape character complexity\n\n6. COLLECTION EXPRESSIONS (C# 12+):\n- Use [] syntax for arrays and collections\n- More concise and readable\n\n7. PRIMARY CONSTRUCTORS:\n- Use for simple dependency injection scenarios\n- Reduces boilerplate constructor code\n\n8. STRING INTERPOLATION IMPROVEMENTS:\n- Use $ for simple interpolation\n- Use $\"\"\" for multi-line interpolated strings\n\nEDITORCONFIG ADDITIONS NEEDED:\n- Pattern matching preferences\n- Collection expression preferences\n- String literal preferences\n- Primary constructor preferences\n- Modern async patterns",
  "category": "coding_standards",
  "dateCreated": "2025-06-05T02:11:05.532Z",
  "dateUpdated": "2025-06-05T02:11:05.532Z"
}