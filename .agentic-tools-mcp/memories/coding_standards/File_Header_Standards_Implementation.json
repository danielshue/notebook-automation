{
  "id": "75e39737-c3ee-4cca-86f9-276c0ed1a18e",
  "title": "File Header Standards Implementation",
  "details": "## File Header Standards for C# Project\n\n### Implementation\n- **Script**: `scripts/add-file-headers.ps1`\n- **VS Code Tasks**: `add-file-headers`, `add-file-headers-preview`\n- **Documentation**: `docs/File-Header-Templates.md`\n- **Snippets**: `.vscode/csharp-header-snippets.json`\n- **Template**: `templates/file-header-template.txt`\n\n### Standard Header Format\n```csharp\n// <copyright file=\"FileName.cs\" company=\"Notebook Automation Project\">\n// Copyright (c) 2025 Notebook Automation Project. All rights reserved.\n// Licensed under the MIT License. See LICENSE file in the project root for license information.\n// </copyright>\n// <author>Dan Shue <danshue+microsoft@microsoft.com></author>\n// <summary>\n// File: src/c-sharp/Project/FileName.cs\n// Purpose: [Specific description of file's purpose and functionality]\n// Created: 2025-06-07\n// </summary>\n```\n\n### VS Code Snippets Available\n1. **`fileheader`** - Standard file header\n2. **`serviceheader`** - Service class header with dependency fields\n3. **`testheader`** - Test class header with test framework info\n4. **`interfaceheader`** - Interface header with contract details\n5. **`modelheader`** - Model/data class header with entity info\n6. **`utilityheader`** - Utility class header with usage patterns\n7. **`configheader`** - Configuration class header with source info\n\n### Usage Methods\n\n#### 1. VS Code Snippets (Recommended for new files)\n- Type snippet prefix (e.g., `fileheader`) in a new C# file\n- Press Tab to expand\n- Fill in the template variables\n\n#### 2. PowerShell Script (Bulk operations)\n```powershell\n# Preview changes\npwsh scripts/add-file-headers.ps1 -Path \"src/c-sharp\" -DryRun\n\n# Apply to all files\npwsh scripts/add-file-headers.ps1 -Path \"src/c-sharp\"\n\n# Force update existing headers\npwsh scripts/add-file-headers.ps1 -Path \"src/c-sharp\" -Force\n\n# Custom author/company\npwsh scripts/add-file-headers.ps1 -Author \"John Doe\" -Company \"My Company\"\n```\n\n#### 3. VS Code Tasks\n- `Ctrl+Shift+P` → Tasks: Run Task → `add-file-headers-preview`\n- `Ctrl+Shift+P` → Tasks: Run Task → `add-file-headers`\n\n#### 4. Manual Template Copy\n- Copy from `templates/file-header-template.txt`\n- Replace placeholder variables manually\n\n### Template Variables\n- `{FILENAME}`: File name (e.g., ConfigValidation.cs)\n- `{YEAR}`: Current year (e.g., 2025)\n- `{AUTHOR_NAME}`: Author full name\n- `{AUTHOR_EMAIL}`: Author email address\n- `{RELATIVE_PATH}`: Path relative to project root\n- `{PURPOSE_DESCRIPTION}`: Specific file purpose\n- `{CREATION_DATE}`: Creation date (YYYY-MM-DD)\n\n### Purpose Description Guidelines\n- **Be Specific**: Describe what the class/file actually does\n- **Include Context**: Mention domain or feature area\n- **Key Responsibilities**: List 2-3 main functions\n\n### Good Purpose Examples\n- \"Handles PDF document processing and metadata extraction for course materials\"\n- \"Service for managing OneDrive file synchronization and mapping local vault paths\"\n- \"Configuration validation and setup for AI service integration with Azure OpenAI\"\n- \"Unit tests for TagProcessor class. Tests tag hierarchy detection and metadata generation\"\n\n### Poor Purpose Examples\n- \"Configuration class\" (too generic)\n- \"Handles files\" (too vague)  \n- \"Main service\" (not descriptive)\n\n### Applied Status\n- ✅ 139 C# files processed with standardized headers\n- ✅ VS Code snippets for easy template insertion\n- ✅ Comprehensive documentation created\n- ✅ Template files for manual copying\n- ✅ Integration with development workflow\n\n### Maintenance Tasks\n1. Update purpose descriptions from TODO placeholders\n2. Customize company/license information as needed\n3. Add new snippet types for emerging patterns\n4. Review and update templates periodically",
  "category": "coding_standards",
  "dateCreated": "2025-06-07T15:31:38.493Z",
  "dateUpdated": "2025-06-07T15:35:34.688Z"
}