{
  "id": "9c2fd0b0-0fce-4474-ab96-b300dc2c7625",
  "title": "MetadataHierarchyDetector Implementation Pattern",
  "details": "Implementation pattern for using MetadataHierarchyDetector in note processors:\n\n1. Constructor Setup:\n   - Add optional AppConfig parameter to constructor: `AppConfig? appConfig = null`\n   - Store in private readonly field: `private readonly AppConfig? _appConfig = appConfig;`\n   - Add null check when using AppConfig\n\n2. Using Statement:\n   - Add: using NotebookAutomation.Core.Configuration; (for AppConfig)\n   - Already available: using NotebookAutomation.Core.Utils; (for MetadataHierarchyDetector)\n\n3. Usage Pattern:\n   - Check if _appConfig is available before using hierarchy detector\n   - Call `hierarchyDetector.FindHierarchyInfo(filePath)` to extract hierarchy from file path\n   - Use `MetadataHierarchyDetector.UpdateMetadataWithHierarchy(metadata, hierarchyInfo)` to enrich metadata\n   - This ensures consistent hierarchy detection across all processors\n\n4. Example Implementation:\n   ```csharp\n   // In constructor\n   public MyProcessor(ILogger logger, AISummarizer aiSummarizer, AppConfig? appConfig = null)\n   {\n       _appConfig = appConfig;\n   }\n   \n   // In processing method\n   if (_appConfig != null)\n   {\n       var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole());\n       var hierarchyLogger = loggerFactory.CreateLogger<MetadataHierarchyDetector>();\n       var hierarchyDetector = new MetadataHierarchyDetector(hierarchyLogger, _appConfig);\n       var hierarchyInfo = hierarchyDetector.FindHierarchyInfo(filePath);\n       MetadataHierarchyDetector.UpdateMetadataWithHierarchy(metadata, hierarchyInfo);\n   }\n   ```\n\nCOMPLETED IMPLEMENTATIONS:\n✅ VideoNoteProcessor - Already implemented (uses different pattern but functional)\n✅ PdfNoteProcessor - Updated to use optional AppConfig and MetadataHierarchyDetector\n✅ MarkdownNoteProcessor - Updated to use optional AppConfig and MetadataHierarchyDetector  \n✅ MetadataEnsureBatchProcessor - VERIFIED: Uses MetadataEnsureProcessor which requires MetadataHierarchyDetector as constructor dependency\n✅ MetadataEnsureProcessor - VERIFIED: Uses MetadataHierarchyDetector directly in constructor and calls FindHierarchyInfo() and UpdateMetadataWithHierarchy()\n\nDEPENDENCY INJECTION VERIFICATION:\n✅ MetadataHierarchyDetector is registered in ServiceRegistration.cs as scoped service\n✅ MetadataEnsureProcessor is registered with MetadataHierarchyDetector as dependency\n✅ MetadataEnsureBatchProcessor is registered with MetadataEnsureProcessor as dependency\n\nAll four processors now consistently use MetadataHierarchyDetector for hierarchy detection when AppConfig is available. The dependency injection ensures proper instantiation and dependency resolution.",
  "category": "implementation_patterns",
  "dateCreated": "2025-06-06T22:37:10.178Z",
  "dateUpdated": "2025-06-06T22:51:56.347Z"
}