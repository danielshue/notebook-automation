{
  "id": "6148ec68-8e84-45bc-811c-f22c81f88838",
  "title": "Relative Path Support Design",
  "details": "## Analysis of Current State\n\nThe current implementation:\n1. Expects absolute paths for video-notes and pdf-notes commands\n2. Has infrastructure for OneDrive path mapping via DocumentNoteProcessorBase.ConvertOneDriveToVaultPath()\n3. Has PathUtils.NormalizePath() and related utilities\n4. Has onedrive-fullpath-root configuration and override flags\n\n## Requirements\n1. If a relative path is provided via --input, prepend it with the OneDrive path before processing\n2. If --onedrive-fullpath-root flag is used, use that instead of the default OneDrive path\n3. Apply to both video-notes and pdf-notes commands\n4. Should not affect absolute paths (they work as-is)\n\n## Proposed Implementation\n\n### Step 1: Create Path Resolution Utility\nCreate a utility method in PathUtils that:\n- Checks if path is already absolute (Path.IsPathRooted)\n- If relative, prepends with OneDrive root from config or override\n- Returns the resolved absolute path\n\n### Step 2: Update Command Handlers\nModify VideoCommands.cs and PdfCommands.cs to:\n- Call the path resolution utility before processing\n- Use the resolved path for all subsequent operations\n- Maintain backwards compatibility with absolute paths\n\n### Step 3: Add Tests\n- Test relative path resolution with config OneDrive root\n- Test relative path resolution with --onedrive-fullpath-root override\n- Test that absolute paths are unchanged\n- Test edge cases (empty paths, invalid paths)\n\n## Benefits\n- Enables shorthand relative paths for common operations\n- Maintains full backwards compatibility\n- Centralizes path resolution logic\n- Follows existing patterns in the codebase",
  "category": "design",
  "dateCreated": "2025-06-18T18:31:49.047Z",
  "dateUpdated": "2025-06-18T18:31:49.047Z"
}