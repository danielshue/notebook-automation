{
  "id": "4e41aa83-0714-4e74-8ec4-8b5ddd4ef378",
  "title": "CI Windows Workflow - Current State",
  "details": "Current state of .github/workflows/ci-windows.yml file before fixing formatting issues:\n\n```yaml\nname: Build and Package C# Version of the Notebook Automation Tool\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - \"src/c-sharp/**\"\n      - \".github/workflows/**\"\n      - \"!.agentic-tools-mcp/**\"\n  pull_request:\n    branches:\n      - master\n    paths:\n      - \"src/c-sharp/**\"\n      - \".github/workflows/**\"\n      - \"!.agentic-tools-mcp/**\"\n\n# Control workflow execution retention - deletes workflow runs after 14 days\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\n# Controls automatic cleanup of workflow runs\n# Keeps only the 10 most recent workflow runs and deletes older runs\npermissions:\n  actions: write\n  contents: read\n\njobs:\n  build-and-test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [windows-latest]\n        dotnet-version: [\"9.0.x\"]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n\n      - name: Cache NuGet packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.nuget/packages\n          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}\n          restore-keys: |\n            ${{ runner.os }}-nuget-\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v4\n        with:\n          dotnet-version: ${{ matrix.dotnet-version }}\n\n      - name: Restore dependencies\n        run: dotnet restore src/c-sharp/NotebookAutomation.sln\n\n      - name: Verify code formatting (fail fast)\n        run: dotnet format src/c-sharp/NotebookAutomation.sln --verify-no-changes --severity error\n\n      - name: Format code (optional)\n        if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'auto-format')\n        run: dotnet format src/c-sharp/NotebookAutomation.sln --include src/c-sharp/ --severity info\n        continue-on-error: true\n\n      - name: Set build version\n        id: version\n        run: |\n          $buildDate = Get-Date\n\n          # Microsoft recommended format: major.minor.build.revision\n          # where build is typically days since a base date and revision is seconds since midnight / 2\n\n          # Calculate build number (days since Jan 1, 2024)\n          $baseDate = Get-Date -Year 2024 -Month 1 -Day 1\n          $daysSinceBase = [math]::Floor(($buildDate - $baseDate).TotalDays)\n\n          # For CI builds, use GitHub run number as revision for traceability\n          $revision = $env:GITHUB_RUN_NUMBER\n\n          # Format version strings\n          $major = 1\n          $minor = 0\n\n          # For NuGet package version (must be valid SemVer)\n          $packageVersion = \"$major.$minor.0\"\n\n          # For assembly version - must be a specific version for NuGet restore\n          $assemblyVersion = \"$major.$minor.0.0\"          # For file version - use MS recommended format\n          $fileVersion = \"$major.$minor.$daysSinceBase.$revision\"\n\n          echo \"PACKAGE_VERSION=$packageVersion\" >> $env:GITHUB_ENV\n          echo \"FILE_VERSION=$fileVersion\" >> $env:GITHUB_ENV\n          echo \"ASSEMBLY_VERSION=$assemblyVersion\" >> $env:GITHUB_ENV\n\n          echo \"Package Version: $packageVersion\"\n          echo \"File Version: $fileVersion\"\n          echo \"Assembly Version: $assemblyVersion\"\n        shell: pwsh\n\n      - name: Build solution\n        run: dotnet build src/c-sharp/NotebookAutomation.sln --configuration Release --no-restore /p:Version=${{ env.PACKAGE_VERSION }} /p:FileVersion=${{ env.FILE_VERSION }} /p:AssemblyVersion=${{ env.ASSEMBLY_VERSION }} /p:InformationalVersion=${{ env.FILE_VERSION }}\n\n      - name: Run tests with coverage\n        run: |\n          dotnet test src/c-sharp/NotebookAutomation.Core.Tests/ --configuration Release --no-build --logger \"trx;LogFileName=test-results.trx\" --collect:\"XPlat Code Coverage\"\n        env:\n          DOTNET_CLI_TELEMETRY_OPTOUT: 1\n\n      - name: Upload test results\n        if: always()\n        uses: actions/upload-artifact@v4\n        with:\n          name: test-results-windows\n          path: src/c-sharp/NotebookAutomation.Core.Tests/TestResults/*.trx\n          retention-days: 7 # Keep test results for 7 days\n\n      - name: Upload coverage results\n        if: always()\n        uses: actions/upload-artifact@v4\n        with:\n          name: coverage-windows\n          path: src/c-sharp/NotebookAutomation.Core.Tests/TestResults/**/*.xml\n          retention-days: 7 # Keep coverage reports for 7 days\n\n      - name: Publish single-file EXE (win-x64)\n        run: |\n          cd ${{ github.workspace }}\n          dotnet publish src/c-sharp/NotebookAutomation.Cli/NotebookAutomation.Cli.csproj -c Release -r win-x64 /p:PublishSingleFile=true /p:SelfContained=true /p:Version=${{ env.PACKAGE_VERSION }} /p:FileVersion=${{ env.FILE_VERSION }} /p:AssemblyVersion=${{ env.ASSEMBLY_VERSION }} /p:InformationalVersion=${{ env.FILE_VERSION }} --output publish/win-x64      - name: Publish single-file EXE (win-arm64)\n        run: |\n          cd ${{ github.workspace }}\n          dotnet publish src/c-sharp/NotebookAutomation.Cli/NotebookAutomation.Cli.csproj -c Release -r win-arm64 /p:PublishSingleFile=true /p:SelfContained=true /p:Version=${{ env.PACKAGE_VERSION }} /p:FileVersion=${{ env.FILE_VERSION }} /p:AssemblyVersion=${{ env.ASSEMBLY_VERSION }} /p:InformationalVersion=${{ env.FILE_VERSION }} --output publish/win-arm64\n\n      - name: Upload published single-file executables\n        if: always()\n        uses: actions/upload-artifact@v4\n        with:\n          name: published-executables\n          path: |\n            publish/win-x64/\n            publish/win-arm64/\n          retention-days: 14 # Keep executables for 14 days (longer than test artifacts)\n```\n\nISSUES IDENTIFIED:\n1. Line 122: Missing newline after the win-x64 publish step - the win-arm64 step starts on the same line\n2. There's a missing newline character that's causing the formatting issue between the two publish steps\n\nSTATUS:\n- Code coverage is properly configured and working\n- Versioning is correctly implemented\n- Config files have been added to CLI project for inclusion in publish output\n- Main formatting issue is the missing newline between publish steps",
  "category": "ci-workflow",
  "dateCreated": "2025-06-11T23:06:26.030Z",
  "dateUpdated": "2025-06-11T23:06:26.030Z"
}