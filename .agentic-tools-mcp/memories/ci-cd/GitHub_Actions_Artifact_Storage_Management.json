{
  "id": "6c0d37b9-b962-4b5f-ab25-2fb7c399b298",
  "title": "GitHub Actions Artifact Storage Management",
  "details": "## GitHub Actions Artifact Storage Management\n\nTo manage GitHub storage usage efficiently and prevent storage quota issues, the following storage management approach has been implemented:\n\n### 1. Artifact Retention Policies\n- Test results and coverage reports: 7-day retention\n- Executable artifacts: 14-day retention\n  \nThis was implemented by adding `retention-days` parameter to all `upload-artifact` actions:\n\n```yaml\n- name: Upload test results\n  uses: actions/upload-artifact@v4\n  with:\n    name: test-results-windows\n    path: src/c-sharp/NotebookAutomation.Core.Tests/TestResults/*.trx\n    retention-days: 7 # Keep test results for 7 days\n```\n\n### 2. Workflow Run Cleanup\n- Added workflow-level concurrency controls to cancel redundant runs\n- Set proper permissions for workflow cleanup\n\n### 3. Automated Cleanup Workflow\nCreated a dedicated cleanup workflow that:\n- Runs weekly on a schedule (Sunday at midnight)\n- Can be manually triggered when needed\n- Deletes workflow runs older than 14 days\n- Always keeps at least 10 most recent workflow runs\n- Preserves artifacts from tagged releases\n\n### 4. Documentation\nAdded clear documentation in the C# project README about:\n- Storage management approach\n- Retention policies\n- How to manually trigger cleanup when needed\n\n### Key Files Modified:\n- `.github/workflows/ci-windows.yml`\n- `.github/workflows/build-exe.yml`\n- `.github/workflows/cleanup-artifacts.yml` (new file)\n- `src/c-sharp/README.md` (new file)\n\nThis comprehensive approach should help prevent GitHub storage quotas from being exhausted while still maintaining enough history for debugging purposes.",
  "category": "ci-cd",
  "dateCreated": "2025-06-04T05:38:45.283Z",
  "dateUpdated": "2025-06-04T05:38:45.283Z"
}