{
  "id": "97690cfe-8e18-4136-becc-7d64bfb392ad",
  "title": "Vault Index Generation Requirements",
  "details": "## Vault Index Generation Requirements (C# Implementation) - Final Strategy with Targeted Bases Integration\n\nBased on detailed analysis of the Python implementation and user's Bases samples, here's the refined strategy:\n\n### Core Functionality - Static + Targeted Bases Integration\n1. **Index File Naming**: Index files named exactly as their containing folder\n2. **Old Index Cleanup**: Delete all existing \"index.md\" files before generating new directory-named index files  \n3. **Hierarchy Detection**: Auto-detect folder hierarchy level (0-5) and special folders by name/location\n4. **Template Application**: Apply appropriate templates from metadata.yaml based on detected hierarchy level\n5. **Targeted Bases Integration**: Generate Bases views specifically at class and module levels\n\n### Hierarchy Levels with Targeted Bases Strategy\n- **Depth 0**: main-index (vault root) - **Static only**\n- **Depth 1**: program-index (e.g., MBA folder) - **Static only**  \n- **Depth 2**: course-index (e.g., specific course folders) - **Static only**\n- **Depth 3**: class-index - **Static + Multi-Table Bases** ⭐\n- **Depth 4**: module-index - **Static + Single-Table Bases** ⭐\n- **Depth 5**: lesson-index OR live-session-index - **Static only**\n\n### Class-Level Index (Depth 3) - Multi-Table Bases\nGenerate comprehensive overview with multiple content-type tables:\n\n```markdown\n---\ntitle: Operations Management\ncourse: Operations Management\nprogram: MBA\ntemplate-type: class-index\n---\n\n[<- Parent Navigation]\n\n# Instructions\n```base\nviews:\n  - type: table\n    name: Instructions\n    filters:\n      and:\n        - contains(course, \"Operations Management\")\n        - template-type == \"instruction\"\n    order: [file.name, module]\n```\n\n# Case Studies  \n```base\nviews:\n  - type: table\n    name: Case Studies\n    filters:\n      and:\n        - contains(course, \"Operations Management\")\n        - template-type == \"case-study\"\n    order: [file.name, module]\n```\n\n# Videos\n```base\nviews:\n  - type: table\n    name: Videos\n    filters:\n      and:\n        - contains(course, \"Operations Management\")  \n        - template-type == \"video\"\n    order: [file.name, module]\n```\n\n# Modules (Static Navigation)\n- [[Module 1/Module 1|Module 1]]\n- [[Module 2/Module 2|Module 2]]\n```\n\n### Module-Level Index (Depth 4) - Single-Table Bases\nGenerate focused view for module-specific content:\n\n```markdown\n---\ntitle: Module 1\ncourse: Operations Management\nmodule: 1\ntemplate-type: module-index\n---\n\n[<- Parent Navigation]\n\n# Module 1 Contents\n```base\nviews:\n  - type: table\n    name: Module Contents\n    filters:\n      and:\n        - contains(course, \"Operations Management\")\n        - module == 1\n    order: [file.name, template-type]\n```\n\n# Static Content (Fallback)\n## Files\n- [[file1.md|File 1]]\n- [[file2.md|File 2]]\n```\n\n### Implementation Strategy\n\n**Phase 1**: Core Static Implementation\n- Implement all hierarchy levels with static content\n- Generate rich metadata (course, module, template-type properties)\n- Ensure folder-named index files\n- Full Python functionality replication\n\n**Phase 2**: Targeted Bases Integration  \n- **Class-level enhancement**: Add multi-table Bases views for content-type organization\n- **Module-level enhancement**: Add single-table Bases views for module-specific content\n- CLI flag: `--include-bases` to enable Bases generation\n- Graceful fallback: Static content always present for non-Bases users\n\n### Content Categories for Bases Tables\nEach content type gets appropriate filtering:\n1. **Instructions** - `template-type == \"instruction\"`\n2. **Case Studies** - `template-type == \"case-study\"`  \n3. **Videos** - `template-type == \"video\"`\n4. **Readings** - `template-type == \"reading\"`\n5. **Transcripts** - `template-type == \"transcript\"`\n6. **Notes** - `template-type == \"note\"`\n7. **Quizzes** - `template-type == \"quiz\"`\n8. **Assignments** - `template-type == \"assignment\"`\n\n### CLI Integration\n- `vault generate-index` - Static indexes only\n- `vault generate-index --include-bases` - Static + Bases at class/module levels\n- Support for `--dry-run`, `--index-type` filters\n- Progress reporting and animations\n\n### Key Benefits of This Approach\n1. **Universal compatibility**: All users get static navigation\n2. **Enhanced functionality**: Bases users get dynamic content discovery at the right levels\n3. **Focused integration**: Bases only where they add the most value (class/module levels)\n4. **Graceful degradation**: Works perfectly with or without Bases plugin\n5. **Rich metadata**: Supports both static navigation and dynamic filtering\n\n### Dependencies/Utilities to Reuse\n- QueueItem and event models for batch processing\n- CourseStructureExtractor for hierarchy detection\n- MetadataHierarchyDetector for level detection\n- MetadataTemplateManager for template loading\n- FriendlyTitleHelper for title cleanup\n- YamlHelper for YAML operations (enhanced for Base configs)\n- PathFormatter and PathUtils for path operations\n- MarkdownNoteBuilder for content generation (enhanced for Base embedding)\n\n### Implementation Priority\n1. **Phase 1**: Complete static implementation (all levels)\n2. **Phase 2A**: Add class-level multi-table Bases integration\n3. **Phase 2B**: Add module-level single-table Bases integration\n4. **Phase 3**: Advanced features and optimizations",
  "category": "project_requirements",
  "dateCreated": "2025-06-05T19:36:09.481Z",
  "dateUpdated": "2025-06-05T20:06:43.884Z"
}