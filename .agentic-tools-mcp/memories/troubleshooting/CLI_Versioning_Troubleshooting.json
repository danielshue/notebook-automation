{
  "id": "4604c1d8-83ed-43fd-bb21-9bec5804edaa",
  "title": "CLI Versioning Troubleshooting",
  "details": "## CLI Versioning Issue Troubleshooting Log - FULLY RESOLVED ✅\n\n### Issue\nThe na.exe CLI application was reporting \"1.0.0-beta\" instead of the actual CI build version when running `na.exe --version`.\n\n### Root Cause Analysis\n1. **Primary Issue**: The CI workflow was not setting the `/p:InformationalVersion` property during the `dotnet publish` step, only during the build step. ✅ FIXED\n2. **Workflow Conflicts**: Both Python (`build-exe.yml`) and C# (`ci-windows.yml`) workflows were present, potentially causing confusion. ✅ FIXED  \n3. **CI Build Failures**: Recent CI builds were failing due to formatting issues in Program.cs. ✅ FIXED\n4. **Hardcoded Version in AssemblyInfo.cs**: The root cause was that `AssemblyInfo.cs` had a hardcoded `[assembly: AssemblyInformationalVersion(\"1.0.0-beta\")]` that overrode any MSBuild property settings. ✅ FIXED\n5. **CI Workflow Inefficiency**: Formatting verification was happening at the end of CI, wasting time when formatting failed. ✅ FIXED\n\n### Final Resolution\nThe real issue was in the CLI project configuration:\n- `NotebookAutomation.Cli.csproj` had `<GenerateAssemblyInfo>false</GenerateAssemblyInfo>`\n- `Properties/AssemblyInfo.cs` contained hardcoded `[assembly: AssemblyInformationalVersion(\"1.0.0-beta\")]`\n- This meant that CI build parameters like `/p:InformationalVersion=${{ env.FILE_VERSION }}` were ignored\n\n**Fix Applied:**\n1. Changed `<GenerateAssemblyInfo>false</GenerateAssemblyInfo>` to `<GenerateAssemblyInfo>true</GenerateAssemblyInfo>`\n2. Removed hardcoded version attributes from `AssemblyInfo.cs`:\n   - Removed `AssemblyVersion`, `AssemblyFileVersion`, `AssemblyInformationalVersion`\n   - Removed duplicate attributes: `AssemblyTitle`, `AssemblyCompany`, `AssemblyProduct`, `AssemblyCopyright`, `AssemblyConfiguration`\n   - Kept only unique attributes: `AssemblyDescription`, `InternalsVisibleTo`, `ComVisible`, `Guid`\n3. Reorganized CI workflow for efficiency\n\n### Actions Taken\n1. **Fixed CI Workflow Versioning**: ✅\n   - Added `/p:InformationalVersion=\"${{ env.BUILD_VERSION }}\"` to both build and publish steps in `.github/workflows/ci-windows.yml`\n   - Fixed multiple YAML and PowerShell formatting issues in the workflow\n\n2. **Disabled Python Workflow**: ✅\n   - Initially renamed `build-exe.yml` to `build-exe.yml.disabled`\n   - Completely removed the disabled Python workflow file from the repository\n   - Now only C# workflow (`ci-windows.yml`) and cleanup workflow (`cleanup-artifacts.yml`) remain active\n\n3. **Fixed CI Build Failures**: ✅\n   - Resolved formatting issues in `Program.cs`:\n     - Fixed WHITESPACE error (inline return statement)\n     - Fixed FINALNEWLINE error (missing final newline)\n   - Used `dotnet format` to ensure compliance with formatting rules\n\n4. **Fixed Hardcoded Version Issue**: ✅\n   - Enabled auto-generated assembly info in CLI project\n   - Removed hardcoded version attributes from AssemblyInfo.cs\n   - Verified local build now shows correct version: `1.0.0-development+<git-hash>`\n\n5. **Optimized CI Workflow**: ✅\n   - Moved formatting verification step earlier in workflow (after restore, before build)\n   - Added \"Verify code formatting (fail fast)\" step to catch formatting issues immediately\n   - Removed duplicate formatting check from end of workflow\n   - Now CI fails fast on formatting issues instead of building/testing first\n\n6. **Script Updates**: ✅\n   - Updated `download-latest-artifact.ps1` to use relative paths and copy full config directory\n\n### Technical Details\n- **Version Properties**: The CLI uses `Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>()?.InformationalVersion` to get version info\n- **Build Properties**: InformationalVersion needs to be set during publish, not just build, for the final executable to contain the correct version\n- **Assembly Info Generation**: When `GenerateAssemblyInfo=false`, MSBuild ignores property overrides and uses hardcoded values from AssemblyInfo.cs\n- **System.CommandLine**: The `--version` flag reads from the assembly's InformationalVersion attribute\n- **CI Efficiency**: Formatting checks now happen early to provide fast feedback and save CI resources\n\n### Current Status ✅ FULLY RESOLVED + OPTIMIZED\n- Python workflow completely removed ✅\n- C# workflow updated with proper versioning ✅\n- Formatting issues in Program.cs resolved ✅\n- Hardcoded version in AssemblyInfo.cs removed ✅\n- Auto-generated assembly info enabled ✅\n- Local build verified showing correct version ✅\n- CI workflow optimized for fast failure on formatting issues ✅\n- New CI build triggered with all fixes applied ✅\n\n### Verification Steps\n- Local test: `dotnet run --project src/c-sharp/NotebookAutomation.Cli --configuration Release -- --version` shows `1.0.0-development+<git-hash>` ✅\n- Local formatting test: `dotnet format src/c-sharp/NotebookAutomation.sln --verify-no-changes --severity error` passes ✅\n- CI build should now produce executable with version like `1.0.xxx.xxx` instead of \"1.0.0-beta\"\n- CI now fails fast on formatting issues, saving resources\n\n### Next Steps\n- Wait for CI build to complete successfully  \n- Download latest CI artifact and test version reporting\n- Confirm CLI shows actual build version (e.g., `1.0.518.1234`) instead of \"1.0.0-beta\"\n\n### Workflow Optimization Summary\n**Before:** Restore → Build → Test → Publish → Format Check (fail at end after wasting CI time)\n**After:** Restore → Format Check (fail fast) → Build → Test → Publish (efficient resource usage)",
  "category": "troubleshooting",
  "dateCreated": "2025-06-11T19:57:00.903Z",
  "dateUpdated": "2025-06-11T21:23:05.239Z"
}