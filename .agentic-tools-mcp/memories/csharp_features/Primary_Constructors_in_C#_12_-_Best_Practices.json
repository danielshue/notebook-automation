{
  "id": "ab19f489-e5f2-40e5-b007-fbc7b23911c1",
  "title": "Primary Constructors in C# 12 - Best Practices",
  "details": "# Primary Constructors in C# 12+ - Complete Guide\n\n## What are Primary Constructors?\nPrimary constructors are a concise syntax for declaring constructor parameters directly in the class or struct declaration. They reduce boilerplate code and make classes more readable.\n\n## Syntax\n```csharp\n// Traditional approach\npublic class Person\n{\n    private readonly string _name;\n    private readonly int _age;\n    \n    public Person(string name, int age)\n    {\n        _name = name;\n        _age = age;\n    }\n}\n\n// Primary constructor approach\npublic class Person(string name, int age)\n{\n    // Parameters are automatically captured and available throughout the class\n    public string Name => name;\n    public int Age => age;\n}\n```\n\n## Best Practices\n\n### 1. Use for Simple Data Classes\nPrimary constructors work best for simple classes that primarily hold data:\n```csharp\npublic class Product(string name, decimal price, string category)\n{\n    public string Name => name;\n    public decimal Price => price;\n    public string Category => category;\n    \n    public decimal CalculateTax() => price * 0.1m;\n}\n```\n\n### 2. Validation in Body\nFor validation, use the class body:\n```csharp\npublic class Person(string name, int age)\n{\n    public string Name => !string.IsNullOrEmpty(name) ? name : throw new ArgumentException(\"Name cannot be empty\");\n    public int Age => age >= 0 ? age : throw new ArgumentException(\"Age must be non-negative\");\n}\n```\n\n### 3. Combining with Records\nPrimary constructors work excellently with records:\n```csharp\npublic record Person(string Name, int Age);\npublic record struct Point(double X, double Y);\n```\n\n### 4. Field Initialization\nYou can still have fields alongside primary constructor parameters:\n```csharp\npublic class Logger(string name, LogLevel level)\n{\n    private readonly List<string> _logs = new();\n    public string Name => name;\n    public LogLevel Level => level;\n    \n    public void Log(string message) => _logs.Add($\"[{level}] {message}\");\n}\n```\n\n### 5. Inheritance Considerations\nPrimary constructors work with inheritance:\n```csharp\npublic class Animal(string name, int age)\n{\n    public string Name => name;\n    public int Age => age;\n}\n\npublic class Dog(string name, int age, string breed) : Animal(name, age)\n{\n    public string Breed => breed;\n}\n```\n\n## When NOT to Use Primary Constructors\n\n### 1. Complex Initialization Logic\nAvoid for classes requiring complex constructor logic:\n```csharp\n// Better to use traditional constructor\npublic class DatabaseConnection\n{\n    private readonly string _connectionString;\n    private readonly IDbConnection _connection;\n    \n    public DatabaseConnection(string connectionString)\n    {\n        _connectionString = connectionString;\n        _connection = CreateConnection();\n        _connection.Open();\n        // Complex initialization logic\n    }\n}\n```\n\n### 2. Multiple Constructors\nWhen you need multiple constructor overloads, traditional constructors are clearer.\n\n### 3. Mutable State\nFor classes with significant mutable state, traditional approach may be clearer.\n\n## IDE0290 Diagnostic\nThe IDE0290 diagnostic suggests using primary constructors where appropriate. It's enabled in our .editorconfig to encourage modern C# practices.\n\n## Migration Strategy\n1. Start with simple data classes\n2. Convert records to use primary constructors\n3. Gradually refactor appropriate classes\n4. Maintain traditional constructors for complex scenarios\n\n## Performance Notes\n- Primary constructors have no performance overhead\n- Parameters are captured as compiler-generated fields\n- Same memory usage as traditional approach\n\n## Updated Copilot Instructions\nWe have updated our copilot instructions (.github/copilot-instructions.md and .github/copilot-codeGeneration-instructions.md) to include:\n- Preference for primary constructors in appropriate scenarios\n- File-scoped namespaces for all new files\n- Collection expressions and pattern matching\n- Modern C# 12+ features as standard practice",
  "category": "csharp_features",
  "dateCreated": "2025-06-05T02:20:09.324Z",
  "dateUpdated": "2025-06-05T02:24:52.433Z"
}