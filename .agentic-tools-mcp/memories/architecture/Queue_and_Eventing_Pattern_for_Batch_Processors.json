{
  "id": "a35b6a37-5d93-499d-919c-c959141e86b8",
  "title": "Queue and Eventing Pattern for Batch Processors",
  "details": "The NotebookAutomation.Core project uses a consistent queue and eventing pattern for batch processing operations:\n\n## Key Models (in Models folder):\n- QueueItem: Represents a file in the processing queue with Status, Stage, StatusMessage, processing times, and metadata\n- DocumentProcessingStatus enum: Waiting, Processing, Completed, Failed\n- ProcessingStage enum: NotStarted, ContentExtraction, AISummaryGeneration, MarkdownCreation, ShareLinkGeneration, Completed\n- DocumentProcessingProgressEventArgs: Event args for progress updates (filePath, status, currentFile, totalFiles)\n- QueueChangedEventArgs: Event args for queue state changes (queue snapshot, changedItem)\n\n## Batch Processor Pattern:\n1. **Events**: Two main events exposed:\n   - ProcessingProgressChanged: Triggered for status updates during processing\n   - QueueChanged: Triggered when queue items are added/updated/removed\n\n2. **Queue Management**:\n   - Private List<QueueItem> _processingQueue with thread-safe Lock _queueLock\n   - Public IReadOnlyList<QueueItem> Queue property for external access\n   - OnQueueChanged() method to fire events when queue changes\n\n3. **Processing Flow**:\n   - Initialize queue with QueueItems for each file (DocumentType = \"METADATA\" for metadata operations)\n   - Update QueueItem.Status, Stage, and StatusMessage during processing\n   - Fire OnProcessingProgressChanged() for each status update\n   - Fire OnQueueChanged() when item status changes\n   - Track ProcessingStartTime and ProcessingEndTime\n\n4. **Thread Safety**:\n   - Use lock (_queueLock) when accessing/modifying _processingQueue\n   - Events are fired from within locked sections\n\n5. **CLI Integration Example**:\n   ```csharp\n   batchProcessor.ProcessingProgressChanged += (sender, e) =>\n   {\n       AnsiConsoleHelper.UpdateSpinnerMessage(e.Status);\n   };\n   ```\n\n## MetadataEnsureBatchProcessor Implementation:\nSuccessfully refactored to use the queue and eventing pattern:\n- Reuses existing QueueItem, DocumentProcessingStatus, ProcessingStage models\n- Implements ProcessingProgressChanged and QueueChanged events\n- Uses UpdateQueueItemStatus() helper to maintain queue state and fire events\n- Properly initializes queue with InitializeProcessingQueue()\n- Thread-safe queue operations with proper locking\n\nThis pattern enables:\n- Real-time progress tracking for UI/CLI\n- Queue inspection for monitoring\n- Consistent status reporting across all batch operations\n- Thread-safe queue management\n- Integration with spinner/progress displays",
  "category": "architecture",
  "dateCreated": "2025-06-03T17:10:01.449Z",
  "dateUpdated": "2025-06-03T17:15:31.298Z"
}