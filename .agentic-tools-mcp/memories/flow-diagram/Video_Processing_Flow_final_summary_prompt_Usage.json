{
  "id": "df914215-dc8f-4dbb-baed-1f95942e0ed4",
  "title": "Video Processing Flow final_summary_prompt Usage",
  "details": "## Complete Video Processing Flow - When final_summary_prompt.md is Read\n\n### DOCUMENTATION CREATED:\nCreated comprehensive developer documentation at:\n- `docs/developer-guide/ai-summary-flow.md`: Complete AI summary processing flow\n- `docs/developer-guide/index.md`: Developer guide index\n- Updated `docs/developer-guide/toc.yml`: Added new documentation to table of contents\n\n### High-Level Flow Diagram\n\n```\n1. CLI/BatchProcessor Entry\n   ↓\n2. VideoNoteProcessor.GenerateVideoNoteAsync()\n   ↓\n3. Extract Video Metadata\n   ↓\n4. Load Transcript (if exists)\n   ↓\n5. Build YAML Frontmatter\n   ↓\n6. Call GenerateAiSummaryAsync() with \"final_summary_prompt\"\n   ↓\n7. AISummarizer.SummarizeWithVariablesAsync()\n   ↓\n8. Check Text Size → Chunking Decision\n   ↓\n9a. Small Text: Direct Processing\n9b. Large Text: Chunking Process\n   ↓\n10. Return Final Markdown Note\n```\n\n### Detailed Flow for final_summary_prompt.md Usage\n\n**WHEN final_summary_prompt.md Gets Read:**\n\n**Location 1: Line 1051 in VideoNoteProcessor.GenerateVideoNoteAsync()**\n```csharp\naiSummary = await GenerateAiSummaryAsync(summaryInput, promptVariables, \"final_summary_prompt\").ConfigureAwait(false);\n```\n\n**Location 2: Line 771 in AISummarizer.LoadFinalPromptAsync()**\n```csharp\nstring? finalPrompt = await promptService.LoadTemplateAsync(\"final_summary_prompt\").ConfigureAwait(false);\n```\n\n### Complete Processing Flow:\n\n#### Phase 1: Video Metadata Extraction\n1. **VideoNoteProcessor.ExtractMetadataAsync()** - Extract video properties\n2. **TryLoadTranscript()** - Find and load transcript file\n3. **BuildYamlFrontmatter()** - Create complete YAML frontmatter from metadata\n\n#### Phase 2: AI Summary Generation Setup\n4. **VideoNoteProcessor.GenerateAiSummaryAsync()** calls base class\n5. **AISummarizer.SummarizeWithVariablesAsync()** - Entry point with variables including:\n   - `yamlfrontmatter`: Complete YAML block built from video metadata\n   - `title`: Video title\n   - `course`: Course information\n   - `onedrivePath`: OneDrive path\n\n#### Phase 3: Text Processing Decision\n6. **Check Text Size**: If transcript > 8,000 chars → Chunking, else → Direct\n\n#### Phase 4A: Direct Processing (Small Text)\n7. **ProcessPromptTemplateAsync()** - Load template if needed\n8. **SummarizeWithSemanticKernelAsync()** - Direct AI call\n\n#### Phase 4B: Chunking Process (Large Text)\n7. **SummarizeWithChunkingAsync()** - Main chunking orchestrator\n8. **LoadChunkPromptAsync()** - Load \"chunk_summary_prompt.md\"\n9. **LoadFinalPromptAsync()** - ⭐ **THIS IS WHERE final_summary_prompt.md IS READ** ⭐\n10. **Split transcript into chunks** (8,000 chars with 500 overlap)\n11. **Process each chunk** with chunk_summary_prompt\n12. **Aggregate chunk summaries** with final_summary_prompt\n\n### Key Variables Available to final_summary_prompt.md:\n- `{{$input}}`: String of all chunk summaries concatenated\n- `{{yamlfrontmatter}}`: Complete YAML frontmatter block \n- `{{title}}`: Video title\n- `{{course}}`: Course name\n- `{{onedrivePath}}`: OneDrive path\n\n### Template Variable Replacement Order:\n1. **PromptService.SubstituteVariables()** - Handles {{variable}} replacements\n2. **Special [yamlfrontmatter] replacement** - Replaces literal `[yamlfrontmatter]` with YAML content\n3. **Semantic Kernel execution** - AI processes the final prompt\n\n### Input to final_summary_prompt.md:\n- **For chunking**: Concatenated chunk summaries (NOT the original transcript)\n- **For direct**: Original transcript text\n- **Template has**: `[yamlfrontmatter]` placeholder replaced with complete YAML\n\n### AI Processing:\nThe AI receives the final_summary_prompt.md with:\n- Complete YAML frontmatter already injected via `[yamlfrontmatter]` replacement\n- Instructions to generate only markdown content sections\n- All chunk summaries as input for synthesis\n\n### Documentation Features:\n- Comprehensive flow diagrams\n- Detailed code references with line numbers\n- Configuration examples\n- Troubleshooting guide\n- Extension points for developers\n- Performance considerations\n- Error handling strategies",
  "category": "flow-diagram",
  "dateCreated": "2025-06-13T23:01:47.066Z",
  "dateUpdated": "2025-06-13T23:05:53.898Z"
}