{
  "id": "fb279ae8-9fc1-491f-9bbb-cfc416247a3b",
  "title": "Program.cs Refactoring Strategy - UI Namespace",
  "details": "## 📋 Refactoring Proposal for Program.cs (Updated with UI namespace)\n\nThe current `Program.cs` file has grown to **677 lines** and handles multiple responsibilities. Here's the comprehensive refactoring strategy using UI namespace for better organization:\n\n## 🏗️ **Proposed Refactoring Structure**\n\n### **1. Keep Program.cs as Thin Orchestrator** (~50-80 lines)\n```csharp\ninternal class Program\n{\n    private static IServiceProvider? serviceProvider;\n    public static IServiceProvider ServiceProvider { get; }\n    public static async Task<int> Main(string[] args)\n    public static async Task<int> ExecuteMainAsync(string[] args)\n}\n```\n\n### **2. Create Specialized Service Classes**\n\n#### **`Startup/ApplicationBootstrapper.cs`** \n*Handles dependency injection and service setup*\n```csharp\ninternal class ApplicationBootstrapper\n{\n    public IServiceProvider SetupDependencyInjection(string? configPath, bool debug)\n    public string GetServiceSetupFriendlyMessage(Exception exception)\n}\n```\n\n#### **`Cli/CommandLineBuilder.cs`**\n*Handles command line setup and registration*\n```csharp\ninternal class CommandLineBuilder\n{\n    public RootCommand CreateRootCommand()\n    public CommandLineOptions CreateGlobalOptions()\n    public void RegisterCommands(RootCommand rootCommand, IServiceProvider serviceProvider)\n    public Parser BuildParser(RootCommand rootCommand)\n}\n```\n\n#### **`UI/HelpDisplayService.cs`** ⭐ UPDATED\n*Handles all help display logic*\n```csharp\ninternal class HelpDisplayService\n{\n    public async Task DisplayCustomHelpAsync(RootCommand rootCommand, string? configPath, bool isDebug, string[] args)\n    public void ShowVersionInfo()\n}\n```\n\n#### **`UI/EnvironmentDisplayService.cs`** ⭐ UPDATED\n*Handles environment and configuration display*\n```csharp\ninternal class EnvironmentDisplayService\n{\n    public async Task DisplayEnvironmentSettingsAsync(string? configPath, bool isDebug, string[] args)\n    public async Task DisplayConfigurationSettingsAsync(string configPath)\n}\n```\n\n#### **`Configuration/ConfigurationDiscoveryService.cs`**\n*Handles configuration file discovery*\n```csharp\ninternal class ConfigurationDiscoveryService\n{\n    public async Task<string?> DiscoverConfigurationForDisplayAsync(string? explicitConfigPath)\n    public string? ParseConfigPathFromArgs(string[] args)\n}\n```\n\n#### **`Utilities/CommandLineModeDetector.cs`**\n*Handles debug/verbose mode detection*\n```csharp\ninternal static class CommandLineModeDetector\n{\n    public static bool IsDebugModeEnabled(string[] args)\n    public static bool IsVerboseModeEnabled(string[] args)\n    public static CommandLineFlags DetectFlags(string[] args)\n}\n```\n\n## 📁 **Updated Directory Structure**\n```\nNotebookAutomation.Cli/\n├── Program.cs                          # Thin orchestrator (50-80 lines)\n├── Startup/\n│   └── ApplicationBootstrapper.cs      # DI and service setup\n├── Cli/\n│   └── CommandLineBuilder.cs           # Command line setup\n├── UI/                                 # ⭐ UPDATED: User Interface concerns\n│   ├── HelpDisplayService.cs           # Help display\n│   └── EnvironmentDisplayService.cs    # Environment display\n├── Configuration/\n│   └── ConfigurationDiscoveryService.cs # Config discovery\n├── Utilities/\n│   └── CommandLineModeDetector.cs      # Mode detection helpers\n├── Models/\n│   └── CommandLineOptions.cs          # Data structures\n└── Commands/                           # Existing command classes\n    ├── TagCommands.cs\n    ├── VaultCommands.cs\n    └── ...\n```\n\n## 🔧 **Benefits of UI Namespace**\n- **More concise** - \"UI\" vs \"Display\" is shorter and clearer\n- **Standard convention** - UI is commonly used in .NET applications\n- **Broader scope** - Can include future UI-related services (formatters, themes, etc.)\n- **Better intellisense** - Shorter namespace for better IDE experience\n\n## 🚀 **Implementation Priority**\n1. **UI services** - Most complex with formatting and display logic\n2. **Startup services** - Critical for dependency injection\n3. **Configuration services** - Used by UI services\n4. **Utilities** - Helper methods\n5. **Program.cs refactoring** - Final orchestration cleanup\n\nThe UI namespace provides a clean, organized home for all user interface and display-related functionality while keeping the naming convention concise and professional.",
  "category": "cli-enhancements",
  "dateCreated": "2025-06-14T16:02:02.066Z",
  "dateUpdated": "2025-06-14T16:06:01.272Z"
}