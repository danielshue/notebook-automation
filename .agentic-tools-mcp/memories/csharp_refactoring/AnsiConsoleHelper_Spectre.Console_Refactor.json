{
  "id": "47469b2f-c20b-4b8e-8c94-d70aa9a6a4dc",
  "title": "AnsiConsoleHelper Spectre.Console Refactor",
  "details": "## AnsiConsoleHelper Refactor Requirements\n\n### Current Implementation\n- Custom spinner using Unicode characters: `{ '⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏' }`\n- Manual ANSI escape code handling for cursor positioning\n- Thread-based animation with `Task.Run()`\n- Methods: `StartSpinner()`, `StopSpinner()`, `UpdateSpinnerMessage()`\n- Static color methods: `WriteInfo()`, `WriteWarning()`, `WriteError()`, `WriteSuccess()`, etc.\n\n### Usage Pattern in PdfCommands.cs\n```csharp\nAnsiConsoleHelper.StartSpinner($\"Processing PDF files...\");\nbatchProcessor.ProcessingProgressChanged += (sender, e) => \n{\n    AnsiConsoleHelper.UpdateSpinnerMessage(e.Status);\n};\n// ... processing ...\nAnsiConsoleHelper.StopSpinner();\n```\n\n### Requirements for Spectre.Console Implementation\n1. **Maintain Backward Compatibility**: Keep all existing method signatures\n2. **Replace Custom Spinner**: Use Spectre.Console's Status widget instead\n3. **Keep Message Pause Logic**: Preserve the 5500ms pause functionality \n4. **Proper Resource Cleanup**: Ensure Status widgets are properly disposed\n5. **Thread Safety**: Maintain thread-safe operation\n6. **Terminal Detection**: Handle non-interactive terminals gracefully\n\n### Key Dependencies\n- `AnsiColors` class for color constants (maintain for non-spinner methods)\n- Event-driven progress updates from batch processors\n- Static nature of the helper class\n\n### Implementation Strategy\n- Use `AnsiConsole.Status()` for spinner functionality\n- Keep existing color methods using Spectre.Console markup or maintain ANSI codes\n- Implement proper disposal pattern for Status contexts\n- Add async support while maintaining sync compatibility",
  "category": "csharp_refactoring",
  "dateCreated": "2025-06-03T02:47:24.447Z",
  "dateUpdated": "2025-06-03T02:47:24.447Z"
}