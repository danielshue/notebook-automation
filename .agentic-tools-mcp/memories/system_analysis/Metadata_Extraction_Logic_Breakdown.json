{
  "id": "f82ccf4d-7e63-482b-92da-a1f81eb218da",
  "title": "Metadata Extraction Logic Breakdown",
  "details": "# Detailed Breakdown: How the System Determines Course, Lesson, Program, and Module Metadata\n\n## Overview\nThe NotebookAutomation system uses a sophisticated multi-layered approach to extract and assign metadata fields. The extraction logic is implemented across several key classes with specific roles:\n\n1. **MetadataHierarchyDetector** - Extracts program, course, and class information from directory hierarchy\n2. **CourseStructureExtractor** - Extracts module and lesson information from filenames and directory patterns\n3. **TagProcessor** - Applies extracted metadata to files\n\n## 1. Program Determination Logic (`MetadataHierarchyDetector`)\n\n### Priority Order:\n1. **Explicit Override**: If a program override is provided via CLI or config, it takes highest precedence\n2. **Special Cases**: Hardcoded detection for \"Value Chain Management\" in path\n3. **YAML Index Scanning**: Searches for index files with program metadata\n4. **Path-based Fallback**: Extracts from directory structure\n5. **Default Fallback**: \"MBA Program\" if nothing else found\n\n### Key Patterns:\n- **Value Chain Management**: Special handling with sub-project structure (`01_Projects` level)\n- **Index Files**: Scans for `main-index.md`, `program-index.md` files with YAML frontmatter\n- **Directory Names**: Uses directory names as program identifiers when index files unavailable\n\n## 2. Course Determination Logic (`MetadataHierarchyDetector`)\n\n### Sources (in priority order):\n1. **YAML Frontmatter**: `title` field from course-index.md files\n2. **Directory Structure**: Course folders after program folders\n3. **Path Position**: Second level after program in directory hierarchy\n\n### Logic:\n- Scans up directory tree looking for `course-index.md` files\n- Uses YAML `title` field if available, falls back to directory name\n- For Value Chain Management: Course is after program (or after `01_Projects` sub-level)\n\n## 3. Class Determination Logic (`MetadataHierarchyDetector`)\n\n### Sources:\n1. **YAML Frontmatter**: `title` field from class-index.md files  \n2. **Directory Structure**: Class folders after course folders\n3. **Path Position**: Third level after program/course in hierarchy\n\n### Logic:\n- Similar to course detection but looks for `class-index.md` files\n- Uses hierarchical positioning when index files not available\n\n## 4. Module Determination Logic (`CourseStructureExtractor`)\n\n### Multi-Strategy Approach:\n\n#### Strategy 1: Filename-Based Extraction\n**Patterns Recognized:**\n- `Module-X-Name` format: \"Module-1-Introduction.pdf\" → \"Module 1 Introduction\"\n- `ModuleXName` compact format: \"Module1BasicConcepts.mp4\" → \"Module 1 Basic Concepts\"\n- `Week-X-Name` format: \"Week1-Introduction.pdf\" → \"Week1 Introduction\"\n- `Unit-X-Name` format: \"Unit-2-Advanced.pdf\" → \"Unit 2 Advanced\"\n- Numbered prefixes: \"01_course-overview-introduction.pdf\" → \"Course Overview Introduction\"\n\n#### Strategy 2: Directory Keyword Detection\n**Keywords Searched:**\n- \"module\" (case-insensitive)\n- \"course\" \n- \"week\"\n- \"unit\"\n\n**Logic:**\n- Scans current directory and parent directories\n- Looks for explicit module keywords in directory names\n- Prioritizes directories with module-like naming\n\n#### Strategy 3: Numbered Directory Pattern Analysis\n**Pattern Recognition:**\n- Numbered prefixes: `01_`, `02-`, etc.\n- Enhanced patterns: \"Week 1\", \"Unit 2\", \"Module 1\"\n- Session/Class patterns: \"Session 1\", \"Class 3\"\n\n**Hierarchical Logic:**\n- **Single-level courses**: Numbered directory becomes module (no lesson)\n- **Multi-level courses**: Parent numbered directory = module, child = lesson\n- **Fallback**: If only one numbered directory found, treats as module\n\n#### Strategy 4: Cleaning and Formatting\n**Text Processing:**\n- Removes numbering prefixes (`01_`, `02-`)\n- Converts camelCase to spaced words (\"BasicConcepts\" → \"Basic Concepts\")\n- Replaces hyphens/underscores with spaces\n- Applies title case formatting\n- Removes extra whitespace\n\n## 5. Lesson Determination Logic (`CourseStructureExtractor`)\n\n### Extraction Strategies:\n\n#### Strategy 1: Filename-Based Extraction\n**Patterns:**\n- `Lesson-X-Name` format: \"Lesson-2-Details.md\" → \"Lesson 2 Details\"\n- `LessonXName` compact format: \"Lesson3AdvancedTopics.docx\" → \"Lesson 3 Advanced Topics\"\n\n#### Strategy 2: Directory Keyword Detection\n**Keywords:**\n- \"lesson\" (case-insensitive)\n- \"session\"\n- \"lecture\" \n- \"class\"\n\n#### Strategy 3: Hierarchical Directory Analysis\n**Logic:**\n- If parent directory looks like module container AND current directory is numbered → current = lesson\n- Checks for module indicators in parent: \"module\", \"course\", \"week\", \"unit\"\n- Uses numbered directory patterns to establish hierarchy\n\n#### Strategy 4: Enhanced Pattern Recognition\n**Additional Patterns:**\n- \"Session X\" directories → lessons\n- \"Class X\" directories → lessons  \n- \"Lecture X\" directories → lessons\n\n## 6. Decision Flow & Fallback Strategy\n\n### Overall Process:\n1. **Filename Analysis**: First attempts to extract from filename patterns\n2. **Keyword Search**: Looks for explicit module/lesson keywords in directories\n3. **Pattern Analysis**: Analyzes numbered directory structures\n4. **Hierarchical Inference**: Uses directory relationships to determine module vs lesson\n5. **Single-level Handling**: Treats standalone numbered directories as modules\n\n### Special Cases:\n- **Case Studies**: Typically don't generate lesson metadata (only module if structured)\n- **Live Sessions**: May be handled as lessons depending on directory structure\n- **Mixed Content**: Prioritizes most specific pattern match\n\n## 7. Integration Points\n\n### Where These Components Connect:\n1. **MetadataEnsureProcessor**: Calls both MetadataHierarchyDetector and CourseStructureExtractor\n2. **TagProcessor**: Uses extracted metadata to update file tags\n3. **VaultCommands**: Orchestrates the entire metadata extraction process\n\n### Metadata Field Updates:\n- **ADD operations**: When metadata field doesn't exist\n- **MODIFY operations**: When improving existing metadata (e.g., generic → specific module names)\n- **Preserve operations**: Existing good metadata is not overwritten\n\n## 8. Configuration & Customization\n\n### Configurable Elements:\n- Program override via CLI `--program` parameter\n- Verbose logging for debugging extraction logic\n- Notebook vault root path for relative path calculations\n\n### Regex Patterns Used:\n- Number prefix detection: `^(\\d+)[_-]`\n- Module filename: `(?i)module\\s*[_-]?\\s*(\\d+)[_-]?\\s*(.+?)(?:\\.\\w+)?$`\n- Lesson filename: `(?i)lesson\\s*[_-]?\\s*(\\d+)[_-]?\\s*(.+?)(?:\\.\\w+)?$`\n- Week/Unit patterns: `(week|unit)[_\\s-]*\\d+`\n- CamelCase splitting: `(?<=[a-z])(?=[A-Z])`\n\nThis sophisticated extraction system ensures robust metadata assignment across diverse file and directory naming conventions while maintaining flexibility for different course structures.",
  "category": "system_analysis",
  "dateCreated": "2025-06-05T00:14:48.156Z",
  "dateUpdated": "2025-06-05T00:14:48.156Z"
}