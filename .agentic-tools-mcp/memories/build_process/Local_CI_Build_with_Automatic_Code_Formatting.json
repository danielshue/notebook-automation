{
  "id": "827e7d4d-9d9b-43e2-a49a-ec41b1821945",
  "title": "Local CI Build with Automatic Code Formatting",
  "details": "**Enhanced Local CI Build with Code Formatting:**\n\n**Added to Local Build Pipeline:**\n1. **New Step 3: Code Formatting** - Runs `dotnet format` after restore, before build\n2. **New Parameter: -SkipFormat** - Allows skipping formatting for faster iterations  \n3. **Updated Step Numbers** - All subsequent steps renumbered to maintain logical flow\n\n**Build Pipeline Order (Updated):**\n1. Clean Solution (optional, -SkipClean)\n2. Restore Dependencies  \n3. **Code Formatting (NEW)** - `dotnet format` fixes all formatting issues\n4. Build Solution\n5. Run Tests with Coverage (optional, -SkipTests)\n6. Test Publish Operations\n7. Static Code Analysis - Verification only (`--verify-no-changes`)\n\n**Key Benefits:**\n- **Proactive Formatting**: Local builds automatically fix formatting issues before they cause CI failures\n- **Developer Friendly**: Formatting happens early, so developers see clean code throughout the build\n- **Flexible Options**: Can skip formatting for quick iterations with -SkipFormat\n- **CI Compatibility**: Static analysis step still verifies formatting standards\n\n**Usage Examples:**\n- `.\\build-ci-local.ps1` - Full pipeline with formatting\n- `.\\build-ci-local.ps1 -SkipFormat` - Skip formatting for speed\n- `.\\build-ci-local.ps1 -SkipTests -SkipFormat` - Quick build only\n\n**VS Code Tasks Added:**\n- \"local-ci-build-quick\" - Skips both tests and formatting\n- \"dotnet-format-solution\" - Standalone formatting task\n\n**CI Strategy:**\n- Local builds: Apply formatting fixes automatically\n- GitHub Actions CI: Verify formatting standards (existing approach maintained)\n- Best practice: Run local build before pushing to catch and fix issues early",
  "category": "build_process",
  "dateCreated": "2025-06-02T16:33:52.779Z",
  "dateUpdated": "2025-06-02T16:33:52.779Z"
}