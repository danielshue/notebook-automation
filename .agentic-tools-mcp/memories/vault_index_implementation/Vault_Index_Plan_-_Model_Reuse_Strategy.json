{
  "id": "a4af4133-4b26-48a3-b7b0-7bd31c687d2f",
  "title": "Vault Index Plan - Model Reuse Strategy",
  "details": "# Updated Implementation Plan: Vault Generate-Index Feature - Model Reuse\n\n## **Corrected Phase 1: Core Infrastructure Setup**\n\n### 1.1 CLI Command Integration\n**File:** `NotebookAutomation.Cli/Commands/VaultCommands.cs`\n- Add generate-index command with proper flags\n- Use existing command patterns from other vault commands\n\n### 1.2 **REUSE Existing Models** (No new files needed)\n**Existing Model Reuse:**\n- `QueueItem(string filePath, string documentType)` - Use with documentType=\"FOLDER\" for folder processing\n- `DocumentProcessingProgressEventArgs` - Reuse for vault index progress reporting\n- `ProcessingStage` enum - Extend with new vault-specific stages\n- `DocumentProcessingStatus` - Reuse for folder processing status\n\n**Only extend ProcessingStage enum in Models/ProcessingStage.cs:**\n```csharp\n// Add new stages for vault index generation:\nFolderScan,\nHierarchyDetection, \nContentCategorization,\nIndexGeneration,\nBasesIntegration\n```\n\n### 1.3 Content Analysis Models\n**New Files (Content-specific, not queue-related):**\n- `Models/VaultContentItem.cs` - Represents a categorized content item\n- `Models/VaultContentGroup.cs` - Groups content by type and metadata\n- `Models/VaultIndexOptions.cs` - Configuration options for index generation\n\n## **Phase 2: Batch Processor Implementation**\n\n### 2.1 Main Processor Class\n**New File:** `Services/VaultIndexBatchProcessor.cs`\n\n**Key Methods using existing models:**\n```csharp\n// Use existing QueueItem with documentType=\"FOLDER\"\npublic async Task ProcessVaultAsync(string vaultPath, VaultIndexOptions options)\npublic async Task ProcessFolderAsync(QueueItem folderQueueItem)\nprivate async Task<List<QueueItem>> ScanAndQueueFoldersAsync(string vaultPath)\n\n// Use existing DocumentProcessingProgressEventArgs\npublic event EventHandler<DocumentProcessingProgressEventArgs>? ProgressChanged;\n```\n\n### 2.2 Queue Item Usage Pattern\n**For folder processing:**\n```csharp\nvar folderQueueItem = new QueueItem(folderPath, \"FOLDER\");\nfolderQueueItem.Stage = ProcessingStage.FolderScan;\nfolderQueueItem.Status = DocumentProcessingStatus.Processing;\n```\n\n**Progress reporting:**\n```csharp\nvar progressArgs = new DocumentProcessingProgressEventArgs(\n    folderPath, \n    \"Generating index for folder\", \n    currentFolder, \n    totalFolders);\nProgressChanged?.Invoke(this, progressArgs);\n```\n\n## **Benefits of Model Reuse:**\n1. **Consistency** - Same progress reporting pattern across all batch processors\n2. **Integration** - Works seamlessly with existing queue management\n3. **Simplicity** - No new models to learn or maintain\n4. **Pattern Reuse** - Leverages established event handling patterns\n\n## **Implementation Strategy:**\n1. Extend ProcessingStage enum for vault-specific stages\n2. Use QueueItem with documentType=\"FOLDER\" for folder processing\n3. Reuse DocumentProcessingProgressEventArgs for consistent progress reporting\n4. Create content-specific models only for categorization logic\n5. Follow existing batch processor patterns from the codebase\n\nThis approach maintains consistency with existing code patterns while avoiding unnecessary model duplication.",
  "category": "vault_index_implementation",
  "dateCreated": "2025-06-05T20:21:01.743Z",
  "dateUpdated": "2025-06-05T20:21:01.743Z"
}