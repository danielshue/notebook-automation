name: Cross-Platform Build and Package C# Notebook Automation Tool

on:
  push:
    branches:
      - master
    paths:
      - "src/c-sharp/**"
      - ".github/workflows/**"
      - "docs/**"
      - "!.agentic-tools-mcp/**"
  pull_request:
    branches:
      - master
    paths:
      - "src/c-sharp/**"
      - "docs/**"
      - ".github/workflows/**"
      - "!.agentic-tools-mcp/**"

# Control workflow execution retention - deletes workflow runs after 14 days
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Controls automatic cleanup of workflow runs
# Keeps only the 10 most recent workflow runs and deletes older runs
permissions:
  actions: write
  contents: read

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        dotnet-version: ["9.0.x"]
        include:
          - os: windows-latest
            runtime-id: win-x64
            runtime-id-arm: win-arm64
            executable-extension: .exe
            shell-type: pwsh
          - os: ubuntu-latest
            runtime-id: linux-x64
            runtime-id-arm: linux-arm64
            executable-extension: ""
            shell-type: bash
          - os: macos-latest
            runtime-id: osx-x64
            runtime-id-arm: osx-arm64
            executable-extension: ""
            shell-type: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ~/.local/share/NuGet/v3-cache
            ~/Library/Caches/NuGet/v3-cache
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore src/c-sharp/NotebookAutomation.sln

      - name: Build solution
        run: |
          dotnet build src/c-sharp/NotebookAutomation.sln --configuration Release --no-restore
          if [ $? -ne 0 ]; then echo "dotnet build failed"; exit 1; fi
          echo "Build output directory contents:"
          ls -la src/c-sharp/NotebookAutomation.Cli/bin/Release || true

      - name: Run tests with coverage
        run: |
          # Run all tests in the solution with coverage collection using runsettings
          dotnet test src/c-sharp/NotebookAutomation.sln --configuration Release --no-build --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" --settings coverlet.runsettings --results-directory TestResults/
          if [ $? -ne 0 ]; then echo "dotnet test failed"; exit 1; fi
          echo "TestResults directory contents:"
          ls -la TestResults || true
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.7
        with:
          reports: "TestResults/**/coverage.cobertura.xml"
          targetdir: "CoverageReport"
          reporttypes: "HtmlInline;Cobertura;MarkdownSummaryGithub;TextSummary"
          assemblyfilters: "+NotebookAutomation.*;-*.Tests"
          classfilters: "+*;-*Test*"
          filefilters: "+*"
          verbosity: "Info"
          title: "Notebook Automation Code Coverage Report (${{ runner.os }})"
          tag: "${{ github.run_number }}_${{ github.run_id }}_${{ runner.os }}"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ runner.os }}-${{ github.run_number }}
          path: TestResults/*.trx
          retention-days: 7 # Keep test results for 7 days

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ runner.os }}-${{ github.run_number }}
          path: CoverageReport/
          retention-days: 7 # Keep coverage reports for 7 days

      - name: Upload raw coverage results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-raw-${{ runner.os }}-${{ github.run_number }}
          path: TestResults/**/coverage.cobertura.xml
          retention-days: 7 # Keep raw coverage files for 7 days

      - name: Add coverage comment to PR (Windows only)
        if: github.event_name == 'pull_request' && runner.os == 'Windows'
        run: |
          if (Test-Path "CoverageReport/SummaryGithub.md") {
            gh pr comment $env:PR_NUMBER --body-file CoverageReport/SummaryGithub.md
          } else {
            echo "Coverage markdown summary not found, skipping PR comment"
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        shell: pwsh

      - name: Publish coverage in build summary (Windows)
        if: always() && runner.os == 'Windows'
        run: |
          if (Test-Path "CoverageReport/SummaryGithub.md") {
            Get-Content "CoverageReport/SummaryGithub.md" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          } else {
            echo "Coverage markdown summary not found, skipping build summary"
          }
        shell: pwsh

      - name: Publish coverage in build summary (Unix)
        if: always() && runner.os != 'Windows'
        run: |
          if [ -f "CoverageReport/SummaryGithub.md" ]; then
            cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage markdown summary not found, skipping build summary"
          fi
        shell: bash

      - name: Publish single-file executables (x64)
        if: always()
        run: |
          dotnet publish src/c-sharp/NotebookAutomation.Cli/NotebookAutomation.Cli.csproj -c Release -r ${{ matrix.runtime-id }} /p:PublishSingleFile=true /p:SelfContained=true --output publish/${{ matrix.runtime-id }}
          if [ $? -ne 0 ]; then echo "dotnet publish failed"; exit 1; fi
          echo "Publish directory contents (x64):"
          ls -la publish/${{ matrix.runtime-id }} || true

      - name: Publish single-file executables (ARM64)
        if: always()
        run: |
          dotnet publish src/c-sharp/NotebookAutomation.Cli/NotebookAutomation.Cli.csproj -c Release -r ${{ matrix.runtime-id-arm }} /p:PublishSingleFile=true /p:SelfContained=true --output publish/${{ matrix.runtime-id-arm }}
          if [ $? -ne 0 ]; then echo "dotnet publish failed"; exit 1; fi
          echo "Publish directory contents (ARM64):"
          ls -la publish/${{ matrix.runtime-id-arm }} || true

      - name: Test published executable (x64)
        if: always()
        run: |
          # Test the published executable
          echo "Published files in publish/${{ matrix.runtime-id }}:"
          ls -la publish/${{ matrix.runtime-id }} || true
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            exe_name="na.exe"
          else
            exe_name="na"
          fi
          if [ -f "publish/${{ matrix.runtime-id }}/$exe_name" ]; then
            ./publish/${{ matrix.runtime-id }}/$exe_name --version
          else
            echo "Executable not found: publish/${{ matrix.runtime-id }}/$exe_name"
            exit 1
          fi

      - name: Upload published executables
        if: always()
        run: |
          echo "Listing publish/${{ matrix.runtime-id }}:"
          ls -la publish/${{ matrix.runtime-id }} || true
          echo "Listing publish/${{ matrix.runtime-id-arm }}:"
          ls -la publish/${{ matrix.runtime-id-arm }} || true
          echo "Preparing artifact upload list..."
          files_to_upload=""
          for f in \
            publish/${{ matrix.runtime-id }}/na \
            publish/${{ matrix.runtime-id }}/na.exe \
            publish/${{ matrix.runtime-id-arm }}/na \
            publish/${{ matrix.runtime-id-arm }}/na.exe
          do
            if [ -f "$f" ]; then
              echo "Found: $f"
              files_to_upload+="$f\n"
            else
              echo "Not found: $f"
            fi
          done
          if [ -n "$files_to_upload" ]; then
            echo -e "$files_to_upload" > files-to-upload.txt
            echo "Uploading the following files:"
            cat files-to-upload.txt
            tar -czf published-executables-${{ runner.os }}-${{ github.run_number }}.tar.gz $(cat files-to-upload.txt)
          else
            echo "No executables found to upload."
            touch published-executables-${{ runner.os }}-${{ github.run_number }}.empty
          fi
        shell: bash
      - name: Upload published executables artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: published-executables-${{ runner.os }}-${{ github.run_number }}
          path: |
            published-executables-${{ runner.os }}-${{ github.run_number }}.tar.gz
            published-executables-${{ runner.os }}-${{ github.run_number }}.empty
          retention-days: 14 # Keep executables for 14 days (longer than test artifacts)

  # Consolidate artifacts from all platforms
  consolidate-artifacts:
    if: always()
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Consolidate executables
        run: |
          mkdir -p consolidated-executables

          # Copy all executables to consolidated directory
          find all-artifacts -name "published-executables-*" -type d | while read dir; do
            cp -r "$dir"/* consolidated-executables/ 2>/dev/null || true
          done

          # List what we have
          echo "Consolidated executables:"
          find consolidated-executables -type f -name "na*" -exec ls -la {} \;

      - name: Upload consolidated executables
        uses: actions/upload-artifact@v4
        with:
          name: all-platform-executables-${{ github.run_number }}
          path: consolidated-executables/
          retention-days: 30 # Keep consolidated executables longer
