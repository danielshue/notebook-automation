name: Cross-Platform Build and Package C# Notebook Automation Tool

on:
  push:
    branches:
      - master
    paths:
      - "src/c-sharp/**"
      - ".github/workflows/**"
      - "docs/**"
      - "!.agentic-tools-mcp/**"
  pull_request:
    branches:
      - master
    paths:
      - "src/c-sharp/**"
      - "docs/**"
      - ".github/workflows/**"
      - "!.agentic-tools-mcp/**"

# Control workflow execution retention - deletes workflow runs after 14 days
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Controls automatic cleanup of workflow runs
# Keeps only the 10 most recent workflow runs and deletes older runs
permissions:
  actions: write
  contents: read

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        dotnet-version: ["9.0.x"]
        include:
          - os: windows-latest
            runtime-id: win-x64
            runtime-id-arm: win-arm64
            executable-extension: .exe
            shell-type: pwsh
          - os: ubuntu-latest
            runtime-id: linux-x64
            runtime-id-arm: linux-arm64
            executable-extension: ""
            shell-type: bash
          - os: macos-latest
            runtime-id: osx-x64
            runtime-id-arm: osx-arm64
            executable-extension: ""
            shell-type: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ~/.local/share/NuGet/v3-cache
            ~/Library/Caches/NuGet/v3-cache
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore src/c-sharp/NotebookAutomation.sln

      - name: Set build version (Windows)
        if: runner.os == 'Windows'
        id: version-windows
        run: |
          $buildDate = Get-Date

          # Microsoft recommended format: major.minor.build.revision
          # where build is typically days since a base date and revision is seconds since midnight / 2

          # Calculate build number (days since Jan 1, 2024)
          $baseDate = Get-Date -Year 2024 -Month 1 -Day 1
          $daysSinceBase = [math]::Floor(($buildDate - $baseDate).TotalDays)

          # For CI builds, use GitHub run number modulo 65535 to keep within valid range
          # The revision component should be between 0-65535 for best compatibility
          $revision = [int]$env:GITHUB_RUN_NUMBER % 65535

          # Format version strings
          $major = 1
          $minor = 0

          # For NuGet package version (must be valid SemVer)
          $packageVersion = "$major.$minor.0"

          # For assembly version - must be a specific version for NuGet restore
          $assemblyVersion = "$major.$minor.0.0"

          # For file version - use MS recommended format
          $fileVersion = "$major.$minor.$daysSinceBase.$revision"

          echo "PACKAGE_VERSION=$packageVersion" >> $env:GITHUB_ENV
          echo "FILE_VERSION=$fileVersion" >> $env:GITHUB_ENV
          echo "ASSEMBLY_VERSION=$assemblyVersion" >> $env:GITHUB_ENV

          echo "Package Version: $packageVersion"
          echo "File Version: $fileVersion"
          echo "Assembly Version: $assemblyVersion"
        shell: pwsh

      - name: Set build version (Unix)
        if: runner.os != 'Windows'
        id: version-unix
        run: |
          buildDate=$(date -u +"%Y-%m-%d %H:%M:%S")

          # Calculate build number (days since Jan 1, 2024)
          baseDate=$(date -d "2024-01-01" +%s)
          currentDate=$(date +%s)
          daysSinceBase=$(( (currentDate - baseDate) / 86400 ))

          # For CI builds, use GitHub run number modulo 65535 to keep within valid range
          # The revision component should be between 0-65535 for best compatibility
          revision=$(( $GITHUB_RUN_NUMBER % 65535 ))

          # Format version strings
          major=1
          minor=0

          # For NuGet package version (must be valid SemVer)
          packageVersion="$major.$minor.0"

          # For assembly version - must be a specific version for NuGet restore
          assemblyVersion="$major.$minor.0.0"

          # For file version - use MS recommended format
          fileVersion="$major.$minor.$daysSinceBase.$revision"

          echo "PACKAGE_VERSION=$packageVersion" >> $GITHUB_ENV
          echo "FILE_VERSION=$fileVersion" >> $GITHUB_ENV
          echo "ASSEMBLY_VERSION=$assemblyVersion" >> $GITHUB_ENV

          echo "Package Version: $packageVersion"
          echo "File Version: $fileVersion"
          echo "Assembly Version: $assemblyVersion"
        shell: bash

      - name: Build solution
        run: dotnet build src/c-sharp/NotebookAutomation.sln --configuration Release --no-restore /p:Version=${{ env.PACKAGE_VERSION }} /p:FileVersion=${{ env.FILE_VERSION }} /p:AssemblyVersion=${{ env.ASSEMBLY_VERSION }} /p:InformationalVersion=${{ env.FILE_VERSION }}

      - name: Run tests with coverage
        run: |
          # Run all tests in the solution with coverage collection using runsettings
          dotnet test src/c-sharp/NotebookAutomation.sln --configuration Release --no-build --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" --settings coverlet.runsettings --results-directory TestResults/
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.7
        with:
          reports: "TestResults/**/coverage.cobertura.xml"
          targetdir: "CoverageReport"
          reporttypes: "HtmlInline;Cobertura;MarkdownSummaryGithub;TextSummary"
          assemblyfilters: "+NotebookAutomation.*;-*.Tests"
          classfilters: "+*;-*Test*"
          filefilters: "+*"
          verbosity: "Info"
          title: "Notebook Automation Code Coverage Report (${{ runner.os }})"
          tag: "${{ github.run_number }}_${{ github.run_id }}_${{ runner.os }}"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ runner.os }}-${{ github.run_number }}
          path: TestResults/*.trx
          retention-days: 7 # Keep test results for 7 days

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ runner.os }}-${{ github.run_number }}
          path: CoverageReport/
          retention-days: 14 # Keep coverage reports for 14 days

      - name: Upload raw coverage results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-raw-${{ runner.os }}-${{ github.run_number }}
          path: TestResults/**/coverage.cobertura.xml
          retention-days: 7 # Keep raw coverage files for 7 days

      - name: Add coverage comment to PR (Windows only)
        if: github.event_name == 'pull_request' && runner.os == 'Windows'
        run: |
          if (Test-Path "CoverageReport/SummaryGithub.md") {
            gh pr comment $env:PR_NUMBER --body-file CoverageReport/SummaryGithub.md
          } else {
            echo "Coverage markdown summary not found, skipping PR comment"
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        shell: pwsh

      - name: Publish coverage in build summary
        if: always()
        run: |
          if [ -f "CoverageReport/SummaryGithub.md" ]; then
            cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage markdown summary not found, skipping build summary"
          fi
        shell: bash

      - name: Publish single-file executables (x64)
        if: always()
        run: |
          dotnet publish src/c-sharp/NotebookAutomation.Cli/NotebookAutomation.Cli.csproj -c Release -r ${{ matrix.runtime-id }} /p:PublishSingleFile=true /p:SelfContained=true /p:Version=${{ env.PACKAGE_VERSION }} /p:FileVersion=${{ env.FILE_VERSION }} /p:AssemblyVersion=${{ env.ASSEMBLY_VERSION }} /p:InformationalVersion=${{ env.FILE_VERSION }} --output publish/${{ matrix.runtime-id }}

      - name: Publish single-file executables (ARM64)
        if: always()
        run: |
          dotnet publish src/c-sharp/NotebookAutomation.Cli/NotebookAutomation.Cli.csproj -c Release -r ${{ matrix.runtime-id-arm }} /p:PublishSingleFile=true /p:SelfContained=true /p:Version=${{ env.PACKAGE_VERSION }} /p:FileVersion=${{ env.FILE_VERSION }} /p:AssemblyVersion=${{ env.ASSEMBLY_VERSION }} /p:InformationalVersion=${{ env.FILE_VERSION }} --output publish/${{ matrix.runtime-id-arm }}

      - name: Test published executable (x64)
        if: always()
        run: |
          # Test the published executable
          ./publish/${{ matrix.runtime-id }}/na${{ matrix.executable-extension }} --version

      - name: Upload published executables
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: published-executables-${{ runner.os }}-${{ github.run_number }}
          path: |
            publish/${{ matrix.runtime-id }}/
            publish/${{ matrix.runtime-id-arm }}/
          retention-days: 14 # Keep executables for 14 days (longer than test artifacts)

  # Consolidate artifacts from all platforms
  consolidate-artifacts:
    if: always()
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Consolidate executables
        run: |
          mkdir -p consolidated-executables
          
          # Copy all executables to consolidated directory
          find all-artifacts -name "published-executables-*" -type d | while read dir; do
            cp -r "$dir"/* consolidated-executables/ 2>/dev/null || true
          done
          
          # List what we have
          echo "Consolidated executables:"
          find consolidated-executables -type f -name "na*" -exec ls -la {} \;

      - name: Upload consolidated executables
        uses: actions/upload-artifact@v4
        with:
          name: all-platform-executables-${{ github.run_number }}
          path: consolidated-executables/
          retention-days: 30 # Keep consolidated executables longer
