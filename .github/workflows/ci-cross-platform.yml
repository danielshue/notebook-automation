# -----------------------------------------------------------------------------
# Workflow: ci-cross-platform.yml
# Purpose: Cross-platform build, test, package, and release for Notebook Automation
#
# Description:
#   - Builds and tests the .NET solution on Windows, Linux, and macOS runners
#   - Publishes platform-specific executables for each OS/arch
#   - Consolidates all executables into a single artifact
#   - Builds and packages the Obsidian plugin with executables
#   - Creates a GitHub release with ready-to-install plugin directory on tag push
#
# Triggers:
#   - On push or pull request to master (src/c-sharp, docs, workflows)
#
# Main Jobs:
#   - build-and-test: Build, test, and publish executables for all platforms
#   - consolidate-artifacts: Gather all executables into one artifact
#   - obsidian-plugin-release: Build plugin and create GitHub release (on tag)
#
# Maintenance:
#   - Update matrix.os and dotnet-version as new platforms/SDKs are supported
#   - Ensure artifact names match between jobs for correct consolidation
#   - Review release asset preparation if plugin structure changes
#
# Security:
#   - Uses GitHub Actions tokens for artifact upload/release
#   - Only runs release job on tag push
#   - Artifacts are retained for 7 days for traceability
# -----------------------------------------------------------------------------
name: Cross-Platform Build and Package Notebook Automation Tool
on:
  push:
    branches:
      - master
    paths:
      - "src/c-sharp/**"
      - "src/obsidian-plugin/**"
      - ".github/workflows/**"
      - "docs/**"
      - "!.agentic-tools-mcp/**"
  pull_request:
    branches:
      - master
    paths:
      - "src/c-sharp/**"
      - "src/obsidian-plugin/**"
      - "docs/**"
      - ".github/workflows/**"
      - "!.agentic-tools-mcp/**"

# Concurrency and permissions

# Control workflow execution retention - deletes workflow runs after 14 days
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Only keep the 10 most recent workflow runs

# Controls automatic cleanup of workflow runs
# Keeps only the 10 most recent workflow runs and deletes older runs
permissions:
  actions: write
  contents: read

# ========================
# JOB: build-and-test
# ========================

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    outputs:
      informational-version: ${{ steps.gitversion-win.outputs.semver || steps.gitversion-nix.outputs.semver }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        dotnet-version: ["9.0.x"]
        include:
          - os: windows-latest
            runtime-id: win-x64
            runtime-id-arm: win-arm64
            executable-extension: .exe
            shell-type: pwsh
            platform-name: win
            x64-executable-name: na-win-x64.exe
            arm64-executable-name: na-win-arm64.exe
          - os: ubuntu-latest
            runtime-id: linux-x64
            runtime-id-arm: linux-arm64
            executable-extension: ""
            shell-type: bash
            platform-name: linux
            x64-executable-name: na-linux-x64
            arm64-executable-name: na-linux-arm64
          - os: macos-latest
            runtime-id: osx-x64
            runtime-id-arm: osx-arm64
            executable-extension: ""
            shell-type: bash
            platform-name: macos
            x64-executable-name: na-macos-x64
            arm64-executable-name: na-macos-arm64

    # Each matrix entry builds and tests for a specific OS/arch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # Diagnostic step to verify git state

      - name: Verify git repository
        run: |
          echo "Verifying git repository setup..."
          echo "Current directory: $(pwd)"
          echo "Git remote:"
          git remote -v || echo "No remotes found"
          echo "Git branch:"
          git branch -a || echo "No branches found"
          echo "Git status:"
          git status || echo "Git status failed"
          echo "Recent commits:"
          git log --oneline -10 || echo "Git log failed"
        shell: bash

      # Cache NuGet packages for faster builds

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ~/.local/share/NuGet/v3-cache
            ~/Library/Caches/NuGet/v3-cache
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Setup .NET SDK

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # Install GitVersion for semantic versioning

      - name: Install GitVersion tool
        run: dotnet tool install --global GitVersion.Tool

      # Get version info for each OS

      - name: Get version from GitVersion (Windows)
        if: runner.os == 'Windows'
        id: gitversion-win
        run: |
          echo "Running GitVersion on Windows..."
          $VERSION_JSON = dotnet gitversion /output json
          if ($LASTEXITCODE -ne 0) { 
            Write-Host "GitVersion failed, exit code: $LASTEXITCODE"
            Write-Host "Trying with /showvariable parameter..."
            $SEMVER = dotnet gitversion /showvariable SemVer
            if ($LASTEXITCODE -ne 0) {
              Write-Host "GitVersion /showvariable also failed"
              exit 1
            }
          } else {
            $SEMVER = ($VERSION_JSON | ConvertFrom-Json).SemVer
          }
          echo "semver=$SEMVER" >> $env:GITHUB_OUTPUT
          Write-Host "GitVersion SemVer: $SEMVER"
        shell: pwsh

      - name: Get version from GitVersion (Non-Windows)
        if: runner.os != 'Windows'
        id: gitversion-nix
        run: |
          echo "Running GitVersion on ${{ runner.os }}..."
          VERSION_JSON=$(dotnet gitversion /output json)
          SEMVER=$(echo $VERSION_JSON | jq -r '.SemVer')
          echo "semver=$SEMVER" >> $GITHUB_OUTPUT
          echo "GitVersion SemVer: $SEMVER"
        shell: bash

      # Restore and build solution

      - name: Restore dependencies
        run: dotnet restore src/c-sharp/NotebookAutomation.sln

      - name: Build solution (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          dotnet build src/c-sharp/NotebookAutomation.sln --configuration Release --no-restore
          if ($LASTEXITCODE -ne 0) { Write-Host "dotnet build failed"; exit 1 }
          Write-Host "Build output directory contents:"
          Get-ChildItem src/c-sharp/NotebookAutomation.Cli/bin/Release -Recurse | Format-Table FullName, Length

      - name: Build solution (Non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          dotnet build src/c-sharp/NotebookAutomation.sln --configuration Release --no-restore
          if [ $? -ne 0 ]; then echo "dotnet build failed"; exit 1; fi
          echo "Build output directory contents:"
          ls -la src/c-sharp/NotebookAutomation.Cli/bin/Release || true

      # Run tests with code coverage

      - name: Run tests with coverage (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          dotnet test src/c-sharp/NotebookAutomation.sln --configuration Release --no-build --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" --settings coverlet.runsettings --results-directory TestResults/
          if ($LASTEXITCODE -ne 0) { Write-Host "dotnet test failed"; exit 1 }
          Write-Host "TestResults directory contents:"
          Get-ChildItem TestResults | Format-Table Name, Length
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - name: Run tests with coverage (Non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          dotnet test src/c-sharp/NotebookAutomation.sln --configuration Release --no-build --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" --settings coverlet.runsettings --results-directory TestResults/
          if [ $? -ne 0 ]; then echo "dotnet test failed"; exit 1; fi
          echo "TestResults directory contents:"
          ls -la TestResults || true
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      # Generate and upload coverage reports

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.7
        with:
          reports: "TestResults/**/coverage.cobertura.xml"
          targetdir: "CoverageReport"
          reporttypes: "HtmlInline;Cobertura;MarkdownSummaryGithub;TextSummary"
          assemblyfilters: "+NotebookAutomation.*;-*.Tests"
          classfilters: "+*;-*Test*"
          filefilters: "+*"
          verbosity: "Info"
          title: "Notebook Automation Code Coverage Report (${{ runner.os }})"
          tag: "${{ steps.gitversion-win.outputs.semver || steps.gitversion-nix.outputs.semver }}_${{ github.run_id }}_${{ runner.os }}"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ runner.os }}-${{ steps.gitversion-win.outputs.semver || steps.gitversion-nix.outputs.semver }}
          path: TestResults/*.trx
          retention-days: 7 # Keep test results for 7 days

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ runner.os }}-${{ steps.gitversion-win.outputs.semver || steps.gitversion-nix.outputs.semver }}
          path: CoverageReport/
          retention-days: 7 # Keep coverage reports for 7 days

      - name: Upload raw coverage results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-raw-${{ runner.os }}-${{ steps.gitversion-win.outputs.semver || steps.gitversion-nix.outputs.semver }}
          path: TestResults/**/coverage.cobertura.xml
          retention-days: 7 # Keep raw coverage files for 7 days

      # Add coverage summary to PR/build summary

      - name: Add coverage comment to PR (Windows only)
        if: github.event_name == 'pull_request' && runner.os == 'Windows'
        continue-on-error: true
        run: |
          if (Test-Path "CoverageReport/SummaryGithub.md") {
            try {
              gh pr comment $env:PR_NUMBER --body-file CoverageReport/SummaryGithub.md
              Write-Host "Coverage comment added successfully"
            } catch {
              Write-Host "Failed to add PR comment (likely due to permissions): $($_.Exception.Message)"
              Write-Host "This is expected for forked PRs and doesn't affect the build"
            }
          } else {
            Write-Host "Coverage markdown summary not found, skipping PR comment"
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        shell: pwsh

      - name: Publish coverage in build summary (Windows)
        if: always() && runner.os == 'Windows'
        run: |
          if (Test-Path "CoverageReport/SummaryGithub.md") {
            Get-Content "CoverageReport/SummaryGithub.md" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          } else {
            echo "Coverage markdown summary not found, skipping build summary"
          }
        shell: pwsh

      - name: Publish coverage in build summary (Unix)
        if: always() && runner.os != 'Windows'
        run: |
          if [ -f "CoverageReport/SummaryGithub.md" ]; then
            cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage markdown summary not found, skipping build summary"
          fi
        shell: bash

      # Publish and test executables for each platform

      - name: Create executables directory
        run: mkdir -p publish/executables
        shell: bash

      - name: Publish and rename executables (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          # Ensure executables directory exists
          New-Item -ItemType Directory -Force -Path "publish/executables"

          # Publish x64 executable
          dotnet publish src/c-sharp/NotebookAutomation.Cli/NotebookAutomation.Cli.csproj -c Release -r ${{ matrix.runtime-id }} /p:PublishSingleFile=true /p:SelfContained=true --output publish/temp-${{ matrix.runtime-id }}
          if (!(Test-Path publish/temp-${{ matrix.runtime-id }})) { Write-Host "dotnet publish x64 failed"; exit 1 }
          Copy-Item "publish/temp-${{ matrix.runtime-id }}/na.exe" "publish/executables/${{ matrix.x64-executable-name }}"

          # Publish ARM64 executable
          dotnet publish src/c-sharp/NotebookAutomation.Cli/NotebookAutomation.Cli.csproj -c Release -r ${{ matrix.runtime-id-arm }} /p:PublishSingleFile=true /p:SelfContained=true --output publish/temp-${{ matrix.runtime-id-arm }}
          if (!(Test-Path publish/temp-${{ matrix.runtime-id-arm }})) { Write-Host "dotnet publish ARM64 failed"; exit 1 }
          Copy-Item "publish/temp-${{ matrix.runtime-id-arm }}/na.exe" "publish/executables/${{ matrix.arm64-executable-name }}"

          # Clean up temp directories
          Remove-Item -Recurse -Force publish/temp-* -ErrorAction SilentlyContinue

          Write-Host "Published executables:"
          Get-ChildItem publish/executables

      - name: Publish and rename executables (Non-Windows)
        if: always() && runner.os != 'Windows'
        shell: bash
        run: |
          # Ensure executables directory exists
          mkdir -p publish/executables

          # Publish x64 executable
          dotnet publish src/c-sharp/NotebookAutomation.Cli/NotebookAutomation.Cli.csproj -c Release -r ${{ matrix.runtime-id }} /p:PublishSingleFile=true /p:SelfContained=true --output publish/temp-${{ matrix.runtime-id }}
          if [ $? -ne 0 ]; then echo "dotnet publish x64 failed"; exit 1; fi
          cp "publish/temp-${{ matrix.runtime-id }}/na" "publish/executables/${{ matrix.x64-executable-name }}"

          # Publish ARM64 executable
          dotnet publish src/c-sharp/NotebookAutomation.Cli/NotebookAutomation.Cli.csproj -c Release -r ${{ matrix.runtime-id-arm }} /p:PublishSingleFile=true /p:SelfContained=true --output publish/temp-${{ matrix.runtime-id-arm }}
          if [ $? -ne 0 ]; then echo "dotnet publish ARM64 failed"; exit 1; fi
          cp "publish/temp-${{ matrix.runtime-id-arm }}/na" "publish/executables/${{ matrix.arm64-executable-name }}"

          # Clean up temp directories
          rm -rf publish/temp-*

          echo "Published executables:"
          ls -la publish/executables

      - name: Test published executables (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Testing x64 executable:"
          $exe_x64 = "publish/executables/${{ matrix.x64-executable-name }}"
          if (Test-Path $exe_x64) {
            & $exe_x64 --version
          } else {
            Write-Host "x64 executable not found: $exe_x64"
            exit 1
          }

          Write-Host "Testing ARM64 executable:"
          $exe_arm64 = "publish/executables/${{ matrix.arm64-executable-name }}"
          if (Test-Path $exe_arm64) {
            Write-Host "ARM64 executable found: $exe_arm64 (cannot test on x64 runner)"
          } else {
            Write-Host "ARM64 executable not found: $exe_arm64"
            exit 1
          }

      - name: Test published executables (Non-Windows)
        if: always() && runner.os != 'Windows'
        shell: bash
        run: |
          echo "Testing x64 executable:"
          exe_x64="publish/executables/${{ matrix.x64-executable-name }}"
          if [ -f "$exe_x64" ]; then
            chmod +x "$exe_x64"
            ./$exe_x64 --version
          else
            echo "x64 executable not found: $exe_x64"
            exit 1
          fi

          echo "Testing ARM64 executable:"
          exe_arm64="publish/executables/${{ matrix.arm64-executable-name }}"
          if [ -f "$exe_arm64" ]; then
            echo "ARM64 executable found: $exe_arm64 (cannot test on x64 runner)"
          else
            echo "ARM64 executable not found: $exe_arm64"
            exit 1
          fi

      - name: Upload published executables
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: executables-${{ matrix.platform-name }}-${{ steps.gitversion-win.outputs.semver || steps.gitversion-nix.outputs.semver }}
          path: publish/executables/
          retention-days: 7

  # ========================
  # JOB: consolidate-artifacts
  # ========================

  consolidate-artifacts:
    if: always()
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      informational-version: ${{ needs.build-and-test.outputs.informational-version }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Consolidate executables
        run: |
          mkdir -p consolidated-executables

          # Copy all executables from each platform artifact into a single directory
          find all-artifacts -name "executables-*" -type d | while read dir; do
            echo "Processing artifact directory: $dir"
            if [ -d "$dir" ]; then
              cp -v "$dir"/* consolidated-executables/ 2>/dev/null || true
            fi
          done

          # List what we have
          echo "Consolidated executables:"
          ls -la consolidated-executables/

      - name: Upload consolidated executables
        uses: actions/upload-artifact@v4
        with:
          name: all-platform-executables-${{ needs.build-and-test.outputs.informational-version }}
          path: consolidated-executables/
          retention-days: 7 # Keep consolidated executables for 7 days (max allowed)

  # ========================
  # JOB: obsidian-plugin-release
  # ========================

  obsidian-plugin-build-and-release:
    name: Obsidian Plugin Build and Release
    needs: consolidate-artifacts
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Build Obsidian plugin
        run: |
          cd src/obsidian-plugin
          npm install
          npm run build
      # Download all consolidated executables for release
      - name: Download consolidated executables
        uses: actions/download-artifact@v4
        with:
          name: all-platform-executables-${{ needs.consolidate-artifacts.outputs.informational-version }}
          path: consolidated-executables

      - name: Prepare plugin directory for BRAT/Community Release
        run: |
          PLUGIN_ID="notebook-automation"
          PLUGIN_DIR="$PLUGIN_ID"
          mkdir -p "$PLUGIN_DIR"
          # Copy required plugin files (fail if missing)
          for f in main.js manifest.json styles.css default-config.json metadata-schema.yml BaseBlockTemplate.yml chunk_summary_prompt.md final_summary_prompt.md; do
            if [ ! -f "src/obsidian-plugin/dist/$f" ] && [ ! -f "src/obsidian-plugin/$f" ] && [ ! -f "config/$f" ] && [ ! -f "prompts/$f" ]; then
              echo "❌ Required file missing: $f"; exit 1
            fi
            # Prefer dist/ for built files, fallback to root for manifest/styles/config, fallback to config/prompts for others
            if [ -f "src/obsidian-plugin/dist/$f" ]; then
              cp "src/obsidian-plugin/dist/$f" "$PLUGIN_DIR/"
            elif [ -f "src/obsidian-plugin/$f" ]; then
              cp "src/obsidian-plugin/$f" "$PLUGIN_DIR/"
            elif [ -f "config/$f" ]; then
              cp "config/$f" "$PLUGIN_DIR/"
            elif [ -f "prompts/$f" ]; then
              cp "prompts/$f" "$PLUGIN_DIR/"
            fi
          done
          # Copy all executables if present
          if [ -d consolidated-executables ]; then
            cp consolidated-executables/* "$PLUGIN_DIR/" 2>/dev/null || true
          fi
          ls -la "$PLUGIN_DIR"

      - name: Upload plugin and executables as artifact
        uses: actions/upload-artifact@v4
        with:
          name: notebook-automation-obsidian-plugin
          path: notebook-automation/
          retention-days: 7

      # Only create a GitHub release if this is a tag push
      - name: Create GitHub release with plugin and executables
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${GITHUB_REF#refs/tags/}"
          gh release create "$tag" \
            --title="$tag" \
            --draft \
            notebook-automation/*
